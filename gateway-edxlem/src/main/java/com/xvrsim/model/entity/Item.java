/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xvrsim.model.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** XVR Simulation Item, representing a visual entity inside the simulation world */
@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4545517960687460105L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.xvrsim.model.entity\",\"doc\":\"XVR Simulation Item, representing a visual entity inside the simulation world\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"globally unique identifier for this entity\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"name of this entity\"},{\"name\":\"owner\",\"type\":\"string\",\"doc\":\"identifier of the simulator currently responsible for this entity\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.geo\",\"doc\":\"WGS84-based standard representation of a location on earth\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"latitude in degrees (-90, 90] - 0 is equator\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]\"},{\"name\":\"altitude\",\"type\":\"double\",\"doc\":\"altitude in meters - 0 is surface of WGS84-based ellipsoid\"}]},\"doc\":\"location of this item\"},{\"name\":\"orientation\",\"type\":{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"eu.driver.model.geo\",\"doc\":\"WGS84/Aviation-based representation of an orientation on earth - Right-handed item-specific reference system, with in base-setting heading/yaw-axis pointing down (to the centre of the earth), pitch-axis pointing to the right, roll/bank-axis pointing forward\",\"fields\":[{\"name\":\"yaw\",\"type\":\"double\",\"doc\":\"yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST\"},{\"name\":\"pitch\",\"type\":\"double\",\"doc\":\"pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards\"},{\"name\":\"roll\",\"type\":\"double\",\"doc\":\"roll or bank in degrees (-180, 180] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - bank of +45 is 45 degrees roll to the right, -45 is 45 degrees roll to the left\"}]},\"doc\":\"orientation of this item\"},{\"name\":\"velocity\",\"type\":{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver.model.geo\",\"doc\":\"WGS84/Aviation-based representation of a velocity vector. Right-handed item-specific reference system, with in base-setting heading/yaw-axis pointing down (to the centre of the earth), pitch-axis pointing to the right, roll/bank-axis pointing forward\",\"fields\":[{\"name\":\"yaw\",\"type\":\"double\",\"doc\":\"yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST\"},{\"name\":\"pitch\",\"type\":\"double\",\"doc\":\"pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards\"},{\"name\":\"magnitude\",\"type\":\"double\",\"doc\":\"velocity in meter per second [0, inf) - 0 is standing still relative to the earth\"}]},\"doc\":\"movement vector of the item, including the magnitude\"},{\"name\":\"visibleForParticipant\",\"type\":\"boolean\",\"doc\":\"indication whether or not this item is visible for all participants\"},{\"name\":\"movable\",\"type\":\"boolean\",\"doc\":\"indication whether or not this item is movable in the simulation world\"},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"list of all tags associated with this item\",\"default\":null},{\"name\":\"physicalConnections\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"list of physical connection entities references (represented by their GUIDs) this item has\",\"default\":null},{\"name\":\"group\",\"type\":[\"null\",\"string\"],\"doc\":\"reference to the group connection entity (represented by its GUID) this item is part of\",\"default\":null},{\"name\":\"formation\",\"type\":[\"null\",\"string\"],\"doc\":\"reference to the formation connection entity (represented by its GUID) this item is part of\",\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"doc\":\"reference to the unit connection entity (represented by its GUID) this item is part of\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Item to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Item from a ByteBuffer. */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** globally unique identifier for this entity */
  @Deprecated public java.lang.CharSequence guid;
  /** name of this entity */
  @Deprecated public java.lang.CharSequence name;
  /** identifier of the simulator currently responsible for this entity */
  @Deprecated public java.lang.CharSequence owner;
  /** location of this item */
  @Deprecated public eu.driver.model.geo.Location location;
  /** orientation of this item */
  @Deprecated public eu.driver.model.geo.Orientation orientation;
  /** movement vector of the item, including the magnitude */
  @Deprecated public eu.driver.model.geo.Velocity velocity;
  /** indication whether or not this item is visible for all participants */
  @Deprecated public boolean visibleForParticipant;
  /** indication whether or not this item is movable in the simulation world */
  @Deprecated public boolean movable;
  /** list of all tags associated with this item */
  @Deprecated public java.util.List<java.lang.CharSequence> tags;
  /** list of physical connection entities references (represented by their GUIDs) this item has */
  @Deprecated public java.util.List<java.lang.CharSequence> physicalConnections;
  /** reference to the group connection entity (represented by its GUID) this item is part of */
  @Deprecated public java.lang.CharSequence group;
  /** reference to the formation connection entity (represented by its GUID) this item is part of */
  @Deprecated public java.lang.CharSequence formation;
  /** reference to the unit connection entity (represented by its GUID) this item is part of */
  @Deprecated public java.lang.CharSequence unit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param guid globally unique identifier for this entity
   * @param name name of this entity
   * @param owner identifier of the simulator currently responsible for this entity
   * @param location location of this item
   * @param orientation orientation of this item
   * @param velocity movement vector of the item, including the magnitude
   * @param visibleForParticipant indication whether or not this item is visible for all participants
   * @param movable indication whether or not this item is movable in the simulation world
   * @param tags list of all tags associated with this item
   * @param physicalConnections list of physical connection entities references (represented by their GUIDs) this item has
   * @param group reference to the group connection entity (represented by its GUID) this item is part of
   * @param formation reference to the formation connection entity (represented by its GUID) this item is part of
   * @param unit reference to the unit connection entity (represented by its GUID) this item is part of
   */
  public Item(java.lang.CharSequence guid, java.lang.CharSequence name, java.lang.CharSequence owner, eu.driver.model.geo.Location location, eu.driver.model.geo.Orientation orientation, eu.driver.model.geo.Velocity velocity, java.lang.Boolean visibleForParticipant, java.lang.Boolean movable, java.util.List<java.lang.CharSequence> tags, java.util.List<java.lang.CharSequence> physicalConnections, java.lang.CharSequence group, java.lang.CharSequence formation, java.lang.CharSequence unit) {
    this.guid = guid;
    this.name = name;
    this.owner = owner;
    this.location = location;
    this.orientation = orientation;
    this.velocity = velocity;
    this.visibleForParticipant = visibleForParticipant;
    this.movable = movable;
    this.tags = tags;
    this.physicalConnections = physicalConnections;
    this.group = group;
    this.formation = formation;
    this.unit = unit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return name;
    case 2: return owner;
    case 3: return location;
    case 4: return orientation;
    case 5: return velocity;
    case 6: return visibleForParticipant;
    case 7: return movable;
    case 8: return tags;
    case 9: return physicalConnections;
    case 10: return group;
    case 11: return formation;
    case 12: return unit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: owner = (java.lang.CharSequence)value$; break;
    case 3: location = (eu.driver.model.geo.Location)value$; break;
    case 4: orientation = (eu.driver.model.geo.Orientation)value$; break;
    case 5: velocity = (eu.driver.model.geo.Velocity)value$; break;
    case 6: visibleForParticipant = (java.lang.Boolean)value$; break;
    case 7: movable = (java.lang.Boolean)value$; break;
    case 8: tags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: physicalConnections = (java.util.List<java.lang.CharSequence>)value$; break;
    case 10: group = (java.lang.CharSequence)value$; break;
    case 11: formation = (java.lang.CharSequence)value$; break;
    case 12: unit = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return globally unique identifier for this entity
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * globally unique identifier for this entity
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return name of this entity
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of this entity
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return identifier of the simulator currently responsible for this entity
   */
  public java.lang.CharSequence getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * identifier of the simulator currently responsible for this entity
   * @param value the value to set.
   */
  public void setOwner(java.lang.CharSequence value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return location of this item
   */
  public eu.driver.model.geo.Location getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * location of this item
   * @param value the value to set.
   */
  public void setLocation(eu.driver.model.geo.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'orientation' field.
   * @return orientation of this item
   */
  public eu.driver.model.geo.Orientation getOrientation() {
    return orientation;
  }

  /**
   * Sets the value of the 'orientation' field.
   * orientation of this item
   * @param value the value to set.
   */
  public void setOrientation(eu.driver.model.geo.Orientation value) {
    this.orientation = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return movement vector of the item, including the magnitude
   */
  public eu.driver.model.geo.Velocity getVelocity() {
    return velocity;
  }

  /**
   * Sets the value of the 'velocity' field.
   * movement vector of the item, including the magnitude
   * @param value the value to set.
   */
  public void setVelocity(eu.driver.model.geo.Velocity value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'visibleForParticipant' field.
   * @return indication whether or not this item is visible for all participants
   */
  public java.lang.Boolean getVisibleForParticipant() {
    return visibleForParticipant;
  }

  /**
   * Sets the value of the 'visibleForParticipant' field.
   * indication whether or not this item is visible for all participants
   * @param value the value to set.
   */
  public void setVisibleForParticipant(java.lang.Boolean value) {
    this.visibleForParticipant = value;
  }

  /**
   * Gets the value of the 'movable' field.
   * @return indication whether or not this item is movable in the simulation world
   */
  public java.lang.Boolean getMovable() {
    return movable;
  }

  /**
   * Sets the value of the 'movable' field.
   * indication whether or not this item is movable in the simulation world
   * @param value the value to set.
   */
  public void setMovable(java.lang.Boolean value) {
    this.movable = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return list of all tags associated with this item
   */
  public java.util.List<java.lang.CharSequence> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * list of all tags associated with this item
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'physicalConnections' field.
   * @return list of physical connection entities references (represented by their GUIDs) this item has
   */
  public java.util.List<java.lang.CharSequence> getPhysicalConnections() {
    return physicalConnections;
  }

  /**
   * Sets the value of the 'physicalConnections' field.
   * list of physical connection entities references (represented by their GUIDs) this item has
   * @param value the value to set.
   */
  public void setPhysicalConnections(java.util.List<java.lang.CharSequence> value) {
    this.physicalConnections = value;
  }

  /**
   * Gets the value of the 'group' field.
   * @return reference to the group connection entity (represented by its GUID) this item is part of
   */
  public java.lang.CharSequence getGroup() {
    return group;
  }

  /**
   * Sets the value of the 'group' field.
   * reference to the group connection entity (represented by its GUID) this item is part of
   * @param value the value to set.
   */
  public void setGroup(java.lang.CharSequence value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'formation' field.
   * @return reference to the formation connection entity (represented by its GUID) this item is part of
   */
  public java.lang.CharSequence getFormation() {
    return formation;
  }

  /**
   * Sets the value of the 'formation' field.
   * reference to the formation connection entity (represented by its GUID) this item is part of
   * @param value the value to set.
   */
  public void setFormation(java.lang.CharSequence value) {
    this.formation = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return reference to the unit connection entity (represented by its GUID) this item is part of
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * reference to the unit connection entity (represented by its GUID) this item is part of
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static com.xvrsim.model.entity.Item.Builder newBuilder() {
    return new com.xvrsim.model.entity.Item.Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static com.xvrsim.model.entity.Item.Builder newBuilder(com.xvrsim.model.entity.Item.Builder other) {
    return new com.xvrsim.model.entity.Item.Builder(other);
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static com.xvrsim.model.entity.Item.Builder newBuilder(com.xvrsim.model.entity.Item other) {
    return new com.xvrsim.model.entity.Item.Builder(other);
  }

  /**
   * RecordBuilder for Item instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    /** globally unique identifier for this entity */
    private java.lang.CharSequence guid;
    /** name of this entity */
    private java.lang.CharSequence name;
    /** identifier of the simulator currently responsible for this entity */
    private java.lang.CharSequence owner;
    /** location of this item */
    private eu.driver.model.geo.Location location;
    private eu.driver.model.geo.Location.Builder locationBuilder;
    /** orientation of this item */
    private eu.driver.model.geo.Orientation orientation;
    private eu.driver.model.geo.Orientation.Builder orientationBuilder;
    /** movement vector of the item, including the magnitude */
    private eu.driver.model.geo.Velocity velocity;
    private eu.driver.model.geo.Velocity.Builder velocityBuilder;
    /** indication whether or not this item is visible for all participants */
    private boolean visibleForParticipant;
    /** indication whether or not this item is movable in the simulation world */
    private boolean movable;
    /** list of all tags associated with this item */
    private java.util.List<java.lang.CharSequence> tags;
    /** list of physical connection entities references (represented by their GUIDs) this item has */
    private java.util.List<java.lang.CharSequence> physicalConnections;
    /** reference to the group connection entity (represented by its GUID) this item is part of */
    private java.lang.CharSequence group;
    /** reference to the formation connection entity (represented by its GUID) this item is part of */
    private java.lang.CharSequence formation;
    /** reference to the unit connection entity (represented by its GUID) this item is part of */
    private java.lang.CharSequence unit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xvrsim.model.entity.Item.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = true;
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = eu.driver.model.geo.Location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[4], other.orientation)) {
        this.orientation = data().deepCopy(fields()[4].schema(), other.orientation);
        fieldSetFlags()[4] = true;
      }
      if (other.hasOrientationBuilder()) {
        this.orientationBuilder = eu.driver.model.geo.Orientation.newBuilder(other.getOrientationBuilder());
      }
      if (isValidValue(fields()[5], other.velocity)) {
        this.velocity = data().deepCopy(fields()[5].schema(), other.velocity);
        fieldSetFlags()[5] = true;
      }
      if (other.hasVelocityBuilder()) {
        this.velocityBuilder = eu.driver.model.geo.Velocity.newBuilder(other.getVelocityBuilder());
      }
      if (isValidValue(fields()[6], other.visibleForParticipant)) {
        this.visibleForParticipant = data().deepCopy(fields()[6].schema(), other.visibleForParticipant);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.movable)) {
        this.movable = data().deepCopy(fields()[7].schema(), other.movable);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tags)) {
        this.tags = data().deepCopy(fields()[8].schema(), other.tags);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.physicalConnections)) {
        this.physicalConnections = data().deepCopy(fields()[9].schema(), other.physicalConnections);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.group)) {
        this.group = data().deepCopy(fields()[10].schema(), other.group);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.formation)) {
        this.formation = data().deepCopy(fields()[11].schema(), other.formation);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.unit)) {
        this.unit = data().deepCopy(fields()[12].schema(), other.unit);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xvrsim.model.entity.Item other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[4], other.orientation)) {
        this.orientation = data().deepCopy(fields()[4].schema(), other.orientation);
        fieldSetFlags()[4] = true;
      }
      this.orientationBuilder = null;
      if (isValidValue(fields()[5], other.velocity)) {
        this.velocity = data().deepCopy(fields()[5].schema(), other.velocity);
        fieldSetFlags()[5] = true;
      }
      this.velocityBuilder = null;
      if (isValidValue(fields()[6], other.visibleForParticipant)) {
        this.visibleForParticipant = data().deepCopy(fields()[6].schema(), other.visibleForParticipant);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.movable)) {
        this.movable = data().deepCopy(fields()[7].schema(), other.movable);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tags)) {
        this.tags = data().deepCopy(fields()[8].schema(), other.tags);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.physicalConnections)) {
        this.physicalConnections = data().deepCopy(fields()[9].schema(), other.physicalConnections);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.group)) {
        this.group = data().deepCopy(fields()[10].schema(), other.group);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.formation)) {
        this.formation = data().deepCopy(fields()[11].schema(), other.formation);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.unit)) {
        this.unit = data().deepCopy(fields()[12].schema(), other.unit);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * globally unique identifier for this entity
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * globally unique identifier for this entity
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * globally unique identifier for this entity
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * globally unique identifier for this entity
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * name of this entity
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * name of this entity
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * name of this entity
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * name of this entity
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity
      * @return The value.
      */
    public java.lang.CharSequence getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setOwner(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.owner = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * identifier of the simulator currently responsible for this entity
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * location of this item
      * @return The value.
      */
    public eu.driver.model.geo.Location getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * location of this item
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setLocation(eu.driver.model.geo.Location value) {
      validate(fields()[3], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * location of this item
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * location of this item
     * @return This builder.
     */
    public eu.driver.model.geo.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(eu.driver.model.geo.Location.newBuilder(location));
        } else {
          setLocationBuilder(eu.driver.model.geo.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * location of this item
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.xvrsim.model.entity.Item.Builder setLocationBuilder(eu.driver.model.geo.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * location of this item
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * location of this item
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orientation' field.
      * orientation of this item
      * @return The value.
      */
    public eu.driver.model.geo.Orientation getOrientation() {
      return orientation;
    }

    /**
      * Sets the value of the 'orientation' field.
      * orientation of this item
      * @param value The value of 'orientation'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setOrientation(eu.driver.model.geo.Orientation value) {
      validate(fields()[4], value);
      this.orientationBuilder = null;
      this.orientation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orientation' field has been set.
      * orientation of this item
      * @return True if the 'orientation' field has been set, false otherwise.
      */
    public boolean hasOrientation() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'orientation' field and creates one if it doesn't exist yet.
     * orientation of this item
     * @return This builder.
     */
    public eu.driver.model.geo.Orientation.Builder getOrientationBuilder() {
      if (orientationBuilder == null) {
        if (hasOrientation()) {
          setOrientationBuilder(eu.driver.model.geo.Orientation.newBuilder(orientation));
        } else {
          setOrientationBuilder(eu.driver.model.geo.Orientation.newBuilder());
        }
      }
      return orientationBuilder;
    }

    /**
     * Sets the Builder instance for the 'orientation' field
     * orientation of this item
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.xvrsim.model.entity.Item.Builder setOrientationBuilder(eu.driver.model.geo.Orientation.Builder value) {
      clearOrientation();
      orientationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'orientation' field has an active Builder instance
     * orientation of this item
     * @return True if the 'orientation' field has an active Builder instance
     */
    public boolean hasOrientationBuilder() {
      return orientationBuilder != null;
    }

    /**
      * Clears the value of the 'orientation' field.
      * orientation of this item
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearOrientation() {
      orientation = null;
      orientationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * movement vector of the item, including the magnitude
      * @return The value.
      */
    public eu.driver.model.geo.Velocity getVelocity() {
      return velocity;
    }

    /**
      * Sets the value of the 'velocity' field.
      * movement vector of the item, including the magnitude
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setVelocity(eu.driver.model.geo.Velocity value) {
      validate(fields()[5], value);
      this.velocityBuilder = null;
      this.velocity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * movement vector of the item, including the magnitude
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'velocity' field and creates one if it doesn't exist yet.
     * movement vector of the item, including the magnitude
     * @return This builder.
     */
    public eu.driver.model.geo.Velocity.Builder getVelocityBuilder() {
      if (velocityBuilder == null) {
        if (hasVelocity()) {
          setVelocityBuilder(eu.driver.model.geo.Velocity.newBuilder(velocity));
        } else {
          setVelocityBuilder(eu.driver.model.geo.Velocity.newBuilder());
        }
      }
      return velocityBuilder;
    }

    /**
     * Sets the Builder instance for the 'velocity' field
     * movement vector of the item, including the magnitude
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.xvrsim.model.entity.Item.Builder setVelocityBuilder(eu.driver.model.geo.Velocity.Builder value) {
      clearVelocity();
      velocityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'velocity' field has an active Builder instance
     * movement vector of the item, including the magnitude
     * @return True if the 'velocity' field has an active Builder instance
     */
    public boolean hasVelocityBuilder() {
      return velocityBuilder != null;
    }

    /**
      * Clears the value of the 'velocity' field.
      * movement vector of the item, including the magnitude
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearVelocity() {
      velocity = null;
      velocityBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'visibleForParticipant' field.
      * indication whether or not this item is visible for all participants
      * @return The value.
      */
    public java.lang.Boolean getVisibleForParticipant() {
      return visibleForParticipant;
    }

    /**
      * Sets the value of the 'visibleForParticipant' field.
      * indication whether or not this item is visible for all participants
      * @param value The value of 'visibleForParticipant'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setVisibleForParticipant(boolean value) {
      validate(fields()[6], value);
      this.visibleForParticipant = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'visibleForParticipant' field has been set.
      * indication whether or not this item is visible for all participants
      * @return True if the 'visibleForParticipant' field has been set, false otherwise.
      */
    public boolean hasVisibleForParticipant() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'visibleForParticipant' field.
      * indication whether or not this item is visible for all participants
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearVisibleForParticipant() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'movable' field.
      * indication whether or not this item is movable in the simulation world
      * @return The value.
      */
    public java.lang.Boolean getMovable() {
      return movable;
    }

    /**
      * Sets the value of the 'movable' field.
      * indication whether or not this item is movable in the simulation world
      * @param value The value of 'movable'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setMovable(boolean value) {
      validate(fields()[7], value);
      this.movable = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'movable' field has been set.
      * indication whether or not this item is movable in the simulation world
      * @return True if the 'movable' field has been set, false otherwise.
      */
    public boolean hasMovable() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'movable' field.
      * indication whether or not this item is movable in the simulation world
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearMovable() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * list of all tags associated with this item
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTags() {
      return tags;
    }

    /**
      * Sets the value of the 'tags' field.
      * list of all tags associated with this item
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setTags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.tags = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * list of all tags associated with this item
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'tags' field.
      * list of all tags associated with this item
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearTags() {
      tags = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'physicalConnections' field.
      * list of physical connection entities references (represented by their GUIDs) this item has
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPhysicalConnections() {
      return physicalConnections;
    }

    /**
      * Sets the value of the 'physicalConnections' field.
      * list of physical connection entities references (represented by their GUIDs) this item has
      * @param value The value of 'physicalConnections'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setPhysicalConnections(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.physicalConnections = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'physicalConnections' field has been set.
      * list of physical connection entities references (represented by their GUIDs) this item has
      * @return True if the 'physicalConnections' field has been set, false otherwise.
      */
    public boolean hasPhysicalConnections() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'physicalConnections' field.
      * list of physical connection entities references (represented by their GUIDs) this item has
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearPhysicalConnections() {
      physicalConnections = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'group' field.
      * reference to the group connection entity (represented by its GUID) this item is part of
      * @return The value.
      */
    public java.lang.CharSequence getGroup() {
      return group;
    }

    /**
      * Sets the value of the 'group' field.
      * reference to the group connection entity (represented by its GUID) this item is part of
      * @param value The value of 'group'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setGroup(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.group = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'group' field has been set.
      * reference to the group connection entity (represented by its GUID) this item is part of
      * @return True if the 'group' field has been set, false otherwise.
      */
    public boolean hasGroup() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'group' field.
      * reference to the group connection entity (represented by its GUID) this item is part of
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearGroup() {
      group = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'formation' field.
      * reference to the formation connection entity (represented by its GUID) this item is part of
      * @return The value.
      */
    public java.lang.CharSequence getFormation() {
      return formation;
    }

    /**
      * Sets the value of the 'formation' field.
      * reference to the formation connection entity (represented by its GUID) this item is part of
      * @param value The value of 'formation'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setFormation(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.formation = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'formation' field has been set.
      * reference to the formation connection entity (represented by its GUID) this item is part of
      * @return True if the 'formation' field has been set, false otherwise.
      */
    public boolean hasFormation() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'formation' field.
      * reference to the formation connection entity (represented by its GUID) this item is part of
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearFormation() {
      formation = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * reference to the unit connection entity (represented by its GUID) this item is part of
      * @return The value.
      */
    public java.lang.CharSequence getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * reference to the unit connection entity (represented by its GUID) this item is part of
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.unit = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * reference to the unit connection entity (represented by its GUID) this item is part of
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'unit' field.
      * reference to the unit connection entity (represented by its GUID) this item is part of
      * @return This builder.
      */
    public com.xvrsim.model.entity.Item.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.owner = fieldSetFlags()[2] ? this.owner : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (locationBuilder != null) {
          record.location = this.locationBuilder.build();
        } else {
          record.location = fieldSetFlags()[3] ? this.location : (eu.driver.model.geo.Location) defaultValue(fields()[3]);
        }
        if (orientationBuilder != null) {
          record.orientation = this.orientationBuilder.build();
        } else {
          record.orientation = fieldSetFlags()[4] ? this.orientation : (eu.driver.model.geo.Orientation) defaultValue(fields()[4]);
        }
        if (velocityBuilder != null) {
          record.velocity = this.velocityBuilder.build();
        } else {
          record.velocity = fieldSetFlags()[5] ? this.velocity : (eu.driver.model.geo.Velocity) defaultValue(fields()[5]);
        }
        record.visibleForParticipant = fieldSetFlags()[6] ? this.visibleForParticipant : (java.lang.Boolean) defaultValue(fields()[6]);
        record.movable = fieldSetFlags()[7] ? this.movable : (java.lang.Boolean) defaultValue(fields()[7]);
        record.tags = fieldSetFlags()[8] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.physicalConnections = fieldSetFlags()[9] ? this.physicalConnections : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[9]);
        record.group = fieldSetFlags()[10] ? this.group : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.formation = fieldSetFlags()[11] ? this.formation : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.unit = fieldSetFlags()[12] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
