/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EllipticalArea extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6930990490714414791L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EllipticalArea\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"record\",\"name\":\"Coord\",\"fields\":[{\"name\":\"X\",\"type\":\"string\",\"doc\":\"The first coordinate in a coordinate system (30 27 45.3N)\"},{\"name\":\"Y\",\"type\":[\"null\",\"string\"],\"doc\":\"Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.\",\"default\":null},{\"name\":\"Z\",\"type\":[\"null\",\"string\"],\"doc\":\"Third ordinate in a coordinate system which has at least three ordinates.\",\"default\":null}]}},{\"name\":\"angle\",\"type\":\"double\"},{\"name\":\"semiMajor\",\"type\":\"double\"},{\"name\":\"semiMinor\",\"type\":\"double\"},{\"name\":\"stopAngle\",\"type\":\"double\"},{\"name\":\"angularUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"AngularUnit\",\"symbols\":[\"Degrees\",\"Radians\"]}],\"default\":null},{\"name\":\"distanceUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"DistanceUnit\",\"symbols\":[\"meter\"]}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EllipticalArea> ENCODER =
      new BinaryMessageEncoder<EllipticalArea>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EllipticalArea> DECODER =
      new BinaryMessageDecoder<EllipticalArea>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EllipticalArea> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EllipticalArea> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EllipticalArea>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EllipticalArea to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EllipticalArea from a ByteBuffer. */
  public static EllipticalArea fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.mlp.Coord coord;
  @Deprecated public double angle;
  @Deprecated public double semiMajor;
  @Deprecated public double semiMinor;
  @Deprecated public double stopAngle;
  @Deprecated public eu.driver.model.mlp.AngularUnit angularUnit;
  @Deprecated public eu.driver.model.mlp.DistanceUnit distanceUnit;
  @Deprecated public java.lang.CharSequence attr_gid;
  @Deprecated public java.lang.CharSequence attr_srsName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EllipticalArea() {}

  /**
   * All-args constructor.
   * @param coord The new value for coord
   * @param angle The new value for angle
   * @param semiMajor The new value for semiMajor
   * @param semiMinor The new value for semiMinor
   * @param stopAngle The new value for stopAngle
   * @param angularUnit The new value for angularUnit
   * @param distanceUnit The new value for distanceUnit
   * @param attr_gid The new value for attr_gid
   * @param attr_srsName The new value for attr_srsName
   */
  public EllipticalArea(eu.driver.model.mlp.Coord coord, java.lang.Double angle, java.lang.Double semiMajor, java.lang.Double semiMinor, java.lang.Double stopAngle, eu.driver.model.mlp.AngularUnit angularUnit, eu.driver.model.mlp.DistanceUnit distanceUnit, java.lang.CharSequence attr_gid, java.lang.CharSequence attr_srsName) {
    this.coord = coord;
    this.angle = angle;
    this.semiMajor = semiMajor;
    this.semiMinor = semiMinor;
    this.stopAngle = stopAngle;
    this.angularUnit = angularUnit;
    this.distanceUnit = distanceUnit;
    this.attr_gid = attr_gid;
    this.attr_srsName = attr_srsName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return coord;
    case 1: return angle;
    case 2: return semiMajor;
    case 3: return semiMinor;
    case 4: return stopAngle;
    case 5: return angularUnit;
    case 6: return distanceUnit;
    case 7: return attr_gid;
    case 8: return attr_srsName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: coord = (eu.driver.model.mlp.Coord)value$; break;
    case 1: angle = (java.lang.Double)value$; break;
    case 2: semiMajor = (java.lang.Double)value$; break;
    case 3: semiMinor = (java.lang.Double)value$; break;
    case 4: stopAngle = (java.lang.Double)value$; break;
    case 5: angularUnit = (eu.driver.model.mlp.AngularUnit)value$; break;
    case 6: distanceUnit = (eu.driver.model.mlp.DistanceUnit)value$; break;
    case 7: attr_gid = (java.lang.CharSequence)value$; break;
    case 8: attr_srsName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'coord' field.
   * @return The value of the 'coord' field.
   */
  public eu.driver.model.mlp.Coord getCoord() {
    return coord;
  }

  /**
   * Sets the value of the 'coord' field.
   * @param value the value to set.
   */
  public void setCoord(eu.driver.model.mlp.Coord value) {
    this.coord = value;
  }

  /**
   * Gets the value of the 'angle' field.
   * @return The value of the 'angle' field.
   */
  public java.lang.Double getAngle() {
    return angle;
  }

  /**
   * Sets the value of the 'angle' field.
   * @param value the value to set.
   */
  public void setAngle(java.lang.Double value) {
    this.angle = value;
  }

  /**
   * Gets the value of the 'semiMajor' field.
   * @return The value of the 'semiMajor' field.
   */
  public java.lang.Double getSemiMajor() {
    return semiMajor;
  }

  /**
   * Sets the value of the 'semiMajor' field.
   * @param value the value to set.
   */
  public void setSemiMajor(java.lang.Double value) {
    this.semiMajor = value;
  }

  /**
   * Gets the value of the 'semiMinor' field.
   * @return The value of the 'semiMinor' field.
   */
  public java.lang.Double getSemiMinor() {
    return semiMinor;
  }

  /**
   * Sets the value of the 'semiMinor' field.
   * @param value the value to set.
   */
  public void setSemiMinor(java.lang.Double value) {
    this.semiMinor = value;
  }

  /**
   * Gets the value of the 'stopAngle' field.
   * @return The value of the 'stopAngle' field.
   */
  public java.lang.Double getStopAngle() {
    return stopAngle;
  }

  /**
   * Sets the value of the 'stopAngle' field.
   * @param value the value to set.
   */
  public void setStopAngle(java.lang.Double value) {
    this.stopAngle = value;
  }

  /**
   * Gets the value of the 'angularUnit' field.
   * @return The value of the 'angularUnit' field.
   */
  public eu.driver.model.mlp.AngularUnit getAngularUnit() {
    return angularUnit;
  }

  /**
   * Sets the value of the 'angularUnit' field.
   * @param value the value to set.
   */
  public void setAngularUnit(eu.driver.model.mlp.AngularUnit value) {
    this.angularUnit = value;
  }

  /**
   * Gets the value of the 'distanceUnit' field.
   * @return The value of the 'distanceUnit' field.
   */
  public eu.driver.model.mlp.DistanceUnit getDistanceUnit() {
    return distanceUnit;
  }

  /**
   * Sets the value of the 'distanceUnit' field.
   * @param value the value to set.
   */
  public void setDistanceUnit(eu.driver.model.mlp.DistanceUnit value) {
    this.distanceUnit = value;
  }

  /**
   * Gets the value of the 'attr_gid' field.
   * @return The value of the 'attr_gid' field.
   */
  public java.lang.CharSequence getAttrGid() {
    return attr_gid;
  }

  /**
   * Sets the value of the 'attr_gid' field.
   * @param value the value to set.
   */
  public void setAttrGid(java.lang.CharSequence value) {
    this.attr_gid = value;
  }

  /**
   * Gets the value of the 'attr_srsName' field.
   * @return The value of the 'attr_srsName' field.
   */
  public java.lang.CharSequence getAttrSrsName() {
    return attr_srsName;
  }

  /**
   * Sets the value of the 'attr_srsName' field.
   * @param value the value to set.
   */
  public void setAttrSrsName(java.lang.CharSequence value) {
    this.attr_srsName = value;
  }

  /**
   * Creates a new EllipticalArea RecordBuilder.
   * @return A new EllipticalArea RecordBuilder
   */
  public static eu.driver.model.mlp.EllipticalArea.Builder newBuilder() {
    return new eu.driver.model.mlp.EllipticalArea.Builder();
  }

  /**
   * Creates a new EllipticalArea RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EllipticalArea RecordBuilder
   */
  public static eu.driver.model.mlp.EllipticalArea.Builder newBuilder(eu.driver.model.mlp.EllipticalArea.Builder other) {
    return new eu.driver.model.mlp.EllipticalArea.Builder(other);
  }

  /**
   * Creates a new EllipticalArea RecordBuilder by copying an existing EllipticalArea instance.
   * @param other The existing instance to copy.
   * @return A new EllipticalArea RecordBuilder
   */
  public static eu.driver.model.mlp.EllipticalArea.Builder newBuilder(eu.driver.model.mlp.EllipticalArea other) {
    return new eu.driver.model.mlp.EllipticalArea.Builder(other);
  }

  /**
   * RecordBuilder for EllipticalArea instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EllipticalArea>
    implements org.apache.avro.data.RecordBuilder<EllipticalArea> {

    private eu.driver.model.mlp.Coord coord;
    private eu.driver.model.mlp.Coord.Builder coordBuilder;
    private double angle;
    private double semiMajor;
    private double semiMinor;
    private double stopAngle;
    private eu.driver.model.mlp.AngularUnit angularUnit;
    private eu.driver.model.mlp.DistanceUnit distanceUnit;
    private java.lang.CharSequence attr_gid;
    private java.lang.CharSequence attr_srsName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.EllipticalArea.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.coord)) {
        this.coord = data().deepCopy(fields()[0].schema(), other.coord);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCoordBuilder()) {
        this.coordBuilder = eu.driver.model.mlp.Coord.newBuilder(other.getCoordBuilder());
      }
      if (isValidValue(fields()[1], other.angle)) {
        this.angle = data().deepCopy(fields()[1].schema(), other.angle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.semiMajor)) {
        this.semiMajor = data().deepCopy(fields()[2].schema(), other.semiMajor);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.semiMinor)) {
        this.semiMinor = data().deepCopy(fields()[3].schema(), other.semiMinor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stopAngle)) {
        this.stopAngle = data().deepCopy(fields()[4].schema(), other.stopAngle);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.angularUnit)) {
        this.angularUnit = data().deepCopy(fields()[5].schema(), other.angularUnit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distanceUnit)) {
        this.distanceUnit = data().deepCopy(fields()[6].schema(), other.distanceUnit);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.attr_gid)) {
        this.attr_gid = data().deepCopy(fields()[7].schema(), other.attr_gid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.attr_srsName)) {
        this.attr_srsName = data().deepCopy(fields()[8].schema(), other.attr_srsName);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EllipticalArea instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.EllipticalArea other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.coord)) {
        this.coord = data().deepCopy(fields()[0].schema(), other.coord);
        fieldSetFlags()[0] = true;
      }
      this.coordBuilder = null;
      if (isValidValue(fields()[1], other.angle)) {
        this.angle = data().deepCopy(fields()[1].schema(), other.angle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.semiMajor)) {
        this.semiMajor = data().deepCopy(fields()[2].schema(), other.semiMajor);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.semiMinor)) {
        this.semiMinor = data().deepCopy(fields()[3].schema(), other.semiMinor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stopAngle)) {
        this.stopAngle = data().deepCopy(fields()[4].schema(), other.stopAngle);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.angularUnit)) {
        this.angularUnit = data().deepCopy(fields()[5].schema(), other.angularUnit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distanceUnit)) {
        this.distanceUnit = data().deepCopy(fields()[6].schema(), other.distanceUnit);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.attr_gid)) {
        this.attr_gid = data().deepCopy(fields()[7].schema(), other.attr_gid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.attr_srsName)) {
        this.attr_srsName = data().deepCopy(fields()[8].schema(), other.attr_srsName);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'coord' field.
      * @return The value.
      */
    public eu.driver.model.mlp.Coord getCoord() {
      return coord;
    }

    /**
      * Sets the value of the 'coord' field.
      * @param value The value of 'coord'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setCoord(eu.driver.model.mlp.Coord value) {
      validate(fields()[0], value);
      this.coordBuilder = null;
      this.coord = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'coord' field has been set.
      * @return True if the 'coord' field has been set, false otherwise.
      */
    public boolean hasCoord() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'coord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.Coord.Builder getCoordBuilder() {
      if (coordBuilder == null) {
        if (hasCoord()) {
          setCoordBuilder(eu.driver.model.mlp.Coord.newBuilder(coord));
        } else {
          setCoordBuilder(eu.driver.model.mlp.Coord.newBuilder());
        }
      }
      return coordBuilder;
    }

    /**
     * Sets the Builder instance for the 'coord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.EllipticalArea.Builder setCoordBuilder(eu.driver.model.mlp.Coord.Builder value) {
      clearCoord();
      coordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coord' field has an active Builder instance
     * @return True if the 'coord' field has an active Builder instance
     */
    public boolean hasCoordBuilder() {
      return coordBuilder != null;
    }

    /**
      * Clears the value of the 'coord' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearCoord() {
      coord = null;
      coordBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'angle' field.
      * @return The value.
      */
    public java.lang.Double getAngle() {
      return angle;
    }

    /**
      * Sets the value of the 'angle' field.
      * @param value The value of 'angle'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setAngle(double value) {
      validate(fields()[1], value);
      this.angle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'angle' field has been set.
      * @return True if the 'angle' field has been set, false otherwise.
      */
    public boolean hasAngle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'angle' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearAngle() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'semiMajor' field.
      * @return The value.
      */
    public java.lang.Double getSemiMajor() {
      return semiMajor;
    }

    /**
      * Sets the value of the 'semiMajor' field.
      * @param value The value of 'semiMajor'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setSemiMajor(double value) {
      validate(fields()[2], value);
      this.semiMajor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'semiMajor' field has been set.
      * @return True if the 'semiMajor' field has been set, false otherwise.
      */
    public boolean hasSemiMajor() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'semiMajor' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearSemiMajor() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'semiMinor' field.
      * @return The value.
      */
    public java.lang.Double getSemiMinor() {
      return semiMinor;
    }

    /**
      * Sets the value of the 'semiMinor' field.
      * @param value The value of 'semiMinor'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setSemiMinor(double value) {
      validate(fields()[3], value);
      this.semiMinor = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'semiMinor' field has been set.
      * @return True if the 'semiMinor' field has been set, false otherwise.
      */
    public boolean hasSemiMinor() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'semiMinor' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearSemiMinor() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stopAngle' field.
      * @return The value.
      */
    public java.lang.Double getStopAngle() {
      return stopAngle;
    }

    /**
      * Sets the value of the 'stopAngle' field.
      * @param value The value of 'stopAngle'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setStopAngle(double value) {
      validate(fields()[4], value);
      this.stopAngle = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stopAngle' field has been set.
      * @return True if the 'stopAngle' field has been set, false otherwise.
      */
    public boolean hasStopAngle() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stopAngle' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearStopAngle() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'angularUnit' field.
      * @return The value.
      */
    public eu.driver.model.mlp.AngularUnit getAngularUnit() {
      return angularUnit;
    }

    /**
      * Sets the value of the 'angularUnit' field.
      * @param value The value of 'angularUnit'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setAngularUnit(eu.driver.model.mlp.AngularUnit value) {
      validate(fields()[5], value);
      this.angularUnit = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'angularUnit' field has been set.
      * @return True if the 'angularUnit' field has been set, false otherwise.
      */
    public boolean hasAngularUnit() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'angularUnit' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearAngularUnit() {
      angularUnit = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'distanceUnit' field.
      * @return The value.
      */
    public eu.driver.model.mlp.DistanceUnit getDistanceUnit() {
      return distanceUnit;
    }

    /**
      * Sets the value of the 'distanceUnit' field.
      * @param value The value of 'distanceUnit'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setDistanceUnit(eu.driver.model.mlp.DistanceUnit value) {
      validate(fields()[6], value);
      this.distanceUnit = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'distanceUnit' field has been set.
      * @return True if the 'distanceUnit' field has been set, false otherwise.
      */
    public boolean hasDistanceUnit() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'distanceUnit' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearDistanceUnit() {
      distanceUnit = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'attr_gid' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttrGid() {
      return attr_gid;
    }

    /**
      * Sets the value of the 'attr_gid' field.
      * @param value The value of 'attr_gid'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setAttrGid(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.attr_gid = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_gid' field has been set.
      * @return True if the 'attr_gid' field has been set, false otherwise.
      */
    public boolean hasAttrGid() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'attr_gid' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearAttrGid() {
      attr_gid = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'attr_srsName' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttrSrsName() {
      return attr_srsName;
    }

    /**
      * Sets the value of the 'attr_srsName' field.
      * @param value The value of 'attr_srsName'.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder setAttrSrsName(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.attr_srsName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_srsName' field has been set.
      * @return True if the 'attr_srsName' field has been set, false otherwise.
      */
    public boolean hasAttrSrsName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'attr_srsName' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.EllipticalArea.Builder clearAttrSrsName() {
      attr_srsName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EllipticalArea build() {
      try {
        EllipticalArea record = new EllipticalArea();
        if (coordBuilder != null) {
          record.coord = this.coordBuilder.build();
        } else {
          record.coord = fieldSetFlags()[0] ? this.coord : (eu.driver.model.mlp.Coord) defaultValue(fields()[0]);
        }
        record.angle = fieldSetFlags()[1] ? this.angle : (java.lang.Double) defaultValue(fields()[1]);
        record.semiMajor = fieldSetFlags()[2] ? this.semiMajor : (java.lang.Double) defaultValue(fields()[2]);
        record.semiMinor = fieldSetFlags()[3] ? this.semiMinor : (java.lang.Double) defaultValue(fields()[3]);
        record.stopAngle = fieldSetFlags()[4] ? this.stopAngle : (java.lang.Double) defaultValue(fields()[4]);
        record.angularUnit = fieldSetFlags()[5] ? this.angularUnit : (eu.driver.model.mlp.AngularUnit) defaultValue(fields()[5]);
        record.distanceUnit = fieldSetFlags()[6] ? this.distanceUnit : (eu.driver.model.mlp.DistanceUnit) defaultValue(fields()[6]);
        record.attr_gid = fieldSetFlags()[7] ? this.attr_gid : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.attr_srsName = fieldSetFlags()[8] ? this.attr_srsName : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EllipticalArea>
    WRITER$ = (org.apache.avro.io.DatumWriter<EllipticalArea>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EllipticalArea>
    READER$ = (org.apache.avro.io.DatumReader<EllipticalArea>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
