/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Pd extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3730904040307975293L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pd\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"time\",\"type\":{\"type\":\"record\",\"name\":\"Time\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"attr_utc_off\",\"type\":\"string\",\"doc\":\"Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.\",\"default\":\"0000\"}]}},{\"name\":\"shape\",\"type\":[{\"type\":\"record\",\"name\":\"Point\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"record\",\"name\":\"Coord\",\"fields\":[{\"name\":\"X\",\"type\":\"string\",\"doc\":\"The first coordinate in a coordinate system (30 27 45.3N)\"},{\"name\":\"Y\",\"type\":[\"null\",\"string\"],\"doc\":\"Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.\",\"default\":null},{\"name\":\"Z\",\"type\":[\"null\",\"string\"],\"doc\":\"Third ordinate in a coordinate system which has at least three ordinates.\",\"default\":null}]}},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"LineString\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"array\",\"items\":\"Coord\"},\"doc\":\"Must contain at least 2 coordinates\"},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"Polygon\",\"fields\":[{\"name\":\"outerBoundaryIs\",\"type\":{\"type\":\"record\",\"name\":\"LinearRing\",\"fields\":[{\"name\":\"coords\",\"type\":{\"type\":\"array\",\"items\":\"Coord\"},\"doc\":\"Must contain at least 3 coordinates\"}]}},{\"name\":\"innerBoundaryIs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"LinearRing\"}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"Box\",\"doc\":\"TODO: fix coord top left and bottom right names to be compatible with schema\",\"fields\":[{\"name\":\"coordTopLeft\",\"type\":\"Coord\"},{\"name\":\"coordBottomRight\",\"type\":\"Coord\"},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"CircularArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"radius\",\"type\":\"double\"},{\"name\":\"distanceUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"DistanceUnit\",\"symbols\":[\"meter\"]}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"CircularArcArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"inRadius\",\"type\":\"double\"},{\"name\":\"outRadius\",\"type\":\"double\"},{\"name\":\"startAngle\",\"type\":\"double\"},{\"name\":\"stopAngle\",\"type\":\"double\"},{\"name\":\"angularUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"AngularUnit\",\"symbols\":[\"Degrees\",\"Radians\"]}],\"default\":null},{\"name\":\"distanceUnit\",\"type\":[\"null\",\"DistanceUnit\"],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"EllipticalArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"angle\",\"type\":\"double\"},{\"name\":\"semiMajor\",\"type\":\"double\"},{\"name\":\"semiMinor\",\"type\":\"double\"},{\"name\":\"stopAngle\",\"type\":\"double\"},{\"name\":\"angularUnit\",\"type\":[\"null\",\"AngularUnit\"],\"default\":null},{\"name\":\"distanceUnit\",\"type\":[\"null\",\"DistanceUnit\"],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed\"},{\"name\":\"alt_alt_acc\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Alt\",\"fields\":[{\"name\":\"alt\",\"type\":\"int\",\"doc\":\"Altitude in meters\"}]},{\"type\":\"record\",\"name\":\"AltAcc\",\"fields\":[{\"name\":\"alt_acc\",\"type\":[\"null\",\"int\"],\"doc\":\"Accuracy of Altitude in meters\",\"default\":null}]}],\"default\":null},{\"name\":\"speed\",\"type\":[\"null\",\"int\"],\"doc\":\"Speed in m/s\",\"default\":null},{\"name\":\"direction\",\"type\":[\"null\",\"int\"],\"doc\":\"Direction of movement in degrees\",\"default\":null},{\"name\":\"lev_conf\",\"type\":[\"null\",\"int\"],\"doc\":\"Probability in percent that the Mobile Station is located in the position area that is returned\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Pd> ENCODER =
      new BinaryMessageEncoder<Pd>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Pd> DECODER =
      new BinaryMessageDecoder<Pd>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Pd> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Pd> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Pd>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Pd to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Pd from a ByteBuffer. */
  public static Pd fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.mlp.Time time;
  /** TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed */
  @Deprecated public java.lang.Object shape;
  @Deprecated public java.lang.Object alt_alt_acc;
  /** Speed in m/s */
  @Deprecated public java.lang.Integer speed;
  /** Direction of movement in degrees */
  @Deprecated public java.lang.Integer direction;
  /** Probability in percent that the Mobile Station is located in the position area that is returned */
  @Deprecated public java.lang.Integer lev_conf;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Pd() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param shape TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
   * @param alt_alt_acc The new value for alt_alt_acc
   * @param speed Speed in m/s
   * @param direction Direction of movement in degrees
   * @param lev_conf Probability in percent that the Mobile Station is located in the position area that is returned
   */
  public Pd(eu.driver.model.mlp.Time time, java.lang.Object shape, java.lang.Object alt_alt_acc, java.lang.Integer speed, java.lang.Integer direction, java.lang.Integer lev_conf) {
    this.time = time;
    this.shape = shape;
    this.alt_alt_acc = alt_alt_acc;
    this.speed = speed;
    this.direction = direction;
    this.lev_conf = lev_conf;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return shape;
    case 2: return alt_alt_acc;
    case 3: return speed;
    case 4: return direction;
    case 5: return lev_conf;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (eu.driver.model.mlp.Time)value$; break;
    case 1: shape = (java.lang.Object)value$; break;
    case 2: alt_alt_acc = (java.lang.Object)value$; break;
    case 3: speed = (java.lang.Integer)value$; break;
    case 4: direction = (java.lang.Integer)value$; break;
    case 5: lev_conf = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public eu.driver.model.mlp.Time getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(eu.driver.model.mlp.Time value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'shape' field.
   * @return TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
   */
  public java.lang.Object getShape() {
    return shape;
  }

  /**
   * Sets the value of the 'shape' field.
   * TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
   * @param value the value to set.
   */
  public void setShape(java.lang.Object value) {
    this.shape = value;
  }

  /**
   * Gets the value of the 'alt_alt_acc' field.
   * @return The value of the 'alt_alt_acc' field.
   */
  public java.lang.Object getAltAltAcc() {
    return alt_alt_acc;
  }

  /**
   * Sets the value of the 'alt_alt_acc' field.
   * @param value the value to set.
   */
  public void setAltAltAcc(java.lang.Object value) {
    this.alt_alt_acc = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return Speed in m/s
   */
  public java.lang.Integer getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * Speed in m/s
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Integer value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return Direction of movement in degrees
   */
  public java.lang.Integer getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * Direction of movement in degrees
   * @param value the value to set.
   */
  public void setDirection(java.lang.Integer value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'lev_conf' field.
   * @return Probability in percent that the Mobile Station is located in the position area that is returned
   */
  public java.lang.Integer getLevConf() {
    return lev_conf;
  }

  /**
   * Sets the value of the 'lev_conf' field.
   * Probability in percent that the Mobile Station is located in the position area that is returned
   * @param value the value to set.
   */
  public void setLevConf(java.lang.Integer value) {
    this.lev_conf = value;
  }

  /**
   * Creates a new Pd RecordBuilder.
   * @return A new Pd RecordBuilder
   */
  public static eu.driver.model.mlp.Pd.Builder newBuilder() {
    return new eu.driver.model.mlp.Pd.Builder();
  }

  /**
   * Creates a new Pd RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pd RecordBuilder
   */
  public static eu.driver.model.mlp.Pd.Builder newBuilder(eu.driver.model.mlp.Pd.Builder other) {
    return new eu.driver.model.mlp.Pd.Builder(other);
  }

  /**
   * Creates a new Pd RecordBuilder by copying an existing Pd instance.
   * @param other The existing instance to copy.
   * @return A new Pd RecordBuilder
   */
  public static eu.driver.model.mlp.Pd.Builder newBuilder(eu.driver.model.mlp.Pd other) {
    return new eu.driver.model.mlp.Pd.Builder(other);
  }

  /**
   * RecordBuilder for Pd instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pd>
    implements org.apache.avro.data.RecordBuilder<Pd> {

    private eu.driver.model.mlp.Time time;
    private eu.driver.model.mlp.Time.Builder timeBuilder;
    /** TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed */
    private java.lang.Object shape;
    private java.lang.Object alt_alt_acc;
    /** Speed in m/s */
    private java.lang.Integer speed;
    /** Direction of movement in degrees */
    private java.lang.Integer direction;
    /** Probability in percent that the Mobile Station is located in the position area that is returned */
    private java.lang.Integer lev_conf;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Pd.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTimeBuilder()) {
        this.timeBuilder = eu.driver.model.mlp.Time.newBuilder(other.getTimeBuilder());
      }
      if (isValidValue(fields()[1], other.shape)) {
        this.shape = data().deepCopy(fields()[1].schema(), other.shape);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alt_alt_acc)) {
        this.alt_alt_acc = data().deepCopy(fields()[2].schema(), other.alt_alt_acc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lev_conf)) {
        this.lev_conf = data().deepCopy(fields()[5].schema(), other.lev_conf);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Pd instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Pd other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      this.timeBuilder = null;
      if (isValidValue(fields()[1], other.shape)) {
        this.shape = data().deepCopy(fields()[1].schema(), other.shape);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alt_alt_acc)) {
        this.alt_alt_acc = data().deepCopy(fields()[2].schema(), other.alt_alt_acc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lev_conf)) {
        this.lev_conf = data().deepCopy(fields()[5].schema(), other.lev_conf);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public eu.driver.model.mlp.Time getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setTime(eu.driver.model.mlp.Time value) {
      validate(fields()[0], value);
      this.timeBuilder = null;
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'time' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.Time.Builder getTimeBuilder() {
      if (timeBuilder == null) {
        if (hasTime()) {
          setTimeBuilder(eu.driver.model.mlp.Time.newBuilder(time));
        } else {
          setTimeBuilder(eu.driver.model.mlp.Time.newBuilder());
        }
      }
      return timeBuilder;
    }

    /**
     * Sets the Builder instance for the 'time' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.Pd.Builder setTimeBuilder(eu.driver.model.mlp.Time.Builder value) {
      clearTime();
      timeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'time' field has an active Builder instance
     * @return True if the 'time' field has an active Builder instance
     */
    public boolean hasTimeBuilder() {
      return timeBuilder != null;
    }

    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearTime() {
      time = null;
      timeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shape' field.
      * TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
      * @return The value.
      */
    public java.lang.Object getShape() {
      return shape;
    }

    /**
      * Sets the value of the 'shape' field.
      * TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
      * @param value The value of 'shape'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setShape(java.lang.Object value) {
      validate(fields()[1], value);
      this.shape = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shape' field has been set.
      * TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
      * @return True if the 'shape' field has been set, false otherwise.
      */
    public boolean hasShape() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'shape' field.
      * TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearShape() {
      shape = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'alt_alt_acc' field.
      * @return The value.
      */
    public java.lang.Object getAltAltAcc() {
      return alt_alt_acc;
    }

    /**
      * Sets the value of the 'alt_alt_acc' field.
      * @param value The value of 'alt_alt_acc'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setAltAltAcc(java.lang.Object value) {
      validate(fields()[2], value);
      this.alt_alt_acc = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'alt_alt_acc' field has been set.
      * @return True if the 'alt_alt_acc' field has been set, false otherwise.
      */
    public boolean hasAltAltAcc() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'alt_alt_acc' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearAltAltAcc() {
      alt_alt_acc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * Speed in m/s
      * @return The value.
      */
    public java.lang.Integer getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * Speed in m/s
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setSpeed(java.lang.Integer value) {
      validate(fields()[3], value);
      this.speed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * Speed in m/s
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'speed' field.
      * Speed in m/s
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * Direction of movement in degrees
      * @return The value.
      */
    public java.lang.Integer getDirection() {
      return direction;
    }

    /**
      * Sets the value of the 'direction' field.
      * Direction of movement in degrees
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setDirection(java.lang.Integer value) {
      validate(fields()[4], value);
      this.direction = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * Direction of movement in degrees
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'direction' field.
      * Direction of movement in degrees
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lev_conf' field.
      * Probability in percent that the Mobile Station is located in the position area that is returned
      * @return The value.
      */
    public java.lang.Integer getLevConf() {
      return lev_conf;
    }

    /**
      * Sets the value of the 'lev_conf' field.
      * Probability in percent that the Mobile Station is located in the position area that is returned
      * @param value The value of 'lev_conf'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder setLevConf(java.lang.Integer value) {
      validate(fields()[5], value);
      this.lev_conf = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lev_conf' field has been set.
      * Probability in percent that the Mobile Station is located in the position area that is returned
      * @return True if the 'lev_conf' field has been set, false otherwise.
      */
    public boolean hasLevConf() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lev_conf' field.
      * Probability in percent that the Mobile Station is located in the position area that is returned
      * @return This builder.
      */
    public eu.driver.model.mlp.Pd.Builder clearLevConf() {
      lev_conf = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pd build() {
      try {
        Pd record = new Pd();
        if (timeBuilder != null) {
          record.time = this.timeBuilder.build();
        } else {
          record.time = fieldSetFlags()[0] ? this.time : (eu.driver.model.mlp.Time) defaultValue(fields()[0]);
        }
        record.shape = fieldSetFlags()[1] ? this.shape : (java.lang.Object) defaultValue(fields()[1]);
        record.alt_alt_acc = fieldSetFlags()[2] ? this.alt_alt_acc : (java.lang.Object) defaultValue(fields()[2]);
        record.speed = fieldSetFlags()[3] ? this.speed : (java.lang.Integer) defaultValue(fields()[3]);
        record.direction = fieldSetFlags()[4] ? this.direction : (java.lang.Integer) defaultValue(fields()[4]);
        record.lev_conf = fieldSetFlags()[5] ? this.lev_conf : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Pd>
    WRITER$ = (org.apache.avro.io.DatumWriter<Pd>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Pd>
    READER$ = (org.apache.avro.io.DatumReader<Pd>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
