/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Alt extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3135799743698439772L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Alt\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"alt\",\"type\":\"int\",\"doc\":\"Altitude in meters\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Alt> ENCODER =
      new BinaryMessageEncoder<Alt>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Alt> DECODER =
      new BinaryMessageDecoder<Alt>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Alt> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Alt> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Alt>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Alt to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Alt from a ByteBuffer. */
  public static Alt fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Altitude in meters */
  @Deprecated public int alt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Alt() {}

  /**
   * All-args constructor.
   * @param alt Altitude in meters
   */
  public Alt(java.lang.Integer alt) {
    this.alt = alt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alt = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'alt' field.
   * @return Altitude in meters
   */
  public java.lang.Integer getAlt() {
    return alt;
  }

  /**
   * Sets the value of the 'alt' field.
   * Altitude in meters
   * @param value the value to set.
   */
  public void setAlt(java.lang.Integer value) {
    this.alt = value;
  }

  /**
   * Creates a new Alt RecordBuilder.
   * @return A new Alt RecordBuilder
   */
  public static eu.driver.model.mlp.Alt.Builder newBuilder() {
    return new eu.driver.model.mlp.Alt.Builder();
  }

  /**
   * Creates a new Alt RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Alt RecordBuilder
   */
  public static eu.driver.model.mlp.Alt.Builder newBuilder(eu.driver.model.mlp.Alt.Builder other) {
    return new eu.driver.model.mlp.Alt.Builder(other);
  }

  /**
   * Creates a new Alt RecordBuilder by copying an existing Alt instance.
   * @param other The existing instance to copy.
   * @return A new Alt RecordBuilder
   */
  public static eu.driver.model.mlp.Alt.Builder newBuilder(eu.driver.model.mlp.Alt other) {
    return new eu.driver.model.mlp.Alt.Builder(other);
  }

  /**
   * RecordBuilder for Alt instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Alt>
    implements org.apache.avro.data.RecordBuilder<Alt> {

    /** Altitude in meters */
    private int alt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Alt.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alt)) {
        this.alt = data().deepCopy(fields()[0].schema(), other.alt);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Alt instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Alt other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.alt)) {
        this.alt = data().deepCopy(fields()[0].schema(), other.alt);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'alt' field.
      * Altitude in meters
      * @return The value.
      */
    public java.lang.Integer getAlt() {
      return alt;
    }

    /**
      * Sets the value of the 'alt' field.
      * Altitude in meters
      * @param value The value of 'alt'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Alt.Builder setAlt(int value) {
      validate(fields()[0], value);
      this.alt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'alt' field has been set.
      * Altitude in meters
      * @return True if the 'alt' field has been set, false otherwise.
      */
    public boolean hasAlt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'alt' field.
      * Altitude in meters
      * @return This builder.
      */
    public eu.driver.model.mlp.Alt.Builder clearAlt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Alt build() {
      try {
        Alt record = new Alt();
        record.alt = fieldSetFlags()[0] ? this.alt : (java.lang.Integer) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Alt>
    WRITER$ = (org.apache.avro.io.DatumWriter<Alt>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Alt>
    READER$ = (org.apache.avro.io.DatumReader<Alt>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
