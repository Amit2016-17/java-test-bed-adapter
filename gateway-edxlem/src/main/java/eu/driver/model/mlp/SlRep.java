/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Mobile Location Protocol (MLP) Approved Version 3.1. http://www.openmobilealliance.org/release/MLP/V3_1-20110920-A/OMA-LIF-MLP-V3_1-20110920-A.pdf - Standard Location Report (5.2.3.7) */
@org.apache.avro.specific.AvroGenerated
public class SlRep extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2217759364140403148L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SlRep\",\"namespace\":\"eu.driver.model.mlp\",\"doc\":\"Mobile Location Protocol (MLP) Approved Version 3.1. http://www.openmobilealliance.org/release/MLP/V3_1-20110920-A/OMA-LIF-MLP-V3_1-20110920-A.pdf - Standard Location Report (5.2.3.7)\",\"fields\":[{\"name\":\"attr_ver\",\"type\":\"string\",\"default\":\"3.0.0\"},{\"name\":\"pos\",\"type\":{\"type\":\"record\",\"name\":\"Pos\",\"fields\":[{\"name\":\"msid\",\"type\":{\"type\":\"record\",\"name\":\"Msid\",\"fields\":[{\"name\":\"msid\",\"type\":\"string\"},{\"name\":\"attr_type\",\"type\":{\"type\":\"enum\",\"name\":\"AttrType\",\"symbols\":[\"MSISDN\",\"IMSI\",\"IMEI\",\"MIN\",\"MDN\",\"EME_MSID\",\"ASID\",\"OPE_ID\",\"IPV4\",\"IPV6\",\"SESSID\"]}},{\"name\":\"attr_enc\",\"type\":{\"type\":\"enum\",\"name\":\"AttrEnc\",\"symbols\":[\"ASC\",\"CRP\"]},\"namespace\":\"eu.driver.model.mlp\"}]}},{\"name\":\"pd\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Pd\",\"fields\":[{\"name\":\"time\",\"type\":{\"type\":\"record\",\"name\":\"Time\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"attr_utc_off\",\"type\":\"string\",\"doc\":\"Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.\",\"default\":\"0000\"}]}},{\"name\":\"shape\",\"type\":[{\"type\":\"record\",\"name\":\"Point\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"record\",\"name\":\"Coord\",\"fields\":[{\"name\":\"X\",\"type\":\"string\",\"doc\":\"The first coordinate in a coordinate system (30 27 45.3N)\"},{\"name\":\"Y\",\"type\":[\"null\",\"string\"],\"doc\":\"Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.\",\"default\":null},{\"name\":\"Z\",\"type\":[\"null\",\"string\"],\"doc\":\"Third ordinate in a coordinate system which has at least three ordinates.\",\"default\":null}]}},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"LineString\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"array\",\"items\":\"Coord\"},\"doc\":\"Must contain at least 2 coordinates\"},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"Polygon\",\"fields\":[{\"name\":\"outerBoundaryIs\",\"type\":{\"type\":\"record\",\"name\":\"LinearRing\",\"fields\":[{\"name\":\"coords\",\"type\":{\"type\":\"array\",\"items\":\"Coord\"},\"doc\":\"Must contain at least 3 coordinates\"}]}},{\"name\":\"innerBoundaryIs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"LinearRing\"}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"Box\",\"doc\":\"TODO: fix coord top left and bottom right names to be compatible with schema\",\"fields\":[{\"name\":\"coordTopLeft\",\"type\":\"Coord\"},{\"name\":\"coordBottomRight\",\"type\":\"Coord\"},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"CircularArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"radius\",\"type\":\"double\"},{\"name\":\"distanceUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"DistanceUnit\",\"symbols\":[\"meter\"]}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"CircularArcArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"inRadius\",\"type\":\"double\"},{\"name\":\"outRadius\",\"type\":\"double\"},{\"name\":\"startAngle\",\"type\":\"double\"},{\"name\":\"stopAngle\",\"type\":\"double\"},{\"name\":\"angularUnit\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"AngularUnit\",\"symbols\":[\"Degrees\",\"Radians\"]}],\"default\":null},{\"name\":\"distanceUnit\",\"type\":[\"null\",\"DistanceUnit\"],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]},{\"type\":\"record\",\"name\":\"EllipticalArea\",\"fields\":[{\"name\":\"coord\",\"type\":\"Coord\"},{\"name\":\"angle\",\"type\":\"double\"},{\"name\":\"semiMajor\",\"type\":\"double\"},{\"name\":\"semiMinor\",\"type\":\"double\"},{\"name\":\"stopAngle\",\"type\":\"double\"},{\"name\":\"angularUnit\",\"type\":[\"null\",\"AngularUnit\"],\"default\":null},{\"name\":\"distanceUnit\",\"type\":[\"null\",\"DistanceUnit\"],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"doc\":\"TODO: add  MultiLineString | MultiPoint | MultiPolygon if they are needed\"},{\"name\":\"alt\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Alt\",\"fields\":[{\"name\":\"alt\",\"type\":\"int\",\"doc\":\"Altitude in meters\"}]}],\"default\":null},{\"name\":\"altAcc\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AltAcc\",\"fields\":[{\"name\":\"alt_acc\",\"type\":[\"null\",\"int\"],\"doc\":\"Accuracy of Altitude in meters\",\"default\":null}]}],\"default\":null},{\"name\":\"speed\",\"type\":[\"null\",\"int\"],\"doc\":\"Speed in m/s\",\"default\":null},{\"name\":\"direction\",\"type\":[\"null\",\"int\"],\"doc\":\"Direction of movement in degrees\",\"default\":null},{\"name\":\"lev_conf\",\"type\":[\"null\",\"int\"],\"doc\":\"Probability in percent that the Mobile Station is located in the position area that is returned\",\"default\":null}]}],\"default\":null},{\"name\":\"poserr\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Poserr\",\"fields\":[{\"name\":\"result\",\"type\":{\"type\":\"record\",\"name\":\"Result\",\"fields\":[{\"name\":\"result\",\"type\":{\"type\":\"enum\",\"name\":\"ResultEnum\",\"symbols\":[\"OK\",\"SYSTEM_FAILURE\",\"UNSPECIFIED_ERROR\",\"UNAUTHORIZED_APPLICATION\",\"UNKNOWN_SUBSCRIBER\",\"ABSENT_SUBSCRIBER\",\"POSITION_METHOD_FAILURE\",\"CONGESTION_IN_LOCATION_SERVER\",\"CONGESTION_IN_MOBILE_NETWORK\",\"UNSUPPORTED_VERSION\",\"TOO_MANY_POSITION_ITEMS\",\"FORMAT_ERROR\",\"SYNTAX_ERROR\",\"PROTOCOL_ELEMENT_NOT_SUPPORTED\",\"SERVICE_NOT_SUPPORTED\",\"PROTOCOL_ELEMENT_ATTRIBUTE_NOT_SUPPORTED\",\"INVALID_PROTOCOL_ELEMENT_VALUE\",\"INVALID_PROTOCOL_ELEMENT_ATTRIBUTE_VALUE\",\"PROTOCOL_ELEMENT_VALUE_NOT_SUPPORTED\",\"PROTOCOL_ELEMENT_ATTRIBUTE_VALUE_NOT_SUPPORTED\",\"QOP_NOT_ATTAINABLE\",\"POSITIONING_NOT_ALLOWED\",\"DISALLOWED_BY_LOCAL_REGULATIONS\",\"MISCONFIGURATION_OF_LOCATION_SERVER\"]},\"doc\":\"See MLP 3.1 specifications chapter 5.4 on Result Codes\"},{\"name\":\"attr_resid\",\"type\":\"string\",\"doc\":\"See MLP 3.1 specifications chapter 5.4 on Result Codes\"}]}},{\"name\":\"add_info\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"time\",\"type\":\"Time\"}]}],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SlRep> ENCODER =
      new BinaryMessageEncoder<SlRep>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SlRep> DECODER =
      new BinaryMessageDecoder<SlRep>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SlRep> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SlRep> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SlRep>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SlRep to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SlRep from a ByteBuffer. */
  public static SlRep fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence attr_ver;
  @Deprecated public eu.driver.model.mlp.Pos pos;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SlRep() {}

  /**
   * All-args constructor.
   * @param attr_ver The new value for attr_ver
   * @param pos The new value for pos
   */
  public SlRep(java.lang.CharSequence attr_ver, eu.driver.model.mlp.Pos pos) {
    this.attr_ver = attr_ver;
    this.pos = pos;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attr_ver;
    case 1: return pos;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attr_ver = (java.lang.CharSequence)value$; break;
    case 1: pos = (eu.driver.model.mlp.Pos)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'attr_ver' field.
   * @return The value of the 'attr_ver' field.
   */
  public java.lang.CharSequence getAttrVer() {
    return attr_ver;
  }

  /**
   * Sets the value of the 'attr_ver' field.
   * @param value the value to set.
   */
  public void setAttrVer(java.lang.CharSequence value) {
    this.attr_ver = value;
  }

  /**
   * Gets the value of the 'pos' field.
   * @return The value of the 'pos' field.
   */
  public eu.driver.model.mlp.Pos getPos() {
    return pos;
  }

  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(eu.driver.model.mlp.Pos value) {
    this.pos = value;
  }

  /**
   * Creates a new SlRep RecordBuilder.
   * @return A new SlRep RecordBuilder
   */
  public static eu.driver.model.mlp.SlRep.Builder newBuilder() {
    return new eu.driver.model.mlp.SlRep.Builder();
  }

  /**
   * Creates a new SlRep RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SlRep RecordBuilder
   */
  public static eu.driver.model.mlp.SlRep.Builder newBuilder(eu.driver.model.mlp.SlRep.Builder other) {
    return new eu.driver.model.mlp.SlRep.Builder(other);
  }

  /**
   * Creates a new SlRep RecordBuilder by copying an existing SlRep instance.
   * @param other The existing instance to copy.
   * @return A new SlRep RecordBuilder
   */
  public static eu.driver.model.mlp.SlRep.Builder newBuilder(eu.driver.model.mlp.SlRep other) {
    return new eu.driver.model.mlp.SlRep.Builder(other);
  }

  /**
   * RecordBuilder for SlRep instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SlRep>
    implements org.apache.avro.data.RecordBuilder<SlRep> {

    private java.lang.CharSequence attr_ver;
    private eu.driver.model.mlp.Pos pos;
    private eu.driver.model.mlp.Pos.Builder posBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.SlRep.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attr_ver)) {
        this.attr_ver = data().deepCopy(fields()[0].schema(), other.attr_ver);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pos)) {
        this.pos = data().deepCopy(fields()[1].schema(), other.pos);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPosBuilder()) {
        this.posBuilder = eu.driver.model.mlp.Pos.newBuilder(other.getPosBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing SlRep instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.SlRep other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.attr_ver)) {
        this.attr_ver = data().deepCopy(fields()[0].schema(), other.attr_ver);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pos)) {
        this.pos = data().deepCopy(fields()[1].schema(), other.pos);
        fieldSetFlags()[1] = true;
      }
      this.posBuilder = null;
    }

    /**
      * Gets the value of the 'attr_ver' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttrVer() {
      return attr_ver;
    }

    /**
      * Sets the value of the 'attr_ver' field.
      * @param value The value of 'attr_ver'.
      * @return This builder.
      */
    public eu.driver.model.mlp.SlRep.Builder setAttrVer(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.attr_ver = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_ver' field has been set.
      * @return True if the 'attr_ver' field has been set, false otherwise.
      */
    public boolean hasAttrVer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'attr_ver' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.SlRep.Builder clearAttrVer() {
      attr_ver = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pos' field.
      * @return The value.
      */
    public eu.driver.model.mlp.Pos getPos() {
      return pos;
    }

    /**
      * Sets the value of the 'pos' field.
      * @param value The value of 'pos'.
      * @return This builder.
      */
    public eu.driver.model.mlp.SlRep.Builder setPos(eu.driver.model.mlp.Pos value) {
      validate(fields()[1], value);
      this.posBuilder = null;
      this.pos = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pos' field has been set.
      * @return True if the 'pos' field has been set, false otherwise.
      */
    public boolean hasPos() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'pos' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.Pos.Builder getPosBuilder() {
      if (posBuilder == null) {
        if (hasPos()) {
          setPosBuilder(eu.driver.model.mlp.Pos.newBuilder(pos));
        } else {
          setPosBuilder(eu.driver.model.mlp.Pos.newBuilder());
        }
      }
      return posBuilder;
    }

    /**
     * Sets the Builder instance for the 'pos' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.SlRep.Builder setPosBuilder(eu.driver.model.mlp.Pos.Builder value) {
      clearPos();
      posBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'pos' field has an active Builder instance
     * @return True if the 'pos' field has an active Builder instance
     */
    public boolean hasPosBuilder() {
      return posBuilder != null;
    }

    /**
      * Clears the value of the 'pos' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.SlRep.Builder clearPos() {
      pos = null;
      posBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SlRep build() {
      try {
        SlRep record = new SlRep();
        record.attr_ver = fieldSetFlags()[0] ? this.attr_ver : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (posBuilder != null) {
          record.pos = this.posBuilder.build();
        } else {
          record.pos = fieldSetFlags()[1] ? this.pos : (eu.driver.model.mlp.Pos) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SlRep>
    WRITER$ = (org.apache.avro.io.DatumWriter<SlRep>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SlRep>
    READER$ = (org.apache.avro.io.DatumReader<SlRep>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
