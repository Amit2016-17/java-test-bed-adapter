/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.examples.adapter;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A reachability analysis response for keep operational. */
@org.apache.avro.specific.AvroGenerated
public class KeepOperationalReachabilityResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1250083395598654587L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KeepOperationalReachabilityResponse\",\"namespace\":\"eu.driver.model\",\"doc\":\"A reachability analysis response for keep operational.\",\"fields\":[{\"name\":\"errorMessages\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"If request could not be served with success, errorMessages represents a list of separated errors.\"},{\"name\":\"listOfIsochroneInformation\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ReachabilityInformation\",\"fields\":[{\"name\":\"travelTimeInSec\",\"type\":\"int\",\"doc\":\"The travel time until this edge is reached\"},{\"name\":\"shape\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"A list of coordinates in the shape of this route.\"}]}},\"doc\":\"Reachability information, containing a list of edges and travel time.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** If request could not be served with success, errorMessages represents a list of separated errors. */
  @Deprecated public java.util.List<java.lang.CharSequence> errorMessages;
  /** Reachability information, containing a list of edges and travel time. */
  @Deprecated public java.util.List<ReachabilityInformation> listOfIsochroneInformation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KeepOperationalReachabilityResponse() {}

  /**
   * All-args constructor.
   * @param errorMessages If request could not be served with success, errorMessages represents a list of separated errors.
   * @param listOfIsochroneInformation Reachability information, containing a list of edges and travel time.
   */
  public KeepOperationalReachabilityResponse(java.util.List<java.lang.CharSequence> errorMessages, java.util.List<ReachabilityInformation> listOfIsochroneInformation) {
    this.errorMessages = errorMessages;
    this.listOfIsochroneInformation = listOfIsochroneInformation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return errorMessages;
    case 1: return listOfIsochroneInformation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: errorMessages = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: listOfIsochroneInformation = (java.util.List<ReachabilityInformation>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'errorMessages' field.
   * @return If request could not be served with success, errorMessages represents a list of separated errors.
   */
  public java.util.List<java.lang.CharSequence> getErrorMessages() {
    return errorMessages;
  }

  /**
   * Sets the value of the 'errorMessages' field.
   * If request could not be served with success, errorMessages represents a list of separated errors.
   * @param value the value to set.
   */
  public void setErrorMessages(java.util.List<java.lang.CharSequence> value) {
    this.errorMessages = value;
  }

  /**
   * Gets the value of the 'listOfIsochroneInformation' field.
   * @return Reachability information, containing a list of edges and travel time.
   */
  public java.util.List<ReachabilityInformation> getListOfIsochroneInformation() {
    return listOfIsochroneInformation;
  }

  /**
   * Sets the value of the 'listOfIsochroneInformation' field.
   * Reachability information, containing a list of edges and travel time.
   * @param value the value to set.
   */
  public void setListOfIsochroneInformation(java.util.List<ReachabilityInformation> value) {
    this.listOfIsochroneInformation = value;
  }

  /**
   * Creates a new KeepOperationalReachabilityResponse RecordBuilder.
   * @return A new KeepOperationalReachabilityResponse RecordBuilder
   */
  public static KeepOperationalReachabilityResponse.Builder newBuilder() {
    return new KeepOperationalReachabilityResponse.Builder();
  }

  /**
   * Creates a new KeepOperationalReachabilityResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KeepOperationalReachabilityResponse RecordBuilder
   */
  public static KeepOperationalReachabilityResponse.Builder newBuilder(KeepOperationalReachabilityResponse.Builder other) {
    return new KeepOperationalReachabilityResponse.Builder(other);
  }

  /**
   * Creates a new KeepOperationalReachabilityResponse RecordBuilder by copying an existing KeepOperationalReachabilityResponse instance.
   * @param other The existing instance to copy.
   * @return A new KeepOperationalReachabilityResponse RecordBuilder
   */
  public static KeepOperationalReachabilityResponse.Builder newBuilder(KeepOperationalReachabilityResponse other) {
    return new KeepOperationalReachabilityResponse.Builder(other);
  }

  /**
   * RecordBuilder for KeepOperationalReachabilityResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KeepOperationalReachabilityResponse>
    implements org.apache.avro.data.RecordBuilder<KeepOperationalReachabilityResponse> {

    /** If request could not be served with success, errorMessages represents a list of separated errors. */
    private java.util.List<java.lang.CharSequence> errorMessages;
    /** Reachability information, containing a list of edges and travel time. */
    private java.util.List<ReachabilityInformation> listOfIsochroneInformation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(KeepOperationalReachabilityResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.errorMessages)) {
        this.errorMessages = data().deepCopy(fields()[0].schema(), other.errorMessages);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.listOfIsochroneInformation)) {
        this.listOfIsochroneInformation = data().deepCopy(fields()[1].schema(), other.listOfIsochroneInformation);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KeepOperationalReachabilityResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(KeepOperationalReachabilityResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.errorMessages)) {
        this.errorMessages = data().deepCopy(fields()[0].schema(), other.errorMessages);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.listOfIsochroneInformation)) {
        this.listOfIsochroneInformation = data().deepCopy(fields()[1].schema(), other.listOfIsochroneInformation);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'errorMessages' field.
      * If request could not be served with success, errorMessages represents a list of separated errors.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getErrorMessages() {
      return errorMessages;
    }

    /**
      * Sets the value of the 'errorMessages' field.
      * If request could not be served with success, errorMessages represents a list of separated errors.
      * @param value The value of 'errorMessages'.
      * @return This builder.
      */
    public KeepOperationalReachabilityResponse.Builder setErrorMessages(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.errorMessages = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessages' field has been set.
      * If request could not be served with success, errorMessages represents a list of separated errors.
      * @return True if the 'errorMessages' field has been set, false otherwise.
      */
    public boolean hasErrorMessages() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'errorMessages' field.
      * If request could not be served with success, errorMessages represents a list of separated errors.
      * @return This builder.
      */
    public KeepOperationalReachabilityResponse.Builder clearErrorMessages() {
      errorMessages = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'listOfIsochroneInformation' field.
      * Reachability information, containing a list of edges and travel time.
      * @return The value.
      */
    public java.util.List<ReachabilityInformation> getListOfIsochroneInformation() {
      return listOfIsochroneInformation;
    }

    /**
      * Sets the value of the 'listOfIsochroneInformation' field.
      * Reachability information, containing a list of edges and travel time.
      * @param value The value of 'listOfIsochroneInformation'.
      * @return This builder.
      */
    public KeepOperationalReachabilityResponse.Builder setListOfIsochroneInformation(java.util.List<ReachabilityInformation> value) {
      validate(fields()[1], value);
      this.listOfIsochroneInformation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'listOfIsochroneInformation' field has been set.
      * Reachability information, containing a list of edges and travel time.
      * @return True if the 'listOfIsochroneInformation' field has been set, false otherwise.
      */
    public boolean hasListOfIsochroneInformation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'listOfIsochroneInformation' field.
      * Reachability information, containing a list of edges and travel time.
      * @return This builder.
      */
    public KeepOperationalReachabilityResponse.Builder clearListOfIsochroneInformation() {
      listOfIsochroneInformation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public KeepOperationalReachabilityResponse build() {
      try {
        KeepOperationalReachabilityResponse record = new KeepOperationalReachabilityResponse();
        record.errorMessages = fieldSetFlags()[0] ? this.errorMessages : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.listOfIsochroneInformation = fieldSetFlags()[1] ? this.listOfIsochroneInformation : (java.util.List<ReachabilityInformation>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
