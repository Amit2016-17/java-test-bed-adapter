/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.cap;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Resource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3426430860898034462L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Resource\",\"namespace\":\"eu.driver.model.cap\",\"fields\":[{\"name\":\"resourceDesc\",\"type\":\"string\"},{\"name\":\"size\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"TODO, anyURI\",\"default\":null},{\"name\":\"deferUri\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"digest\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Resource> ENCODER =
      new BinaryMessageEncoder<Resource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Resource> DECODER =
      new BinaryMessageDecoder<Resource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Resource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Resource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Resource>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Resource to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Resource from a ByteBuffer. */
  public static Resource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence resourceDesc;
  @Deprecated public java.lang.Integer size;
  /** TODO, anyURI */
  @Deprecated public java.lang.CharSequence uri;
  @Deprecated public java.lang.CharSequence deferUri;
  @Deprecated public java.lang.CharSequence digest;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Resource() {}

  /**
   * All-args constructor.
   * @param resourceDesc The new value for resourceDesc
   * @param size The new value for size
   * @param uri TODO, anyURI
   * @param deferUri The new value for deferUri
   * @param digest The new value for digest
   */
  public Resource(java.lang.CharSequence resourceDesc, java.lang.Integer size, java.lang.CharSequence uri, java.lang.CharSequence deferUri, java.lang.CharSequence digest) {
    this.resourceDesc = resourceDesc;
    this.size = size;
    this.uri = uri;
    this.deferUri = deferUri;
    this.digest = digest;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resourceDesc;
    case 1: return size;
    case 2: return uri;
    case 3: return deferUri;
    case 4: return digest;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resourceDesc = (java.lang.CharSequence)value$; break;
    case 1: size = (java.lang.Integer)value$; break;
    case 2: uri = (java.lang.CharSequence)value$; break;
    case 3: deferUri = (java.lang.CharSequence)value$; break;
    case 4: digest = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'resourceDesc' field.
   * @return The value of the 'resourceDesc' field.
   */
  public java.lang.CharSequence getResourceDesc() {
    return resourceDesc;
  }

  /**
   * Sets the value of the 'resourceDesc' field.
   * @param value the value to set.
   */
  public void setResourceDesc(java.lang.CharSequence value) {
    this.resourceDesc = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return TODO, anyURI
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * TODO, anyURI
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'deferUri' field.
   * @return The value of the 'deferUri' field.
   */
  public java.lang.CharSequence getDeferUri() {
    return deferUri;
  }

  /**
   * Sets the value of the 'deferUri' field.
   * @param value the value to set.
   */
  public void setDeferUri(java.lang.CharSequence value) {
    this.deferUri = value;
  }

  /**
   * Gets the value of the 'digest' field.
   * @return The value of the 'digest' field.
   */
  public java.lang.CharSequence getDigest() {
    return digest;
  }

  /**
   * Sets the value of the 'digest' field.
   * @param value the value to set.
   */
  public void setDigest(java.lang.CharSequence value) {
    this.digest = value;
  }

  /**
   * Creates a new Resource RecordBuilder.
   * @return A new Resource RecordBuilder
   */
  public static eu.driver.model.cap.Resource.Builder newBuilder() {
    return new eu.driver.model.cap.Resource.Builder();
  }

  /**
   * Creates a new Resource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Resource RecordBuilder
   */
  public static eu.driver.model.cap.Resource.Builder newBuilder(eu.driver.model.cap.Resource.Builder other) {
    return new eu.driver.model.cap.Resource.Builder(other);
  }

  /**
   * Creates a new Resource RecordBuilder by copying an existing Resource instance.
   * @param other The existing instance to copy.
   * @return A new Resource RecordBuilder
   */
  public static eu.driver.model.cap.Resource.Builder newBuilder(eu.driver.model.cap.Resource other) {
    return new eu.driver.model.cap.Resource.Builder(other);
  }

  /**
   * RecordBuilder for Resource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Resource>
    implements org.apache.avro.data.RecordBuilder<Resource> {

    private java.lang.CharSequence resourceDesc;
    private java.lang.Integer size;
    /** TODO, anyURI */
    private java.lang.CharSequence uri;
    private java.lang.CharSequence deferUri;
    private java.lang.CharSequence digest;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.cap.Resource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resourceDesc)) {
        this.resourceDesc = data().deepCopy(fields()[0].schema(), other.resourceDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uri)) {
        this.uri = data().deepCopy(fields()[2].schema(), other.uri);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deferUri)) {
        this.deferUri = data().deepCopy(fields()[3].schema(), other.deferUri);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.digest)) {
        this.digest = data().deepCopy(fields()[4].schema(), other.digest);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Resource instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.cap.Resource other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.resourceDesc)) {
        this.resourceDesc = data().deepCopy(fields()[0].schema(), other.resourceDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uri)) {
        this.uri = data().deepCopy(fields()[2].schema(), other.uri);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deferUri)) {
        this.deferUri = data().deepCopy(fields()[3].schema(), other.deferUri);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.digest)) {
        this.digest = data().deepCopy(fields()[4].schema(), other.digest);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'resourceDesc' field.
      * @return The value.
      */
    public java.lang.CharSequence getResourceDesc() {
      return resourceDesc;
    }

    /**
      * Sets the value of the 'resourceDesc' field.
      * @param value The value of 'resourceDesc'.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder setResourceDesc(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.resourceDesc = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceDesc' field has been set.
      * @return True if the 'resourceDesc' field has been set, false otherwise.
      */
    public boolean hasResourceDesc() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resourceDesc' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder clearResourceDesc() {
      resourceDesc = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public java.lang.Integer getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder setSize(java.lang.Integer value) {
      validate(fields()[1], value);
      this.size = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder clearSize() {
      size = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * TODO, anyURI
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }

    /**
      * Sets the value of the 'uri' field.
      * TODO, anyURI
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.uri = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * TODO, anyURI
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uri' field.
      * TODO, anyURI
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder clearUri() {
      uri = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'deferUri' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeferUri() {
      return deferUri;
    }

    /**
      * Sets the value of the 'deferUri' field.
      * @param value The value of 'deferUri'.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder setDeferUri(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.deferUri = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'deferUri' field has been set.
      * @return True if the 'deferUri' field has been set, false otherwise.
      */
    public boolean hasDeferUri() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'deferUri' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder clearDeferUri() {
      deferUri = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'digest' field.
      * @return The value.
      */
    public java.lang.CharSequence getDigest() {
      return digest;
    }

    /**
      * Sets the value of the 'digest' field.
      * @param value The value of 'digest'.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder setDigest(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.digest = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'digest' field has been set.
      * @return True if the 'digest' field has been set, false otherwise.
      */
    public boolean hasDigest() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'digest' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Resource.Builder clearDigest() {
      digest = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Resource build() {
      try {
        Resource record = new Resource();
        record.resourceDesc = fieldSetFlags()[0] ? this.resourceDesc : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.size = fieldSetFlags()[1] ? this.size : (java.lang.Integer) defaultValue(fields()[1]);
        record.uri = fieldSetFlags()[2] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.deferUri = fieldSetFlags()[3] ? this.deferUri : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.digest = fieldSetFlags()[4] ? this.digest : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Resource>
    WRITER$ = (org.apache.avro.io.DatumWriter<Resource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Resource>
    READER$ = (org.apache.avro.io.DatumReader<Resource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
