/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EXTERNAL_INFOCONTEXT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 384277682907982325L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EXTERNAL_INFOCONTEXT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"URI\",\"type\":\"string\",\"source\":\"element URI\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EXTERNAL_INFOCONTEXT> ENCODER =
      new BinaryMessageEncoder<EXTERNAL_INFOCONTEXT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EXTERNAL_INFOCONTEXT> DECODER =
      new BinaryMessageDecoder<EXTERNAL_INFOCONTEXT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EXTERNAL_INFOCONTEXT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EXTERNAL_INFOCONTEXT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EXTERNAL_INFOCONTEXT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EXTERNAL_INFOCONTEXT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EXTERNAL_INFOCONTEXT from a ByteBuffer. */
  public static EXTERNAL_INFOCONTEXT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence FREETEXT;
  @Deprecated public java.lang.CharSequence URI;
  @Deprecated public java.lang.CharSequence TYPE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EXTERNAL_INFOCONTEXT() {}

  /**
   * All-args constructor.
   * @param FREETEXT The new value for FREETEXT
   * @param URI The new value for URI
   * @param TYPE The new value for TYPE
   */
  public EXTERNAL_INFOCONTEXT(java.lang.CharSequence FREETEXT, java.lang.CharSequence URI, java.lang.CharSequence TYPE) {
    this.FREETEXT = FREETEXT;
    this.URI = URI;
    this.TYPE = TYPE;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return FREETEXT;
    case 1: return URI;
    case 2: return TYPE;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: FREETEXT = (java.lang.CharSequence)value$; break;
    case 1: URI = (java.lang.CharSequence)value$; break;
    case 2: TYPE = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'FREETEXT' field.
   * @return The value of the 'FREETEXT' field.
   */
  public java.lang.CharSequence getFREETEXT() {
    return FREETEXT;
  }

  /**
   * Sets the value of the 'FREETEXT' field.
   * @param value the value to set.
   */
  public void setFREETEXT(java.lang.CharSequence value) {
    this.FREETEXT = value;
  }

  /**
   * Gets the value of the 'URI' field.
   * @return The value of the 'URI' field.
   */
  public java.lang.CharSequence getURI() {
    return URI;
  }

  /**
   * Sets the value of the 'URI' field.
   * @param value the value to set.
   */
  public void setURI(java.lang.CharSequence value) {
    this.URI = value;
  }

  /**
   * Gets the value of the 'TYPE' field.
   * @return The value of the 'TYPE' field.
   */
  public java.lang.CharSequence getTYPE() {
    return TYPE;
  }

  /**
   * Sets the value of the 'TYPE' field.
   * @param value the value to set.
   */
  public void setTYPE(java.lang.CharSequence value) {
    this.TYPE = value;
  }

  /**
   * Creates a new EXTERNAL_INFOCONTEXT RecordBuilder.
   * @return A new EXTERNAL_INFOCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder newBuilder() {
    return new eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder();
  }

  /**
   * Creates a new EXTERNAL_INFOCONTEXT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EXTERNAL_INFOCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder newBuilder(eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder other) {
    return new eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder(other);
  }

  /**
   * Creates a new EXTERNAL_INFOCONTEXT RecordBuilder by copying an existing EXTERNAL_INFOCONTEXT instance.
   * @param other The existing instance to copy.
   * @return A new EXTERNAL_INFOCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder newBuilder(eu.driver.model.emsi.EXTERNAL_INFOCONTEXT other) {
    return new eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder(other);
  }

  /**
   * RecordBuilder for EXTERNAL_INFOCONTEXT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EXTERNAL_INFOCONTEXT>
    implements org.apache.avro.data.RecordBuilder<EXTERNAL_INFOCONTEXT> {

    private java.lang.CharSequence FREETEXT;
    private java.lang.CharSequence URI;
    private java.lang.CharSequence TYPE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[0].schema(), other.FREETEXT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.URI)) {
        this.URI = data().deepCopy(fields()[1].schema(), other.URI);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[2].schema(), other.TYPE);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EXTERNAL_INFOCONTEXT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.EXTERNAL_INFOCONTEXT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[0].schema(), other.FREETEXT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.URI)) {
        this.URI = data().deepCopy(fields()[1].schema(), other.URI);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[2].schema(), other.TYPE);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'FREETEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getFREETEXT() {
      return FREETEXT;
    }

    /**
      * Sets the value of the 'FREETEXT' field.
      * @param value The value of 'FREETEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder setFREETEXT(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.FREETEXT = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'FREETEXT' field has been set.
      * @return True if the 'FREETEXT' field has been set, false otherwise.
      */
    public boolean hasFREETEXT() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'FREETEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder clearFREETEXT() {
      FREETEXT = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'URI' field.
      * @return The value.
      */
    public java.lang.CharSequence getURI() {
      return URI;
    }

    /**
      * Sets the value of the 'URI' field.
      * @param value The value of 'URI'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder setURI(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.URI = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'URI' field has been set.
      * @return True if the 'URI' field has been set, false otherwise.
      */
    public boolean hasURI() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'URI' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder clearURI() {
      URI = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TYPE' field.
      * @return The value.
      */
    public java.lang.CharSequence getTYPE() {
      return TYPE;
    }

    /**
      * Sets the value of the 'TYPE' field.
      * @param value The value of 'TYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder setTYPE(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.TYPE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TYPE' field has been set.
      * @return True if the 'TYPE' field has been set, false otherwise.
      */
    public boolean hasTYPE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EXTERNAL_INFOCONTEXT.Builder clearTYPE() {
      TYPE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EXTERNAL_INFOCONTEXT build() {
      try {
        EXTERNAL_INFOCONTEXT record = new EXTERNAL_INFOCONTEXT();
        record.FREETEXT = fieldSetFlags()[0] ? this.FREETEXT : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.URI = fieldSetFlags()[1] ? this.URI : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.TYPE = fieldSetFlags()[2] ? this.TYPE : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EXTERNAL_INFOCONTEXT>
    WRITER$ = (org.apache.avro.io.DatumWriter<EXTERNAL_INFOCONTEXT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EXTERNAL_INFOCONTEXT>
    READER$ = (org.apache.avro.io.DatumReader<EXTERNAL_INFOCONTEXT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
