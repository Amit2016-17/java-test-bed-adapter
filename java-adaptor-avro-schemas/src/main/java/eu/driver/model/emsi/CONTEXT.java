/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CONTEXT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1834145224391595665L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CONTEXT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\",\"source\":\"element ID\"},{\"name\":\"MODE\",\"type\":\"string\",\"source\":\"element MODE\"},{\"name\":\"MSGTYPE\",\"type\":\"string\",\"source\":\"element MSGTYPE\"},{\"name\":\"CREATION\",\"type\":[\"null\",\"long\"],\"default\":null,\"source\":\"element CREATION\"},{\"name\":\"LINK\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LINKCONTEXT\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\",\"source\":\"element ID\"},{\"name\":\"ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element ROLE\"}]}}],\"default\":null,\"source\":\"element LINK\"},{\"name\":\"LEVEL\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element LEVEL\"},{\"name\":\"SECLASS\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element SECLASS\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element FREETEXT\"},{\"name\":\"URGENCY\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element URGENCY\"},{\"name\":\"ORIGIN\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ORIGINCONTEXT\",\"fields\":[{\"name\":\"ORG_ID\",\"type\":\"string\",\"source\":\"element ORG_ID\"},{\"name\":\"USER_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element USER_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"}]}],\"default\":null,\"source\":\"element ORIGIN\"},{\"name\":\"EXTERNAL_INFO\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EXTERNAL_INFOCONTEXT\",\"fields\":[{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"URI\",\"type\":\"string\",\"source\":\"element URI\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"}]}}],\"default\":null,\"source\":\"element EXTERNAL_INFO\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CONTEXT> ENCODER =
      new BinaryMessageEncoder<CONTEXT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CONTEXT> DECODER =
      new BinaryMessageDecoder<CONTEXT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CONTEXT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CONTEXT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CONTEXT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CONTEXT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CONTEXT from a ByteBuffer. */
  public static CONTEXT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ID;
  @Deprecated public java.lang.CharSequence MODE;
  @Deprecated public java.lang.CharSequence MSGTYPE;
  @Deprecated public java.lang.Long CREATION;
  @Deprecated public java.util.List<eu.driver.model.emsi.LINKCONTEXT> LINK;
  @Deprecated public java.lang.CharSequence LEVEL;
  @Deprecated public java.lang.CharSequence SECLASS;
  @Deprecated public java.lang.CharSequence FREETEXT;
  @Deprecated public java.lang.CharSequence URGENCY;
  @Deprecated public eu.driver.model.emsi.ORIGINCONTEXT ORIGIN;
  @Deprecated public java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> EXTERNAL_INFO;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CONTEXT() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param MODE The new value for MODE
   * @param MSGTYPE The new value for MSGTYPE
   * @param CREATION The new value for CREATION
   * @param LINK The new value for LINK
   * @param LEVEL The new value for LEVEL
   * @param SECLASS The new value for SECLASS
   * @param FREETEXT The new value for FREETEXT
   * @param URGENCY The new value for URGENCY
   * @param ORIGIN The new value for ORIGIN
   * @param EXTERNAL_INFO The new value for EXTERNAL_INFO
   */
  public CONTEXT(java.lang.CharSequence ID, java.lang.CharSequence MODE, java.lang.CharSequence MSGTYPE, java.lang.Long CREATION, java.util.List<eu.driver.model.emsi.LINKCONTEXT> LINK, java.lang.CharSequence LEVEL, java.lang.CharSequence SECLASS, java.lang.CharSequence FREETEXT, java.lang.CharSequence URGENCY, eu.driver.model.emsi.ORIGINCONTEXT ORIGIN, java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> EXTERNAL_INFO) {
    this.ID = ID;
    this.MODE = MODE;
    this.MSGTYPE = MSGTYPE;
    this.CREATION = CREATION;
    this.LINK = LINK;
    this.LEVEL = LEVEL;
    this.SECLASS = SECLASS;
    this.FREETEXT = FREETEXT;
    this.URGENCY = URGENCY;
    this.ORIGIN = ORIGIN;
    this.EXTERNAL_INFO = EXTERNAL_INFO;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return MODE;
    case 2: return MSGTYPE;
    case 3: return CREATION;
    case 4: return LINK;
    case 5: return LEVEL;
    case 6: return SECLASS;
    case 7: return FREETEXT;
    case 8: return URGENCY;
    case 9: return ORIGIN;
    case 10: return EXTERNAL_INFO;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.CharSequence)value$; break;
    case 1: MODE = (java.lang.CharSequence)value$; break;
    case 2: MSGTYPE = (java.lang.CharSequence)value$; break;
    case 3: CREATION = (java.lang.Long)value$; break;
    case 4: LINK = (java.util.List<eu.driver.model.emsi.LINKCONTEXT>)value$; break;
    case 5: LEVEL = (java.lang.CharSequence)value$; break;
    case 6: SECLASS = (java.lang.CharSequence)value$; break;
    case 7: FREETEXT = (java.lang.CharSequence)value$; break;
    case 8: URGENCY = (java.lang.CharSequence)value$; break;
    case 9: ORIGIN = (eu.driver.model.emsi.ORIGINCONTEXT)value$; break;
    case 10: EXTERNAL_INFO = (java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'MODE' field.
   * @return The value of the 'MODE' field.
   */
  public java.lang.CharSequence getMODE() {
    return MODE;
  }

  /**
   * Sets the value of the 'MODE' field.
   * @param value the value to set.
   */
  public void setMODE(java.lang.CharSequence value) {
    this.MODE = value;
  }

  /**
   * Gets the value of the 'MSGTYPE' field.
   * @return The value of the 'MSGTYPE' field.
   */
  public java.lang.CharSequence getMSGTYPE() {
    return MSGTYPE;
  }

  /**
   * Sets the value of the 'MSGTYPE' field.
   * @param value the value to set.
   */
  public void setMSGTYPE(java.lang.CharSequence value) {
    this.MSGTYPE = value;
  }

  /**
   * Gets the value of the 'CREATION' field.
   * @return The value of the 'CREATION' field.
   */
  public java.lang.Long getCREATION() {
    return CREATION;
  }

  /**
   * Sets the value of the 'CREATION' field.
   * @param value the value to set.
   */
  public void setCREATION(java.lang.Long value) {
    this.CREATION = value;
  }

  /**
   * Gets the value of the 'LINK' field.
   * @return The value of the 'LINK' field.
   */
  public java.util.List<eu.driver.model.emsi.LINKCONTEXT> getLINK() {
    return LINK;
  }

  /**
   * Sets the value of the 'LINK' field.
   * @param value the value to set.
   */
  public void setLINK(java.util.List<eu.driver.model.emsi.LINKCONTEXT> value) {
    this.LINK = value;
  }

  /**
   * Gets the value of the 'LEVEL' field.
   * @return The value of the 'LEVEL' field.
   */
  public java.lang.CharSequence getLEVEL() {
    return LEVEL;
  }

  /**
   * Sets the value of the 'LEVEL' field.
   * @param value the value to set.
   */
  public void setLEVEL(java.lang.CharSequence value) {
    this.LEVEL = value;
  }

  /**
   * Gets the value of the 'SECLASS' field.
   * @return The value of the 'SECLASS' field.
   */
  public java.lang.CharSequence getSECLASS() {
    return SECLASS;
  }

  /**
   * Sets the value of the 'SECLASS' field.
   * @param value the value to set.
   */
  public void setSECLASS(java.lang.CharSequence value) {
    this.SECLASS = value;
  }

  /**
   * Gets the value of the 'FREETEXT' field.
   * @return The value of the 'FREETEXT' field.
   */
  public java.lang.CharSequence getFREETEXT() {
    return FREETEXT;
  }

  /**
   * Sets the value of the 'FREETEXT' field.
   * @param value the value to set.
   */
  public void setFREETEXT(java.lang.CharSequence value) {
    this.FREETEXT = value;
  }

  /**
   * Gets the value of the 'URGENCY' field.
   * @return The value of the 'URGENCY' field.
   */
  public java.lang.CharSequence getURGENCY() {
    return URGENCY;
  }

  /**
   * Sets the value of the 'URGENCY' field.
   * @param value the value to set.
   */
  public void setURGENCY(java.lang.CharSequence value) {
    this.URGENCY = value;
  }

  /**
   * Gets the value of the 'ORIGIN' field.
   * @return The value of the 'ORIGIN' field.
   */
  public eu.driver.model.emsi.ORIGINCONTEXT getORIGIN() {
    return ORIGIN;
  }

  /**
   * Sets the value of the 'ORIGIN' field.
   * @param value the value to set.
   */
  public void setORIGIN(eu.driver.model.emsi.ORIGINCONTEXT value) {
    this.ORIGIN = value;
  }

  /**
   * Gets the value of the 'EXTERNAL_INFO' field.
   * @return The value of the 'EXTERNAL_INFO' field.
   */
  public java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> getEXTERNALINFO() {
    return EXTERNAL_INFO;
  }

  /**
   * Sets the value of the 'EXTERNAL_INFO' field.
   * @param value the value to set.
   */
  public void setEXTERNALINFO(java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> value) {
    this.EXTERNAL_INFO = value;
  }

  /**
   * Creates a new CONTEXT RecordBuilder.
   * @return A new CONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.CONTEXT.Builder newBuilder() {
    return new eu.driver.model.emsi.CONTEXT.Builder();
  }

  /**
   * Creates a new CONTEXT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.CONTEXT.Builder newBuilder(eu.driver.model.emsi.CONTEXT.Builder other) {
    return new eu.driver.model.emsi.CONTEXT.Builder(other);
  }

  /**
   * Creates a new CONTEXT RecordBuilder by copying an existing CONTEXT instance.
   * @param other The existing instance to copy.
   * @return A new CONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.CONTEXT.Builder newBuilder(eu.driver.model.emsi.CONTEXT other) {
    return new eu.driver.model.emsi.CONTEXT.Builder(other);
  }

  /**
   * RecordBuilder for CONTEXT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CONTEXT>
    implements org.apache.avro.data.RecordBuilder<CONTEXT> {

    private java.lang.CharSequence ID;
    private java.lang.CharSequence MODE;
    private java.lang.CharSequence MSGTYPE;
    private java.lang.Long CREATION;
    private java.util.List<eu.driver.model.emsi.LINKCONTEXT> LINK;
    private java.lang.CharSequence LEVEL;
    private java.lang.CharSequence SECLASS;
    private java.lang.CharSequence FREETEXT;
    private java.lang.CharSequence URGENCY;
    private eu.driver.model.emsi.ORIGINCONTEXT ORIGIN;
    private eu.driver.model.emsi.ORIGINCONTEXT.Builder ORIGINBuilder;
    private java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> EXTERNAL_INFO;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.CONTEXT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MODE)) {
        this.MODE = data().deepCopy(fields()[1].schema(), other.MODE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MSGTYPE)) {
        this.MSGTYPE = data().deepCopy(fields()[2].schema(), other.MSGTYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CREATION)) {
        this.CREATION = data().deepCopy(fields()[3].schema(), other.CREATION);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LINK)) {
        this.LINK = data().deepCopy(fields()[4].schema(), other.LINK);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.LEVEL)) {
        this.LEVEL = data().deepCopy(fields()[5].schema(), other.LEVEL);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.SECLASS)) {
        this.SECLASS = data().deepCopy(fields()[6].schema(), other.SECLASS);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[7].schema(), other.FREETEXT);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.URGENCY)) {
        this.URGENCY = data().deepCopy(fields()[8].schema(), other.URGENCY);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ORIGIN)) {
        this.ORIGIN = data().deepCopy(fields()[9].schema(), other.ORIGIN);
        fieldSetFlags()[9] = true;
      }
      if (other.hasORIGINBuilder()) {
        this.ORIGINBuilder = eu.driver.model.emsi.ORIGINCONTEXT.newBuilder(other.getORIGINBuilder());
      }
      if (isValidValue(fields()[10], other.EXTERNAL_INFO)) {
        this.EXTERNAL_INFO = data().deepCopy(fields()[10].schema(), other.EXTERNAL_INFO);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CONTEXT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.CONTEXT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MODE)) {
        this.MODE = data().deepCopy(fields()[1].schema(), other.MODE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MSGTYPE)) {
        this.MSGTYPE = data().deepCopy(fields()[2].schema(), other.MSGTYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CREATION)) {
        this.CREATION = data().deepCopy(fields()[3].schema(), other.CREATION);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LINK)) {
        this.LINK = data().deepCopy(fields()[4].schema(), other.LINK);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.LEVEL)) {
        this.LEVEL = data().deepCopy(fields()[5].schema(), other.LEVEL);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.SECLASS)) {
        this.SECLASS = data().deepCopy(fields()[6].schema(), other.SECLASS);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[7].schema(), other.FREETEXT);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.URGENCY)) {
        this.URGENCY = data().deepCopy(fields()[8].schema(), other.URGENCY);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ORIGIN)) {
        this.ORIGIN = data().deepCopy(fields()[9].schema(), other.ORIGIN);
        fieldSetFlags()[9] = true;
      }
      this.ORIGINBuilder = null;
      if (isValidValue(fields()[10], other.EXTERNAL_INFO)) {
        this.EXTERNAL_INFO = data().deepCopy(fields()[10].schema(), other.EXTERNAL_INFO);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearID() {
      ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'MODE' field.
      * @return The value.
      */
    public java.lang.CharSequence getMODE() {
      return MODE;
    }

    /**
      * Sets the value of the 'MODE' field.
      * @param value The value of 'MODE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setMODE(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.MODE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'MODE' field has been set.
      * @return True if the 'MODE' field has been set, false otherwise.
      */
    public boolean hasMODE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'MODE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearMODE() {
      MODE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MSGTYPE' field.
      * @return The value.
      */
    public java.lang.CharSequence getMSGTYPE() {
      return MSGTYPE;
    }

    /**
      * Sets the value of the 'MSGTYPE' field.
      * @param value The value of 'MSGTYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setMSGTYPE(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.MSGTYPE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MSGTYPE' field has been set.
      * @return True if the 'MSGTYPE' field has been set, false otherwise.
      */
    public boolean hasMSGTYPE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MSGTYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearMSGTYPE() {
      MSGTYPE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CREATION' field.
      * @return The value.
      */
    public java.lang.Long getCREATION() {
      return CREATION;
    }

    /**
      * Sets the value of the 'CREATION' field.
      * @param value The value of 'CREATION'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setCREATION(java.lang.Long value) {
      validate(fields()[3], value);
      this.CREATION = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CREATION' field has been set.
      * @return True if the 'CREATION' field has been set, false otherwise.
      */
    public boolean hasCREATION() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'CREATION' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearCREATION() {
      CREATION = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'LINK' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.LINKCONTEXT> getLINK() {
      return LINK;
    }

    /**
      * Sets the value of the 'LINK' field.
      * @param value The value of 'LINK'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setLINK(java.util.List<eu.driver.model.emsi.LINKCONTEXT> value) {
      validate(fields()[4], value);
      this.LINK = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'LINK' field has been set.
      * @return True if the 'LINK' field has been set, false otherwise.
      */
    public boolean hasLINK() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'LINK' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearLINK() {
      LINK = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'LEVEL' field.
      * @return The value.
      */
    public java.lang.CharSequence getLEVEL() {
      return LEVEL;
    }

    /**
      * Sets the value of the 'LEVEL' field.
      * @param value The value of 'LEVEL'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setLEVEL(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.LEVEL = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'LEVEL' field has been set.
      * @return True if the 'LEVEL' field has been set, false otherwise.
      */
    public boolean hasLEVEL() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'LEVEL' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearLEVEL() {
      LEVEL = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'SECLASS' field.
      * @return The value.
      */
    public java.lang.CharSequence getSECLASS() {
      return SECLASS;
    }

    /**
      * Sets the value of the 'SECLASS' field.
      * @param value The value of 'SECLASS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setSECLASS(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.SECLASS = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'SECLASS' field has been set.
      * @return True if the 'SECLASS' field has been set, false otherwise.
      */
    public boolean hasSECLASS() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'SECLASS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearSECLASS() {
      SECLASS = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'FREETEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getFREETEXT() {
      return FREETEXT;
    }

    /**
      * Sets the value of the 'FREETEXT' field.
      * @param value The value of 'FREETEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setFREETEXT(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.FREETEXT = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'FREETEXT' field has been set.
      * @return True if the 'FREETEXT' field has been set, false otherwise.
      */
    public boolean hasFREETEXT() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'FREETEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearFREETEXT() {
      FREETEXT = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'URGENCY' field.
      * @return The value.
      */
    public java.lang.CharSequence getURGENCY() {
      return URGENCY;
    }

    /**
      * Sets the value of the 'URGENCY' field.
      * @param value The value of 'URGENCY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setURGENCY(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.URGENCY = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'URGENCY' field has been set.
      * @return True if the 'URGENCY' field has been set, false otherwise.
      */
    public boolean hasURGENCY() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'URGENCY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearURGENCY() {
      URGENCY = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ORIGIN' field.
      * @return The value.
      */
    public eu.driver.model.emsi.ORIGINCONTEXT getORIGIN() {
      return ORIGIN;
    }

    /**
      * Sets the value of the 'ORIGIN' field.
      * @param value The value of 'ORIGIN'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setORIGIN(eu.driver.model.emsi.ORIGINCONTEXT value) {
      validate(fields()[9], value);
      this.ORIGINBuilder = null;
      this.ORIGIN = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ORIGIN' field has been set.
      * @return True if the 'ORIGIN' field has been set, false otherwise.
      */
    public boolean hasORIGIN() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'ORIGIN' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.emsi.ORIGINCONTEXT.Builder getORIGINBuilder() {
      if (ORIGINBuilder == null) {
        if (hasORIGIN()) {
          setORIGINBuilder(eu.driver.model.emsi.ORIGINCONTEXT.newBuilder(ORIGIN));
        } else {
          setORIGINBuilder(eu.driver.model.emsi.ORIGINCONTEXT.newBuilder());
        }
      }
      return ORIGINBuilder;
    }

    /**
     * Sets the Builder instance for the 'ORIGIN' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.emsi.CONTEXT.Builder setORIGINBuilder(eu.driver.model.emsi.ORIGINCONTEXT.Builder value) {
      clearORIGIN();
      ORIGINBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ORIGIN' field has an active Builder instance
     * @return True if the 'ORIGIN' field has an active Builder instance
     */
    public boolean hasORIGINBuilder() {
      return ORIGINBuilder != null;
    }

    /**
      * Clears the value of the 'ORIGIN' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearORIGIN() {
      ORIGIN = null;
      ORIGINBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'EXTERNAL_INFO' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> getEXTERNALINFO() {
      return EXTERNAL_INFO;
    }

    /**
      * Sets the value of the 'EXTERNAL_INFO' field.
      * @param value The value of 'EXTERNAL_INFO'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder setEXTERNALINFO(java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT> value) {
      validate(fields()[10], value);
      this.EXTERNAL_INFO = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'EXTERNAL_INFO' field has been set.
      * @return True if the 'EXTERNAL_INFO' field has been set, false otherwise.
      */
    public boolean hasEXTERNALINFO() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'EXTERNAL_INFO' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CONTEXT.Builder clearEXTERNALINFO() {
      EXTERNAL_INFO = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CONTEXT build() {
      try {
        CONTEXT record = new CONTEXT();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.MODE = fieldSetFlags()[1] ? this.MODE : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.MSGTYPE = fieldSetFlags()[2] ? this.MSGTYPE : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.CREATION = fieldSetFlags()[3] ? this.CREATION : (java.lang.Long) defaultValue(fields()[3]);
        record.LINK = fieldSetFlags()[4] ? this.LINK : (java.util.List<eu.driver.model.emsi.LINKCONTEXT>) defaultValue(fields()[4]);
        record.LEVEL = fieldSetFlags()[5] ? this.LEVEL : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.SECLASS = fieldSetFlags()[6] ? this.SECLASS : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.FREETEXT = fieldSetFlags()[7] ? this.FREETEXT : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.URGENCY = fieldSetFlags()[8] ? this.URGENCY : (java.lang.CharSequence) defaultValue(fields()[8]);
        if (ORIGINBuilder != null) {
          record.ORIGIN = this.ORIGINBuilder.build();
        } else {
          record.ORIGIN = fieldSetFlags()[9] ? this.ORIGIN : (eu.driver.model.emsi.ORIGINCONTEXT) defaultValue(fields()[9]);
        }
        record.EXTERNAL_INFO = fieldSetFlags()[10] ? this.EXTERNAL_INFO : (java.util.List<eu.driver.model.emsi.EXTERNAL_INFOCONTEXT>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CONTEXT>
    WRITER$ = (org.apache.avro.io.DatumWriter<CONTEXT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CONTEXT>
    READER$ = (org.apache.avro.io.DatumReader<CONTEXT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
