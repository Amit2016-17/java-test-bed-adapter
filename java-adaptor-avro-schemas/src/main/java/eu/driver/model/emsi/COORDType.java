/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class COORDType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7695334426990917982L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"COORDType\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"LAT\",\"type\":\"double\",\"source\":\"element LAT\"},{\"name\":\"LON\",\"type\":\"double\",\"source\":\"element LON\"},{\"name\":\"HEIGHT\",\"type\":[\"null\",\"double\"],\"source\":\"element HEIGHT\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<COORDType> ENCODER =
      new BinaryMessageEncoder<COORDType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<COORDType> DECODER =
      new BinaryMessageDecoder<COORDType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<COORDType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<COORDType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<COORDType>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this COORDType to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a COORDType from a ByteBuffer. */
  public static COORDType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double LAT;
  @Deprecated public double LON;
  @Deprecated public java.lang.Double HEIGHT;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public COORDType() {}

  /**
   * All-args constructor.
   * @param LAT The new value for LAT
   * @param LON The new value for LON
   * @param HEIGHT The new value for HEIGHT
   */
  public COORDType(java.lang.Double LAT, java.lang.Double LON, java.lang.Double HEIGHT) {
    this.LAT = LAT;
    this.LON = LON;
    this.HEIGHT = HEIGHT;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return LAT;
    case 1: return LON;
    case 2: return HEIGHT;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: LAT = (java.lang.Double)value$; break;
    case 1: LON = (java.lang.Double)value$; break;
    case 2: HEIGHT = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'LAT' field.
   * @return The value of the 'LAT' field.
   */
  public java.lang.Double getLAT() {
    return LAT;
  }

  /**
   * Sets the value of the 'LAT' field.
   * @param value the value to set.
   */
  public void setLAT(java.lang.Double value) {
    this.LAT = value;
  }

  /**
   * Gets the value of the 'LON' field.
   * @return The value of the 'LON' field.
   */
  public java.lang.Double getLON() {
    return LON;
  }

  /**
   * Sets the value of the 'LON' field.
   * @param value the value to set.
   */
  public void setLON(java.lang.Double value) {
    this.LON = value;
  }

  /**
   * Gets the value of the 'HEIGHT' field.
   * @return The value of the 'HEIGHT' field.
   */
  public java.lang.Double getHEIGHT() {
    return HEIGHT;
  }

  /**
   * Sets the value of the 'HEIGHT' field.
   * @param value the value to set.
   */
  public void setHEIGHT(java.lang.Double value) {
    this.HEIGHT = value;
  }

  /**
   * Creates a new COORDType RecordBuilder.
   * @return A new COORDType RecordBuilder
   */
  public static eu.driver.model.emsi.COORDType.Builder newBuilder() {
    return new eu.driver.model.emsi.COORDType.Builder();
  }

  /**
   * Creates a new COORDType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new COORDType RecordBuilder
   */
  public static eu.driver.model.emsi.COORDType.Builder newBuilder(eu.driver.model.emsi.COORDType.Builder other) {
    return new eu.driver.model.emsi.COORDType.Builder(other);
  }

  /**
   * Creates a new COORDType RecordBuilder by copying an existing COORDType instance.
   * @param other The existing instance to copy.
   * @return A new COORDType RecordBuilder
   */
  public static eu.driver.model.emsi.COORDType.Builder newBuilder(eu.driver.model.emsi.COORDType other) {
    return new eu.driver.model.emsi.COORDType.Builder(other);
  }

  /**
   * RecordBuilder for COORDType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<COORDType>
    implements org.apache.avro.data.RecordBuilder<COORDType> {

    private double LAT;
    private double LON;
    private java.lang.Double HEIGHT;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.COORDType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.LAT)) {
        this.LAT = data().deepCopy(fields()[0].schema(), other.LAT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LON)) {
        this.LON = data().deepCopy(fields()[1].schema(), other.LON);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.HEIGHT)) {
        this.HEIGHT = data().deepCopy(fields()[2].schema(), other.HEIGHT);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing COORDType instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.COORDType other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.LAT)) {
        this.LAT = data().deepCopy(fields()[0].schema(), other.LAT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LON)) {
        this.LON = data().deepCopy(fields()[1].schema(), other.LON);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.HEIGHT)) {
        this.HEIGHT = data().deepCopy(fields()[2].schema(), other.HEIGHT);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'LAT' field.
      * @return The value.
      */
    public java.lang.Double getLAT() {
      return LAT;
    }

    /**
      * Sets the value of the 'LAT' field.
      * @param value The value of 'LAT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder setLAT(double value) {
      validate(fields()[0], value);
      this.LAT = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'LAT' field has been set.
      * @return True if the 'LAT' field has been set, false otherwise.
      */
    public boolean hasLAT() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'LAT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder clearLAT() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'LON' field.
      * @return The value.
      */
    public java.lang.Double getLON() {
      return LON;
    }

    /**
      * Sets the value of the 'LON' field.
      * @param value The value of 'LON'.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder setLON(double value) {
      validate(fields()[1], value);
      this.LON = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'LON' field has been set.
      * @return True if the 'LON' field has been set, false otherwise.
      */
    public boolean hasLON() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'LON' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder clearLON() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'HEIGHT' field.
      * @return The value.
      */
    public java.lang.Double getHEIGHT() {
      return HEIGHT;
    }

    /**
      * Sets the value of the 'HEIGHT' field.
      * @param value The value of 'HEIGHT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder setHEIGHT(java.lang.Double value) {
      validate(fields()[2], value);
      this.HEIGHT = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'HEIGHT' field has been set.
      * @return True if the 'HEIGHT' field has been set, false otherwise.
      */
    public boolean hasHEIGHT() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'HEIGHT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.COORDType.Builder clearHEIGHT() {
      HEIGHT = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public COORDType build() {
      try {
        COORDType record = new COORDType();
        record.LAT = fieldSetFlags()[0] ? this.LAT : (java.lang.Double) defaultValue(fields()[0]);
        record.LON = fieldSetFlags()[1] ? this.LON : (java.lang.Double) defaultValue(fields()[1]);
        record.HEIGHT = fieldSetFlags()[2] ? this.HEIGHT : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<COORDType>
    WRITER$ = (org.apache.avro.io.DatumWriter<COORDType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<COORDType>
    READER$ = (org.apache.avro.io.DatumReader<COORDType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
