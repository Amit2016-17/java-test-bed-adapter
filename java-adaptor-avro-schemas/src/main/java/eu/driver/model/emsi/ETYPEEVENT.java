/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ETYPEEVENT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9046562664457040320L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ETYPEEVENT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"CATEGORY\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CATEGORY\"},{\"name\":\"ACTOR\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ACTOR\"},{\"name\":\"LOCTYPE\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element LOCTYPE\"},{\"name\":\"ENV\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ENV\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ETYPEEVENT> ENCODER =
      new BinaryMessageEncoder<ETYPEEVENT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ETYPEEVENT> DECODER =
      new BinaryMessageDecoder<ETYPEEVENT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ETYPEEVENT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ETYPEEVENT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ETYPEEVENT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ETYPEEVENT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ETYPEEVENT from a ByteBuffer. */
  public static ETYPEEVENT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.CharSequence> CATEGORY;
  @Deprecated public java.util.List<java.lang.CharSequence> ACTOR;
  @Deprecated public java.util.List<java.lang.CharSequence> LOCTYPE;
  @Deprecated public java.util.List<java.lang.CharSequence> ENV;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ETYPEEVENT() {}

  /**
   * All-args constructor.
   * @param CATEGORY The new value for CATEGORY
   * @param ACTOR The new value for ACTOR
   * @param LOCTYPE The new value for LOCTYPE
   * @param ENV The new value for ENV
   */
  public ETYPEEVENT(java.util.List<java.lang.CharSequence> CATEGORY, java.util.List<java.lang.CharSequence> ACTOR, java.util.List<java.lang.CharSequence> LOCTYPE, java.util.List<java.lang.CharSequence> ENV) {
    this.CATEGORY = CATEGORY;
    this.ACTOR = ACTOR;
    this.LOCTYPE = LOCTYPE;
    this.ENV = ENV;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CATEGORY;
    case 1: return ACTOR;
    case 2: return LOCTYPE;
    case 3: return ENV;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CATEGORY = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: ACTOR = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: LOCTYPE = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: ENV = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CATEGORY' field.
   * @return The value of the 'CATEGORY' field.
   */
  public java.util.List<java.lang.CharSequence> getCATEGORY() {
    return CATEGORY;
  }

  /**
   * Sets the value of the 'CATEGORY' field.
   * @param value the value to set.
   */
  public void setCATEGORY(java.util.List<java.lang.CharSequence> value) {
    this.CATEGORY = value;
  }

  /**
   * Gets the value of the 'ACTOR' field.
   * @return The value of the 'ACTOR' field.
   */
  public java.util.List<java.lang.CharSequence> getACTOR() {
    return ACTOR;
  }

  /**
   * Sets the value of the 'ACTOR' field.
   * @param value the value to set.
   */
  public void setACTOR(java.util.List<java.lang.CharSequence> value) {
    this.ACTOR = value;
  }

  /**
   * Gets the value of the 'LOCTYPE' field.
   * @return The value of the 'LOCTYPE' field.
   */
  public java.util.List<java.lang.CharSequence> getLOCTYPE() {
    return LOCTYPE;
  }

  /**
   * Sets the value of the 'LOCTYPE' field.
   * @param value the value to set.
   */
  public void setLOCTYPE(java.util.List<java.lang.CharSequence> value) {
    this.LOCTYPE = value;
  }

  /**
   * Gets the value of the 'ENV' field.
   * @return The value of the 'ENV' field.
   */
  public java.util.List<java.lang.CharSequence> getENV() {
    return ENV;
  }

  /**
   * Sets the value of the 'ENV' field.
   * @param value the value to set.
   */
  public void setENV(java.util.List<java.lang.CharSequence> value) {
    this.ENV = value;
  }

  /**
   * Creates a new ETYPEEVENT RecordBuilder.
   * @return A new ETYPEEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.ETYPEEVENT.Builder newBuilder() {
    return new eu.driver.model.emsi.ETYPEEVENT.Builder();
  }

  /**
   * Creates a new ETYPEEVENT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ETYPEEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.ETYPEEVENT.Builder newBuilder(eu.driver.model.emsi.ETYPEEVENT.Builder other) {
    return new eu.driver.model.emsi.ETYPEEVENT.Builder(other);
  }

  /**
   * Creates a new ETYPEEVENT RecordBuilder by copying an existing ETYPEEVENT instance.
   * @param other The existing instance to copy.
   * @return A new ETYPEEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.ETYPEEVENT.Builder newBuilder(eu.driver.model.emsi.ETYPEEVENT other) {
    return new eu.driver.model.emsi.ETYPEEVENT.Builder(other);
  }

  /**
   * RecordBuilder for ETYPEEVENT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ETYPEEVENT>
    implements org.apache.avro.data.RecordBuilder<ETYPEEVENT> {

    private java.util.List<java.lang.CharSequence> CATEGORY;
    private java.util.List<java.lang.CharSequence> ACTOR;
    private java.util.List<java.lang.CharSequence> LOCTYPE;
    private java.util.List<java.lang.CharSequence> ENV;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.ETYPEEVENT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CATEGORY)) {
        this.CATEGORY = data().deepCopy(fields()[0].schema(), other.CATEGORY);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ACTOR)) {
        this.ACTOR = data().deepCopy(fields()[1].schema(), other.ACTOR);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LOCTYPE)) {
        this.LOCTYPE = data().deepCopy(fields()[2].schema(), other.LOCTYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ENV)) {
        this.ENV = data().deepCopy(fields()[3].schema(), other.ENV);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ETYPEEVENT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.ETYPEEVENT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CATEGORY)) {
        this.CATEGORY = data().deepCopy(fields()[0].schema(), other.CATEGORY);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ACTOR)) {
        this.ACTOR = data().deepCopy(fields()[1].schema(), other.ACTOR);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LOCTYPE)) {
        this.LOCTYPE = data().deepCopy(fields()[2].schema(), other.LOCTYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ENV)) {
        this.ENV = data().deepCopy(fields()[3].schema(), other.ENV);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'CATEGORY' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCATEGORY() {
      return CATEGORY;
    }

    /**
      * Sets the value of the 'CATEGORY' field.
      * @param value The value of 'CATEGORY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder setCATEGORY(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.CATEGORY = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CATEGORY' field has been set.
      * @return True if the 'CATEGORY' field has been set, false otherwise.
      */
    public boolean hasCATEGORY() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CATEGORY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder clearCATEGORY() {
      CATEGORY = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ACTOR' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getACTOR() {
      return ACTOR;
    }

    /**
      * Sets the value of the 'ACTOR' field.
      * @param value The value of 'ACTOR'.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder setACTOR(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.ACTOR = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ACTOR' field has been set.
      * @return True if the 'ACTOR' field has been set, false otherwise.
      */
    public boolean hasACTOR() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ACTOR' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder clearACTOR() {
      ACTOR = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'LOCTYPE' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLOCTYPE() {
      return LOCTYPE;
    }

    /**
      * Sets the value of the 'LOCTYPE' field.
      * @param value The value of 'LOCTYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder setLOCTYPE(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.LOCTYPE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'LOCTYPE' field has been set.
      * @return True if the 'LOCTYPE' field has been set, false otherwise.
      */
    public boolean hasLOCTYPE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'LOCTYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder clearLOCTYPE() {
      LOCTYPE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ENV' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getENV() {
      return ENV;
    }

    /**
      * Sets the value of the 'ENV' field.
      * @param value The value of 'ENV'.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder setENV(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.ENV = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ENV' field has been set.
      * @return True if the 'ENV' field has been set, false otherwise.
      */
    public boolean hasENV() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ENV' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.ETYPEEVENT.Builder clearENV() {
      ENV = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ETYPEEVENT build() {
      try {
        ETYPEEVENT record = new ETYPEEVENT();
        record.CATEGORY = fieldSetFlags()[0] ? this.CATEGORY : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.ACTOR = fieldSetFlags()[1] ? this.ACTOR : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.LOCTYPE = fieldSetFlags()[2] ? this.LOCTYPE : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.ENV = fieldSetFlags()[3] ? this.ENV : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ETYPEEVENT>
    WRITER$ = (org.apache.avro.io.DatumWriter<ETYPEEVENT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ETYPEEVENT>
    READER$ = (org.apache.avro.io.DatumReader<ETYPEEVENT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
