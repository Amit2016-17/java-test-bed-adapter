/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RTYPERESOURCE extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -78820199733809109L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RTYPERESOURCE\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"CLASS\",\"type\":\"string\",\"source\":\"element CLASS\"},{\"name\":\"CAPABILITY\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CAPABILITY\"},{\"name\":\"CHARACTERISTICS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CHARACTERISTICS\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RTYPERESOURCE> ENCODER =
      new BinaryMessageEncoder<RTYPERESOURCE>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RTYPERESOURCE> DECODER =
      new BinaryMessageDecoder<RTYPERESOURCE>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RTYPERESOURCE> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RTYPERESOURCE> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RTYPERESOURCE>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RTYPERESOURCE to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RTYPERESOURCE from a ByteBuffer. */
  public static RTYPERESOURCE fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence CLASS;
  @Deprecated public java.util.List<java.lang.CharSequence> CAPABILITY;
  @Deprecated public java.util.List<java.lang.CharSequence> CHARACTERISTICS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RTYPERESOURCE() {}

  /**
   * All-args constructor.
   * @param CLASS The new value for CLASS
   * @param CAPABILITY The new value for CAPABILITY
   * @param CHARACTERISTICS The new value for CHARACTERISTICS
   */
  public RTYPERESOURCE(java.lang.CharSequence CLASS, java.util.List<java.lang.CharSequence> CAPABILITY, java.util.List<java.lang.CharSequence> CHARACTERISTICS) {
    this.CLASS = CLASS;
    this.CAPABILITY = CAPABILITY;
    this.CHARACTERISTICS = CHARACTERISTICS;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CLASS;
    case 1: return CAPABILITY;
    case 2: return CHARACTERISTICS;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CLASS = (java.lang.CharSequence)value$; break;
    case 1: CAPABILITY = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: CHARACTERISTICS = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CLASS' field.
   * @return The value of the 'CLASS' field.
   */
  public java.lang.CharSequence getCLASS() {
    return CLASS;
  }

  /**
   * Sets the value of the 'CLASS' field.
   * @param value the value to set.
   */
  public void setCLASS(java.lang.CharSequence value) {
    this.CLASS = value;
  }

  /**
   * Gets the value of the 'CAPABILITY' field.
   * @return The value of the 'CAPABILITY' field.
   */
  public java.util.List<java.lang.CharSequence> getCAPABILITY() {
    return CAPABILITY;
  }

  /**
   * Sets the value of the 'CAPABILITY' field.
   * @param value the value to set.
   */
  public void setCAPABILITY(java.util.List<java.lang.CharSequence> value) {
    this.CAPABILITY = value;
  }

  /**
   * Gets the value of the 'CHARACTERISTICS' field.
   * @return The value of the 'CHARACTERISTICS' field.
   */
  public java.util.List<java.lang.CharSequence> getCHARACTERISTICS() {
    return CHARACTERISTICS;
  }

  /**
   * Sets the value of the 'CHARACTERISTICS' field.
   * @param value the value to set.
   */
  public void setCHARACTERISTICS(java.util.List<java.lang.CharSequence> value) {
    this.CHARACTERISTICS = value;
  }

  /**
   * Creates a new RTYPERESOURCE RecordBuilder.
   * @return A new RTYPERESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RTYPERESOURCE.Builder newBuilder() {
    return new eu.driver.model.emsi.RTYPERESOURCE.Builder();
  }

  /**
   * Creates a new RTYPERESOURCE RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RTYPERESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RTYPERESOURCE.Builder newBuilder(eu.driver.model.emsi.RTYPERESOURCE.Builder other) {
    return new eu.driver.model.emsi.RTYPERESOURCE.Builder(other);
  }

  /**
   * Creates a new RTYPERESOURCE RecordBuilder by copying an existing RTYPERESOURCE instance.
   * @param other The existing instance to copy.
   * @return A new RTYPERESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RTYPERESOURCE.Builder newBuilder(eu.driver.model.emsi.RTYPERESOURCE other) {
    return new eu.driver.model.emsi.RTYPERESOURCE.Builder(other);
  }

  /**
   * RecordBuilder for RTYPERESOURCE instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RTYPERESOURCE>
    implements org.apache.avro.data.RecordBuilder<RTYPERESOURCE> {

    private java.lang.CharSequence CLASS;
    private java.util.List<java.lang.CharSequence> CAPABILITY;
    private java.util.List<java.lang.CharSequence> CHARACTERISTICS;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.RTYPERESOURCE.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CLASS)) {
        this.CLASS = data().deepCopy(fields()[0].schema(), other.CLASS);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CAPABILITY)) {
        this.CAPABILITY = data().deepCopy(fields()[1].schema(), other.CAPABILITY);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CHARACTERISTICS)) {
        this.CHARACTERISTICS = data().deepCopy(fields()[2].schema(), other.CHARACTERISTICS);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RTYPERESOURCE instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.RTYPERESOURCE other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CLASS)) {
        this.CLASS = data().deepCopy(fields()[0].schema(), other.CLASS);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CAPABILITY)) {
        this.CAPABILITY = data().deepCopy(fields()[1].schema(), other.CAPABILITY);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CHARACTERISTICS)) {
        this.CHARACTERISTICS = data().deepCopy(fields()[2].schema(), other.CHARACTERISTICS);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'CLASS' field.
      * @return The value.
      */
    public java.lang.CharSequence getCLASS() {
      return CLASS;
    }

    /**
      * Sets the value of the 'CLASS' field.
      * @param value The value of 'CLASS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder setCLASS(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CLASS = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CLASS' field has been set.
      * @return True if the 'CLASS' field has been set, false otherwise.
      */
    public boolean hasCLASS() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CLASS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder clearCLASS() {
      CLASS = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CAPABILITY' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCAPABILITY() {
      return CAPABILITY;
    }

    /**
      * Sets the value of the 'CAPABILITY' field.
      * @param value The value of 'CAPABILITY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder setCAPABILITY(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.CAPABILITY = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CAPABILITY' field has been set.
      * @return True if the 'CAPABILITY' field has been set, false otherwise.
      */
    public boolean hasCAPABILITY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CAPABILITY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder clearCAPABILITY() {
      CAPABILITY = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'CHARACTERISTICS' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCHARACTERISTICS() {
      return CHARACTERISTICS;
    }

    /**
      * Sets the value of the 'CHARACTERISTICS' field.
      * @param value The value of 'CHARACTERISTICS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder setCHARACTERISTICS(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.CHARACTERISTICS = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'CHARACTERISTICS' field has been set.
      * @return True if the 'CHARACTERISTICS' field has been set, false otherwise.
      */
    public boolean hasCHARACTERISTICS() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'CHARACTERISTICS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder clearCHARACTERISTICS() {
      CHARACTERISTICS = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RTYPERESOURCE build() {
      try {
        RTYPERESOURCE record = new RTYPERESOURCE();
        record.CLASS = fieldSetFlags()[0] ? this.CLASS : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CAPABILITY = fieldSetFlags()[1] ? this.CAPABILITY : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.CHARACTERISTICS = fieldSetFlags()[2] ? this.CHARACTERISTICS : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RTYPERESOURCE>
    WRITER$ = (org.apache.avro.io.DatumWriter<RTYPERESOURCE>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RTYPERESOURCE>
    READER$ = (org.apache.avro.io.DatumReader<RTYPERESOURCE>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
