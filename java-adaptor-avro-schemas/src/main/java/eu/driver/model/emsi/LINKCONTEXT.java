/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LINKCONTEXT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4082846044024779068L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LINKCONTEXT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\",\"source\":\"element ID\"},{\"name\":\"ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element ROLE\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LINKCONTEXT> ENCODER =
      new BinaryMessageEncoder<LINKCONTEXT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LINKCONTEXT> DECODER =
      new BinaryMessageDecoder<LINKCONTEXT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LINKCONTEXT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LINKCONTEXT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LINKCONTEXT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LINKCONTEXT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LINKCONTEXT from a ByteBuffer. */
  public static LINKCONTEXT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ID;
  @Deprecated public java.lang.CharSequence ROLE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LINKCONTEXT() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param ROLE The new value for ROLE
   */
  public LINKCONTEXT(java.lang.CharSequence ID, java.lang.CharSequence ROLE) {
    this.ID = ID;
    this.ROLE = ROLE;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return ROLE;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.CharSequence)value$; break;
    case 1: ROLE = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'ROLE' field.
   * @return The value of the 'ROLE' field.
   */
  public java.lang.CharSequence getROLE() {
    return ROLE;
  }

  /**
   * Sets the value of the 'ROLE' field.
   * @param value the value to set.
   */
  public void setROLE(java.lang.CharSequence value) {
    this.ROLE = value;
  }

  /**
   * Creates a new LINKCONTEXT RecordBuilder.
   * @return A new LINKCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.LINKCONTEXT.Builder newBuilder() {
    return new eu.driver.model.emsi.LINKCONTEXT.Builder();
  }

  /**
   * Creates a new LINKCONTEXT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LINKCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.LINKCONTEXT.Builder newBuilder(eu.driver.model.emsi.LINKCONTEXT.Builder other) {
    return new eu.driver.model.emsi.LINKCONTEXT.Builder(other);
  }

  /**
   * Creates a new LINKCONTEXT RecordBuilder by copying an existing LINKCONTEXT instance.
   * @param other The existing instance to copy.
   * @return A new LINKCONTEXT RecordBuilder
   */
  public static eu.driver.model.emsi.LINKCONTEXT.Builder newBuilder(eu.driver.model.emsi.LINKCONTEXT other) {
    return new eu.driver.model.emsi.LINKCONTEXT.Builder(other);
  }

  /**
   * RecordBuilder for LINKCONTEXT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LINKCONTEXT>
    implements org.apache.avro.data.RecordBuilder<LINKCONTEXT> {

    private java.lang.CharSequence ID;
    private java.lang.CharSequence ROLE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.LINKCONTEXT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ROLE)) {
        this.ROLE = data().deepCopy(fields()[1].schema(), other.ROLE);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LINKCONTEXT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.LINKCONTEXT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ROLE)) {
        this.ROLE = data().deepCopy(fields()[1].schema(), other.ROLE);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.LINKCONTEXT.Builder setID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.LINKCONTEXT.Builder clearID() {
      ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ROLE' field.
      * @return The value.
      */
    public java.lang.CharSequence getROLE() {
      return ROLE;
    }

    /**
      * Sets the value of the 'ROLE' field.
      * @param value The value of 'ROLE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.LINKCONTEXT.Builder setROLE(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ROLE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ROLE' field has been set.
      * @return True if the 'ROLE' field has been set, false otherwise.
      */
    public boolean hasROLE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ROLE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.LINKCONTEXT.Builder clearROLE() {
      ROLE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LINKCONTEXT build() {
      try {
        LINKCONTEXT record = new LINKCONTEXT();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ROLE = fieldSetFlags()[1] ? this.ROLE : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LINKCONTEXT>
    WRITER$ = (org.apache.avro.io.DatumWriter<LINKCONTEXT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LINKCONTEXT>
    READER$ = (org.apache.avro.io.DatumReader<LINKCONTEXT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
