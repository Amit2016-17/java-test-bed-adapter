/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EVACEVENT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5691378876626673344L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EVACEVENT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"DISPLACED\",\"type\":[\"null\",\"string\"],\"source\":\"element DISPLACED\"},{\"name\":\"EVACUATED\",\"type\":[\"null\",\"string\"],\"source\":\"element EVACUATED\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EVACEVENT> ENCODER =
      new BinaryMessageEncoder<EVACEVENT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EVACEVENT> DECODER =
      new BinaryMessageDecoder<EVACEVENT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EVACEVENT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EVACEVENT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EVACEVENT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EVACEVENT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EVACEVENT from a ByteBuffer. */
  public static EVACEVENT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long DATIME;
  @Deprecated public java.lang.CharSequence DISPLACED;
  @Deprecated public java.lang.CharSequence EVACUATED;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EVACEVENT() {}

  /**
   * All-args constructor.
   * @param DATIME The new value for DATIME
   * @param DISPLACED The new value for DISPLACED
   * @param EVACUATED The new value for EVACUATED
   */
  public EVACEVENT(java.lang.Long DATIME, java.lang.CharSequence DISPLACED, java.lang.CharSequence EVACUATED) {
    this.DATIME = DATIME;
    this.DISPLACED = DISPLACED;
    this.EVACUATED = EVACUATED;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DATIME;
    case 1: return DISPLACED;
    case 2: return EVACUATED;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DATIME = (java.lang.Long)value$; break;
    case 1: DISPLACED = (java.lang.CharSequence)value$; break;
    case 2: EVACUATED = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'DATIME' field.
   * @return The value of the 'DATIME' field.
   */
  public java.lang.Long getDATIME() {
    return DATIME;
  }

  /**
   * Sets the value of the 'DATIME' field.
   * @param value the value to set.
   */
  public void setDATIME(java.lang.Long value) {
    this.DATIME = value;
  }

  /**
   * Gets the value of the 'DISPLACED' field.
   * @return The value of the 'DISPLACED' field.
   */
  public java.lang.CharSequence getDISPLACED() {
    return DISPLACED;
  }

  /**
   * Sets the value of the 'DISPLACED' field.
   * @param value the value to set.
   */
  public void setDISPLACED(java.lang.CharSequence value) {
    this.DISPLACED = value;
  }

  /**
   * Gets the value of the 'EVACUATED' field.
   * @return The value of the 'EVACUATED' field.
   */
  public java.lang.CharSequence getEVACUATED() {
    return EVACUATED;
  }

  /**
   * Sets the value of the 'EVACUATED' field.
   * @param value the value to set.
   */
  public void setEVACUATED(java.lang.CharSequence value) {
    this.EVACUATED = value;
  }

  /**
   * Creates a new EVACEVENT RecordBuilder.
   * @return A new EVACEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVACEVENT.Builder newBuilder() {
    return new eu.driver.model.emsi.EVACEVENT.Builder();
  }

  /**
   * Creates a new EVACEVENT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EVACEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVACEVENT.Builder newBuilder(eu.driver.model.emsi.EVACEVENT.Builder other) {
    return new eu.driver.model.emsi.EVACEVENT.Builder(other);
  }

  /**
   * Creates a new EVACEVENT RecordBuilder by copying an existing EVACEVENT instance.
   * @param other The existing instance to copy.
   * @return A new EVACEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVACEVENT.Builder newBuilder(eu.driver.model.emsi.EVACEVENT other) {
    return new eu.driver.model.emsi.EVACEVENT.Builder(other);
  }

  /**
   * RecordBuilder for EVACEVENT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EVACEVENT>
    implements org.apache.avro.data.RecordBuilder<EVACEVENT> {

    private java.lang.Long DATIME;
    private java.lang.CharSequence DISPLACED;
    private java.lang.CharSequence EVACUATED;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.EVACEVENT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[0].schema(), other.DATIME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DISPLACED)) {
        this.DISPLACED = data().deepCopy(fields()[1].schema(), other.DISPLACED);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EVACUATED)) {
        this.EVACUATED = data().deepCopy(fields()[2].schema(), other.EVACUATED);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EVACEVENT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.EVACEVENT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[0].schema(), other.DATIME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DISPLACED)) {
        this.DISPLACED = data().deepCopy(fields()[1].schema(), other.DISPLACED);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EVACUATED)) {
        this.EVACUATED = data().deepCopy(fields()[2].schema(), other.EVACUATED);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'DATIME' field.
      * @return The value.
      */
    public java.lang.Long getDATIME() {
      return DATIME;
    }

    /**
      * Sets the value of the 'DATIME' field.
      * @param value The value of 'DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder setDATIME(java.lang.Long value) {
      validate(fields()[0], value);
      this.DATIME = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DATIME' field has been set.
      * @return True if the 'DATIME' field has been set, false otherwise.
      */
    public boolean hasDATIME() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder clearDATIME() {
      DATIME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'DISPLACED' field.
      * @return The value.
      */
    public java.lang.CharSequence getDISPLACED() {
      return DISPLACED;
    }

    /**
      * Sets the value of the 'DISPLACED' field.
      * @param value The value of 'DISPLACED'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder setDISPLACED(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.DISPLACED = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'DISPLACED' field has been set.
      * @return True if the 'DISPLACED' field has been set, false otherwise.
      */
    public boolean hasDISPLACED() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'DISPLACED' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder clearDISPLACED() {
      DISPLACED = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EVACUATED' field.
      * @return The value.
      */
    public java.lang.CharSequence getEVACUATED() {
      return EVACUATED;
    }

    /**
      * Sets the value of the 'EVACUATED' field.
      * @param value The value of 'EVACUATED'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder setEVACUATED(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.EVACUATED = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EVACUATED' field has been set.
      * @return True if the 'EVACUATED' field has been set, false otherwise.
      */
    public boolean hasEVACUATED() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EVACUATED' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVACEVENT.Builder clearEVACUATED() {
      EVACUATED = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EVACEVENT build() {
      try {
        EVACEVENT record = new EVACEVENT();
        record.DATIME = fieldSetFlags()[0] ? this.DATIME : (java.lang.Long) defaultValue(fields()[0]);
        record.DISPLACED = fieldSetFlags()[1] ? this.DISPLACED : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.EVACUATED = fieldSetFlags()[2] ? this.EVACUATED : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EVACEVENT>
    WRITER$ = (org.apache.avro.io.DatumWriter<EVACEVENT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EVACEVENT>
    READER$ = (org.apache.avro.io.DatumReader<EVACEVENT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
