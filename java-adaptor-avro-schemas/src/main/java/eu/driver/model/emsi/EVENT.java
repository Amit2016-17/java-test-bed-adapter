/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EVENT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8183947556352371434L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EVENT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\",\"source\":\"element ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element NAME\"},{\"name\":\"MAIN_EVENT_ID\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element MAIN_EVENT_ID\"},{\"name\":\"ETYPE\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ETYPEEVENT\",\"fields\":[{\"name\":\"CATEGORY\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CATEGORY\"},{\"name\":\"ACTOR\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ACTOR\"},{\"name\":\"LOCTYPE\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element LOCTYPE\"},{\"name\":\"ENV\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ENV\"}]}],\"default\":null,\"source\":\"element ETYPE\"},{\"name\":\"SOURCE\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element SOURCE\"},{\"name\":\"SCALE\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element SCALE\"},{\"name\":\"CERTAINTY\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element CERTAINTY\"},{\"name\":\"DECL_DATIME\",\"type\":[\"null\",\"long\"],\"default\":null,\"source\":\"element DECL_DATIME\"},{\"name\":\"OCC_DATIME\",\"type\":[\"null\",\"long\"],\"default\":null,\"source\":\"element OCC_DATIME\"},{\"name\":\"OBS_DATIME\",\"type\":[\"null\",\"long\"],\"default\":null,\"source\":\"element OBS_DATIME\"},{\"name\":\"STATUS\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element STATUS\"},{\"name\":\"RISK_ASSESSMNT\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element RISK_ASSESSMNT\"},{\"name\":\"REFERENCE\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"REFERENCEEVENT\",\"fields\":[{\"name\":\"ORG_ID\",\"type\":\"string\",\"source\":\"element ORG_ID\"},{\"name\":\"OTHER_EVENT_ID\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element OTHER_EVENT_ID\"}]}}],\"default\":null,\"source\":\"element REFERENCE\"},{\"name\":\"CASUALTIES\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CASUALTIESEVENT\",\"fields\":[{\"name\":\"CONTEXT\",\"type\":\"string\",\"source\":\"element CONTEXT\"},{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"default\":null,\"source\":\"element DATIME\"},{\"name\":\"DECONT\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element DECONT\"},{\"name\":\"TRIAGERED\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element TRIAGERED\"},{\"name\":\"TRIAGEYELLOW\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element TRIAGEYELLOW\"},{\"name\":\"TRIAGEGREEN\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element TRIAGEGREEN\"},{\"name\":\"TRIAGEBLACK\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element TRIAGEBLACK\"},{\"name\":\"MISSING\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element MISSING\"}]}}],\"default\":null,\"source\":\"element CASUALTIES\"},{\"name\":\"EVAC\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EVACEVENT\",\"fields\":[{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"DISPLACED\",\"type\":[\"null\",\"string\"],\"source\":\"element DISPLACED\"},{\"name\":\"EVACUATED\",\"type\":[\"null\",\"string\"],\"source\":\"element EVACUATED\"}]}}],\"default\":null,\"source\":\"element EVAC\"},{\"name\":\"EGEO\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EGEOEVENT\",\"fields\":[{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"TYPE\",\"type\":\"string\",\"source\":\"element TYPE\"},{\"name\":\"POSITION\",\"type\":{\"type\":\"record\",\"name\":\"POSITION\",\"fields\":[{\"name\":\"LOC_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element LOC_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"},{\"name\":\"COORDSYS\",\"type\":[\"null\",\"string\"],\"source\":\"element COORDSYS\"},{\"name\":\"COORD\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"COORDType\",\"fields\":[{\"name\":\"LAT\",\"type\":\"double\",\"source\":\"element LAT\"},{\"name\":\"LON\",\"type\":\"double\",\"source\":\"element LON\"},{\"name\":\"HEIGHT\",\"type\":[\"null\",\"double\"],\"source\":\"element HEIGHT\"}]}},\"source\":\"element COORD\"},{\"name\":\"HEIGHT_ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element HEIGHT_ROLE\"},{\"name\":\"ADDRESS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ADDRESS\"}]},\"source\":\"element POSITION\"},{\"name\":\"WEATHER\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element WEATHER\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"ID\",\"type\":[\"null\",\"string\"],\"source\":\"element ID\"},{\"name\":\"STATUS\",\"type\":[\"null\",\"string\"],\"source\":\"element STATUS\"}]}}],\"default\":null,\"source\":\"element EGEO\"},{\"name\":\"CAUSE\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element CAUSE\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"default\":null,\"source\":\"element FREETEXT\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EVENT> ENCODER =
      new BinaryMessageEncoder<EVENT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EVENT> DECODER =
      new BinaryMessageDecoder<EVENT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EVENT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EVENT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EVENT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EVENT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EVENT from a ByteBuffer. */
  public static EVENT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ID;
  @Deprecated public java.lang.CharSequence NAME;
  @Deprecated public java.lang.CharSequence MAIN_EVENT_ID;
  @Deprecated public eu.driver.model.emsi.ETYPEEVENT ETYPE;
  @Deprecated public java.lang.CharSequence SOURCE;
  @Deprecated public java.lang.CharSequence SCALE;
  @Deprecated public java.lang.CharSequence CERTAINTY;
  @Deprecated public java.lang.Long DECL_DATIME;
  @Deprecated public java.lang.Long OCC_DATIME;
  @Deprecated public java.lang.Long OBS_DATIME;
  @Deprecated public java.lang.CharSequence STATUS;
  @Deprecated public java.lang.CharSequence RISK_ASSESSMNT;
  @Deprecated public java.util.List<eu.driver.model.emsi.REFERENCEEVENT> REFERENCE;
  @Deprecated public java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> CASUALTIES;
  @Deprecated public java.util.List<eu.driver.model.emsi.EVACEVENT> EVAC;
  @Deprecated public java.util.List<eu.driver.model.emsi.EGEOEVENT> EGEO;
  @Deprecated public java.lang.CharSequence CAUSE;
  @Deprecated public java.lang.CharSequence FREETEXT;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EVENT() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param NAME The new value for NAME
   * @param MAIN_EVENT_ID The new value for MAIN_EVENT_ID
   * @param ETYPE The new value for ETYPE
   * @param SOURCE The new value for SOURCE
   * @param SCALE The new value for SCALE
   * @param CERTAINTY The new value for CERTAINTY
   * @param DECL_DATIME The new value for DECL_DATIME
   * @param OCC_DATIME The new value for OCC_DATIME
   * @param OBS_DATIME The new value for OBS_DATIME
   * @param STATUS The new value for STATUS
   * @param RISK_ASSESSMNT The new value for RISK_ASSESSMNT
   * @param REFERENCE The new value for REFERENCE
   * @param CASUALTIES The new value for CASUALTIES
   * @param EVAC The new value for EVAC
   * @param EGEO The new value for EGEO
   * @param CAUSE The new value for CAUSE
   * @param FREETEXT The new value for FREETEXT
   */
  public EVENT(java.lang.CharSequence ID, java.lang.CharSequence NAME, java.lang.CharSequence MAIN_EVENT_ID, eu.driver.model.emsi.ETYPEEVENT ETYPE, java.lang.CharSequence SOURCE, java.lang.CharSequence SCALE, java.lang.CharSequence CERTAINTY, java.lang.Long DECL_DATIME, java.lang.Long OCC_DATIME, java.lang.Long OBS_DATIME, java.lang.CharSequence STATUS, java.lang.CharSequence RISK_ASSESSMNT, java.util.List<eu.driver.model.emsi.REFERENCEEVENT> REFERENCE, java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> CASUALTIES, java.util.List<eu.driver.model.emsi.EVACEVENT> EVAC, java.util.List<eu.driver.model.emsi.EGEOEVENT> EGEO, java.lang.CharSequence CAUSE, java.lang.CharSequence FREETEXT) {
    this.ID = ID;
    this.NAME = NAME;
    this.MAIN_EVENT_ID = MAIN_EVENT_ID;
    this.ETYPE = ETYPE;
    this.SOURCE = SOURCE;
    this.SCALE = SCALE;
    this.CERTAINTY = CERTAINTY;
    this.DECL_DATIME = DECL_DATIME;
    this.OCC_DATIME = OCC_DATIME;
    this.OBS_DATIME = OBS_DATIME;
    this.STATUS = STATUS;
    this.RISK_ASSESSMNT = RISK_ASSESSMNT;
    this.REFERENCE = REFERENCE;
    this.CASUALTIES = CASUALTIES;
    this.EVAC = EVAC;
    this.EGEO = EGEO;
    this.CAUSE = CAUSE;
    this.FREETEXT = FREETEXT;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return NAME;
    case 2: return MAIN_EVENT_ID;
    case 3: return ETYPE;
    case 4: return SOURCE;
    case 5: return SCALE;
    case 6: return CERTAINTY;
    case 7: return DECL_DATIME;
    case 8: return OCC_DATIME;
    case 9: return OBS_DATIME;
    case 10: return STATUS;
    case 11: return RISK_ASSESSMNT;
    case 12: return REFERENCE;
    case 13: return CASUALTIES;
    case 14: return EVAC;
    case 15: return EGEO;
    case 16: return CAUSE;
    case 17: return FREETEXT;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.CharSequence)value$; break;
    case 1: NAME = (java.lang.CharSequence)value$; break;
    case 2: MAIN_EVENT_ID = (java.lang.CharSequence)value$; break;
    case 3: ETYPE = (eu.driver.model.emsi.ETYPEEVENT)value$; break;
    case 4: SOURCE = (java.lang.CharSequence)value$; break;
    case 5: SCALE = (java.lang.CharSequence)value$; break;
    case 6: CERTAINTY = (java.lang.CharSequence)value$; break;
    case 7: DECL_DATIME = (java.lang.Long)value$; break;
    case 8: OCC_DATIME = (java.lang.Long)value$; break;
    case 9: OBS_DATIME = (java.lang.Long)value$; break;
    case 10: STATUS = (java.lang.CharSequence)value$; break;
    case 11: RISK_ASSESSMNT = (java.lang.CharSequence)value$; break;
    case 12: REFERENCE = (java.util.List<eu.driver.model.emsi.REFERENCEEVENT>)value$; break;
    case 13: CASUALTIES = (java.util.List<eu.driver.model.emsi.CASUALTIESEVENT>)value$; break;
    case 14: EVAC = (java.util.List<eu.driver.model.emsi.EVACEVENT>)value$; break;
    case 15: EGEO = (java.util.List<eu.driver.model.emsi.EGEOEVENT>)value$; break;
    case 16: CAUSE = (java.lang.CharSequence)value$; break;
    case 17: FREETEXT = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public java.lang.CharSequence getNAME() {
    return NAME;
  }

  /**
   * Sets the value of the 'NAME' field.
   * @param value the value to set.
   */
  public void setNAME(java.lang.CharSequence value) {
    this.NAME = value;
  }

  /**
   * Gets the value of the 'MAIN_EVENT_ID' field.
   * @return The value of the 'MAIN_EVENT_ID' field.
   */
  public java.lang.CharSequence getMAINEVENTID() {
    return MAIN_EVENT_ID;
  }

  /**
   * Sets the value of the 'MAIN_EVENT_ID' field.
   * @param value the value to set.
   */
  public void setMAINEVENTID(java.lang.CharSequence value) {
    this.MAIN_EVENT_ID = value;
  }

  /**
   * Gets the value of the 'ETYPE' field.
   * @return The value of the 'ETYPE' field.
   */
  public eu.driver.model.emsi.ETYPEEVENT getETYPE() {
    return ETYPE;
  }

  /**
   * Sets the value of the 'ETYPE' field.
   * @param value the value to set.
   */
  public void setETYPE(eu.driver.model.emsi.ETYPEEVENT value) {
    this.ETYPE = value;
  }

  /**
   * Gets the value of the 'SOURCE' field.
   * @return The value of the 'SOURCE' field.
   */
  public java.lang.CharSequence getSOURCE() {
    return SOURCE;
  }

  /**
   * Sets the value of the 'SOURCE' field.
   * @param value the value to set.
   */
  public void setSOURCE(java.lang.CharSequence value) {
    this.SOURCE = value;
  }

  /**
   * Gets the value of the 'SCALE' field.
   * @return The value of the 'SCALE' field.
   */
  public java.lang.CharSequence getSCALE() {
    return SCALE;
  }

  /**
   * Sets the value of the 'SCALE' field.
   * @param value the value to set.
   */
  public void setSCALE(java.lang.CharSequence value) {
    this.SCALE = value;
  }

  /**
   * Gets the value of the 'CERTAINTY' field.
   * @return The value of the 'CERTAINTY' field.
   */
  public java.lang.CharSequence getCERTAINTY() {
    return CERTAINTY;
  }

  /**
   * Sets the value of the 'CERTAINTY' field.
   * @param value the value to set.
   */
  public void setCERTAINTY(java.lang.CharSequence value) {
    this.CERTAINTY = value;
  }

  /**
   * Gets the value of the 'DECL_DATIME' field.
   * @return The value of the 'DECL_DATIME' field.
   */
  public java.lang.Long getDECLDATIME() {
    return DECL_DATIME;
  }

  /**
   * Sets the value of the 'DECL_DATIME' field.
   * @param value the value to set.
   */
  public void setDECLDATIME(java.lang.Long value) {
    this.DECL_DATIME = value;
  }

  /**
   * Gets the value of the 'OCC_DATIME' field.
   * @return The value of the 'OCC_DATIME' field.
   */
  public java.lang.Long getOCCDATIME() {
    return OCC_DATIME;
  }

  /**
   * Sets the value of the 'OCC_DATIME' field.
   * @param value the value to set.
   */
  public void setOCCDATIME(java.lang.Long value) {
    this.OCC_DATIME = value;
  }

  /**
   * Gets the value of the 'OBS_DATIME' field.
   * @return The value of the 'OBS_DATIME' field.
   */
  public java.lang.Long getOBSDATIME() {
    return OBS_DATIME;
  }

  /**
   * Sets the value of the 'OBS_DATIME' field.
   * @param value the value to set.
   */
  public void setOBSDATIME(java.lang.Long value) {
    this.OBS_DATIME = value;
  }

  /**
   * Gets the value of the 'STATUS' field.
   * @return The value of the 'STATUS' field.
   */
  public java.lang.CharSequence getSTATUS() {
    return STATUS;
  }

  /**
   * Sets the value of the 'STATUS' field.
   * @param value the value to set.
   */
  public void setSTATUS(java.lang.CharSequence value) {
    this.STATUS = value;
  }

  /**
   * Gets the value of the 'RISK_ASSESSMNT' field.
   * @return The value of the 'RISK_ASSESSMNT' field.
   */
  public java.lang.CharSequence getRISKASSESSMNT() {
    return RISK_ASSESSMNT;
  }

  /**
   * Sets the value of the 'RISK_ASSESSMNT' field.
   * @param value the value to set.
   */
  public void setRISKASSESSMNT(java.lang.CharSequence value) {
    this.RISK_ASSESSMNT = value;
  }

  /**
   * Gets the value of the 'REFERENCE' field.
   * @return The value of the 'REFERENCE' field.
   */
  public java.util.List<eu.driver.model.emsi.REFERENCEEVENT> getREFERENCE() {
    return REFERENCE;
  }

  /**
   * Sets the value of the 'REFERENCE' field.
   * @param value the value to set.
   */
  public void setREFERENCE(java.util.List<eu.driver.model.emsi.REFERENCEEVENT> value) {
    this.REFERENCE = value;
  }

  /**
   * Gets the value of the 'CASUALTIES' field.
   * @return The value of the 'CASUALTIES' field.
   */
  public java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> getCASUALTIES() {
    return CASUALTIES;
  }

  /**
   * Sets the value of the 'CASUALTIES' field.
   * @param value the value to set.
   */
  public void setCASUALTIES(java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> value) {
    this.CASUALTIES = value;
  }

  /**
   * Gets the value of the 'EVAC' field.
   * @return The value of the 'EVAC' field.
   */
  public java.util.List<eu.driver.model.emsi.EVACEVENT> getEVAC() {
    return EVAC;
  }

  /**
   * Sets the value of the 'EVAC' field.
   * @param value the value to set.
   */
  public void setEVAC(java.util.List<eu.driver.model.emsi.EVACEVENT> value) {
    this.EVAC = value;
  }

  /**
   * Gets the value of the 'EGEO' field.
   * @return The value of the 'EGEO' field.
   */
  public java.util.List<eu.driver.model.emsi.EGEOEVENT> getEGEO() {
    return EGEO;
  }

  /**
   * Sets the value of the 'EGEO' field.
   * @param value the value to set.
   */
  public void setEGEO(java.util.List<eu.driver.model.emsi.EGEOEVENT> value) {
    this.EGEO = value;
  }

  /**
   * Gets the value of the 'CAUSE' field.
   * @return The value of the 'CAUSE' field.
   */
  public java.lang.CharSequence getCAUSE() {
    return CAUSE;
  }

  /**
   * Sets the value of the 'CAUSE' field.
   * @param value the value to set.
   */
  public void setCAUSE(java.lang.CharSequence value) {
    this.CAUSE = value;
  }

  /**
   * Gets the value of the 'FREETEXT' field.
   * @return The value of the 'FREETEXT' field.
   */
  public java.lang.CharSequence getFREETEXT() {
    return FREETEXT;
  }

  /**
   * Sets the value of the 'FREETEXT' field.
   * @param value the value to set.
   */
  public void setFREETEXT(java.lang.CharSequence value) {
    this.FREETEXT = value;
  }

  /**
   * Creates a new EVENT RecordBuilder.
   * @return A new EVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVENT.Builder newBuilder() {
    return new eu.driver.model.emsi.EVENT.Builder();
  }

  /**
   * Creates a new EVENT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVENT.Builder newBuilder(eu.driver.model.emsi.EVENT.Builder other) {
    return new eu.driver.model.emsi.EVENT.Builder(other);
  }

  /**
   * Creates a new EVENT RecordBuilder by copying an existing EVENT instance.
   * @param other The existing instance to copy.
   * @return A new EVENT RecordBuilder
   */
  public static eu.driver.model.emsi.EVENT.Builder newBuilder(eu.driver.model.emsi.EVENT other) {
    return new eu.driver.model.emsi.EVENT.Builder(other);
  }

  /**
   * RecordBuilder for EVENT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EVENT>
    implements org.apache.avro.data.RecordBuilder<EVENT> {

    private java.lang.CharSequence ID;
    private java.lang.CharSequence NAME;
    private java.lang.CharSequence MAIN_EVENT_ID;
    private eu.driver.model.emsi.ETYPEEVENT ETYPE;
    private eu.driver.model.emsi.ETYPEEVENT.Builder ETYPEBuilder;
    private java.lang.CharSequence SOURCE;
    private java.lang.CharSequence SCALE;
    private java.lang.CharSequence CERTAINTY;
    private java.lang.Long DECL_DATIME;
    private java.lang.Long OCC_DATIME;
    private java.lang.Long OBS_DATIME;
    private java.lang.CharSequence STATUS;
    private java.lang.CharSequence RISK_ASSESSMNT;
    private java.util.List<eu.driver.model.emsi.REFERENCEEVENT> REFERENCE;
    private java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> CASUALTIES;
    private java.util.List<eu.driver.model.emsi.EVACEVENT> EVAC;
    private java.util.List<eu.driver.model.emsi.EGEOEVENT> EGEO;
    private java.lang.CharSequence CAUSE;
    private java.lang.CharSequence FREETEXT;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.EVENT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MAIN_EVENT_ID)) {
        this.MAIN_EVENT_ID = data().deepCopy(fields()[2].schema(), other.MAIN_EVENT_ID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ETYPE)) {
        this.ETYPE = data().deepCopy(fields()[3].schema(), other.ETYPE);
        fieldSetFlags()[3] = true;
      }
      if (other.hasETYPEBuilder()) {
        this.ETYPEBuilder = eu.driver.model.emsi.ETYPEEVENT.newBuilder(other.getETYPEBuilder());
      }
      if (isValidValue(fields()[4], other.SOURCE)) {
        this.SOURCE = data().deepCopy(fields()[4].schema(), other.SOURCE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SCALE)) {
        this.SCALE = data().deepCopy(fields()[5].schema(), other.SCALE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CERTAINTY)) {
        this.CERTAINTY = data().deepCopy(fields()[6].schema(), other.CERTAINTY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.DECL_DATIME)) {
        this.DECL_DATIME = data().deepCopy(fields()[7].schema(), other.DECL_DATIME);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.OCC_DATIME)) {
        this.OCC_DATIME = data().deepCopy(fields()[8].schema(), other.OCC_DATIME);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.OBS_DATIME)) {
        this.OBS_DATIME = data().deepCopy(fields()[9].schema(), other.OBS_DATIME);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.STATUS)) {
        this.STATUS = data().deepCopy(fields()[10].schema(), other.STATUS);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.RISK_ASSESSMNT)) {
        this.RISK_ASSESSMNT = data().deepCopy(fields()[11].schema(), other.RISK_ASSESSMNT);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.REFERENCE)) {
        this.REFERENCE = data().deepCopy(fields()[12].schema(), other.REFERENCE);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.CASUALTIES)) {
        this.CASUALTIES = data().deepCopy(fields()[13].schema(), other.CASUALTIES);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.EVAC)) {
        this.EVAC = data().deepCopy(fields()[14].schema(), other.EVAC);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.EGEO)) {
        this.EGEO = data().deepCopy(fields()[15].schema(), other.EGEO);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.CAUSE)) {
        this.CAUSE = data().deepCopy(fields()[16].schema(), other.CAUSE);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[17].schema(), other.FREETEXT);
        fieldSetFlags()[17] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EVENT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.EVENT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MAIN_EVENT_ID)) {
        this.MAIN_EVENT_ID = data().deepCopy(fields()[2].schema(), other.MAIN_EVENT_ID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ETYPE)) {
        this.ETYPE = data().deepCopy(fields()[3].schema(), other.ETYPE);
        fieldSetFlags()[3] = true;
      }
      this.ETYPEBuilder = null;
      if (isValidValue(fields()[4], other.SOURCE)) {
        this.SOURCE = data().deepCopy(fields()[4].schema(), other.SOURCE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SCALE)) {
        this.SCALE = data().deepCopy(fields()[5].schema(), other.SCALE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CERTAINTY)) {
        this.CERTAINTY = data().deepCopy(fields()[6].schema(), other.CERTAINTY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.DECL_DATIME)) {
        this.DECL_DATIME = data().deepCopy(fields()[7].schema(), other.DECL_DATIME);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.OCC_DATIME)) {
        this.OCC_DATIME = data().deepCopy(fields()[8].schema(), other.OCC_DATIME);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.OBS_DATIME)) {
        this.OBS_DATIME = data().deepCopy(fields()[9].schema(), other.OBS_DATIME);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.STATUS)) {
        this.STATUS = data().deepCopy(fields()[10].schema(), other.STATUS);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.RISK_ASSESSMNT)) {
        this.RISK_ASSESSMNT = data().deepCopy(fields()[11].schema(), other.RISK_ASSESSMNT);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.REFERENCE)) {
        this.REFERENCE = data().deepCopy(fields()[12].schema(), other.REFERENCE);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.CASUALTIES)) {
        this.CASUALTIES = data().deepCopy(fields()[13].schema(), other.CASUALTIES);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.EVAC)) {
        this.EVAC = data().deepCopy(fields()[14].schema(), other.EVAC);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.EGEO)) {
        this.EGEO = data().deepCopy(fields()[15].schema(), other.EGEO);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.CAUSE)) {
        this.CAUSE = data().deepCopy(fields()[16].schema(), other.CAUSE);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[17].schema(), other.FREETEXT);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearID() {
      ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setNAME(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.NAME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearNAME() {
      NAME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MAIN_EVENT_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getMAINEVENTID() {
      return MAIN_EVENT_ID;
    }

    /**
      * Sets the value of the 'MAIN_EVENT_ID' field.
      * @param value The value of 'MAIN_EVENT_ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setMAINEVENTID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.MAIN_EVENT_ID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MAIN_EVENT_ID' field has been set.
      * @return True if the 'MAIN_EVENT_ID' field has been set, false otherwise.
      */
    public boolean hasMAINEVENTID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MAIN_EVENT_ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearMAINEVENTID() {
      MAIN_EVENT_ID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ETYPE' field.
      * @return The value.
      */
    public eu.driver.model.emsi.ETYPEEVENT getETYPE() {
      return ETYPE;
    }

    /**
      * Sets the value of the 'ETYPE' field.
      * @param value The value of 'ETYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setETYPE(eu.driver.model.emsi.ETYPEEVENT value) {
      validate(fields()[3], value);
      this.ETYPEBuilder = null;
      this.ETYPE = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ETYPE' field has been set.
      * @return True if the 'ETYPE' field has been set, false otherwise.
      */
    public boolean hasETYPE() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'ETYPE' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.emsi.ETYPEEVENT.Builder getETYPEBuilder() {
      if (ETYPEBuilder == null) {
        if (hasETYPE()) {
          setETYPEBuilder(eu.driver.model.emsi.ETYPEEVENT.newBuilder(ETYPE));
        } else {
          setETYPEBuilder(eu.driver.model.emsi.ETYPEEVENT.newBuilder());
        }
      }
      return ETYPEBuilder;
    }

    /**
     * Sets the Builder instance for the 'ETYPE' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.emsi.EVENT.Builder setETYPEBuilder(eu.driver.model.emsi.ETYPEEVENT.Builder value) {
      clearETYPE();
      ETYPEBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ETYPE' field has an active Builder instance
     * @return True if the 'ETYPE' field has an active Builder instance
     */
    public boolean hasETYPEBuilder() {
      return ETYPEBuilder != null;
    }

    /**
      * Clears the value of the 'ETYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearETYPE() {
      ETYPE = null;
      ETYPEBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'SOURCE' field.
      * @return The value.
      */
    public java.lang.CharSequence getSOURCE() {
      return SOURCE;
    }

    /**
      * Sets the value of the 'SOURCE' field.
      * @param value The value of 'SOURCE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setSOURCE(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.SOURCE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'SOURCE' field has been set.
      * @return True if the 'SOURCE' field has been set, false otherwise.
      */
    public boolean hasSOURCE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'SOURCE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearSOURCE() {
      SOURCE = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'SCALE' field.
      * @return The value.
      */
    public java.lang.CharSequence getSCALE() {
      return SCALE;
    }

    /**
      * Sets the value of the 'SCALE' field.
      * @param value The value of 'SCALE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setSCALE(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.SCALE = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'SCALE' field has been set.
      * @return True if the 'SCALE' field has been set, false otherwise.
      */
    public boolean hasSCALE() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'SCALE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearSCALE() {
      SCALE = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'CERTAINTY' field.
      * @return The value.
      */
    public java.lang.CharSequence getCERTAINTY() {
      return CERTAINTY;
    }

    /**
      * Sets the value of the 'CERTAINTY' field.
      * @param value The value of 'CERTAINTY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setCERTAINTY(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.CERTAINTY = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'CERTAINTY' field has been set.
      * @return True if the 'CERTAINTY' field has been set, false otherwise.
      */
    public boolean hasCERTAINTY() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'CERTAINTY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearCERTAINTY() {
      CERTAINTY = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'DECL_DATIME' field.
      * @return The value.
      */
    public java.lang.Long getDECLDATIME() {
      return DECL_DATIME;
    }

    /**
      * Sets the value of the 'DECL_DATIME' field.
      * @param value The value of 'DECL_DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setDECLDATIME(java.lang.Long value) {
      validate(fields()[7], value);
      this.DECL_DATIME = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'DECL_DATIME' field has been set.
      * @return True if the 'DECL_DATIME' field has been set, false otherwise.
      */
    public boolean hasDECLDATIME() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'DECL_DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearDECLDATIME() {
      DECL_DATIME = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'OCC_DATIME' field.
      * @return The value.
      */
    public java.lang.Long getOCCDATIME() {
      return OCC_DATIME;
    }

    /**
      * Sets the value of the 'OCC_DATIME' field.
      * @param value The value of 'OCC_DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setOCCDATIME(java.lang.Long value) {
      validate(fields()[8], value);
      this.OCC_DATIME = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'OCC_DATIME' field has been set.
      * @return True if the 'OCC_DATIME' field has been set, false otherwise.
      */
    public boolean hasOCCDATIME() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'OCC_DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearOCCDATIME() {
      OCC_DATIME = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'OBS_DATIME' field.
      * @return The value.
      */
    public java.lang.Long getOBSDATIME() {
      return OBS_DATIME;
    }

    /**
      * Sets the value of the 'OBS_DATIME' field.
      * @param value The value of 'OBS_DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setOBSDATIME(java.lang.Long value) {
      validate(fields()[9], value);
      this.OBS_DATIME = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'OBS_DATIME' field has been set.
      * @return True if the 'OBS_DATIME' field has been set, false otherwise.
      */
    public boolean hasOBSDATIME() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'OBS_DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearOBSDATIME() {
      OBS_DATIME = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'STATUS' field.
      * @return The value.
      */
    public java.lang.CharSequence getSTATUS() {
      return STATUS;
    }

    /**
      * Sets the value of the 'STATUS' field.
      * @param value The value of 'STATUS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setSTATUS(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.STATUS = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'STATUS' field has been set.
      * @return True if the 'STATUS' field has been set, false otherwise.
      */
    public boolean hasSTATUS() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'STATUS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearSTATUS() {
      STATUS = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'RISK_ASSESSMNT' field.
      * @return The value.
      */
    public java.lang.CharSequence getRISKASSESSMNT() {
      return RISK_ASSESSMNT;
    }

    /**
      * Sets the value of the 'RISK_ASSESSMNT' field.
      * @param value The value of 'RISK_ASSESSMNT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setRISKASSESSMNT(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.RISK_ASSESSMNT = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'RISK_ASSESSMNT' field has been set.
      * @return True if the 'RISK_ASSESSMNT' field has been set, false otherwise.
      */
    public boolean hasRISKASSESSMNT() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'RISK_ASSESSMNT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearRISKASSESSMNT() {
      RISK_ASSESSMNT = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'REFERENCE' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.REFERENCEEVENT> getREFERENCE() {
      return REFERENCE;
    }

    /**
      * Sets the value of the 'REFERENCE' field.
      * @param value The value of 'REFERENCE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setREFERENCE(java.util.List<eu.driver.model.emsi.REFERENCEEVENT> value) {
      validate(fields()[12], value);
      this.REFERENCE = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'REFERENCE' field has been set.
      * @return True if the 'REFERENCE' field has been set, false otherwise.
      */
    public boolean hasREFERENCE() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'REFERENCE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearREFERENCE() {
      REFERENCE = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'CASUALTIES' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> getCASUALTIES() {
      return CASUALTIES;
    }

    /**
      * Sets the value of the 'CASUALTIES' field.
      * @param value The value of 'CASUALTIES'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setCASUALTIES(java.util.List<eu.driver.model.emsi.CASUALTIESEVENT> value) {
      validate(fields()[13], value);
      this.CASUALTIES = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'CASUALTIES' field has been set.
      * @return True if the 'CASUALTIES' field has been set, false otherwise.
      */
    public boolean hasCASUALTIES() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'CASUALTIES' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearCASUALTIES() {
      CASUALTIES = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'EVAC' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.EVACEVENT> getEVAC() {
      return EVAC;
    }

    /**
      * Sets the value of the 'EVAC' field.
      * @param value The value of 'EVAC'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setEVAC(java.util.List<eu.driver.model.emsi.EVACEVENT> value) {
      validate(fields()[14], value);
      this.EVAC = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'EVAC' field has been set.
      * @return True if the 'EVAC' field has been set, false otherwise.
      */
    public boolean hasEVAC() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'EVAC' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearEVAC() {
      EVAC = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'EGEO' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.EGEOEVENT> getEGEO() {
      return EGEO;
    }

    /**
      * Sets the value of the 'EGEO' field.
      * @param value The value of 'EGEO'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setEGEO(java.util.List<eu.driver.model.emsi.EGEOEVENT> value) {
      validate(fields()[15], value);
      this.EGEO = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'EGEO' field has been set.
      * @return True if the 'EGEO' field has been set, false otherwise.
      */
    public boolean hasEGEO() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'EGEO' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearEGEO() {
      EGEO = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'CAUSE' field.
      * @return The value.
      */
    public java.lang.CharSequence getCAUSE() {
      return CAUSE;
    }

    /**
      * Sets the value of the 'CAUSE' field.
      * @param value The value of 'CAUSE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setCAUSE(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.CAUSE = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'CAUSE' field has been set.
      * @return True if the 'CAUSE' field has been set, false otherwise.
      */
    public boolean hasCAUSE() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'CAUSE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearCAUSE() {
      CAUSE = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'FREETEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getFREETEXT() {
      return FREETEXT;
    }

    /**
      * Sets the value of the 'FREETEXT' field.
      * @param value The value of 'FREETEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder setFREETEXT(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.FREETEXT = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'FREETEXT' field has been set.
      * @return True if the 'FREETEXT' field has been set, false otherwise.
      */
    public boolean hasFREETEXT() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'FREETEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.EVENT.Builder clearFREETEXT() {
      FREETEXT = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EVENT build() {
      try {
        EVENT record = new EVENT();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.NAME = fieldSetFlags()[1] ? this.NAME : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.MAIN_EVENT_ID = fieldSetFlags()[2] ? this.MAIN_EVENT_ID : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (ETYPEBuilder != null) {
          record.ETYPE = this.ETYPEBuilder.build();
        } else {
          record.ETYPE = fieldSetFlags()[3] ? this.ETYPE : (eu.driver.model.emsi.ETYPEEVENT) defaultValue(fields()[3]);
        }
        record.SOURCE = fieldSetFlags()[4] ? this.SOURCE : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.SCALE = fieldSetFlags()[5] ? this.SCALE : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.CERTAINTY = fieldSetFlags()[6] ? this.CERTAINTY : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.DECL_DATIME = fieldSetFlags()[7] ? this.DECL_DATIME : (java.lang.Long) defaultValue(fields()[7]);
        record.OCC_DATIME = fieldSetFlags()[8] ? this.OCC_DATIME : (java.lang.Long) defaultValue(fields()[8]);
        record.OBS_DATIME = fieldSetFlags()[9] ? this.OBS_DATIME : (java.lang.Long) defaultValue(fields()[9]);
        record.STATUS = fieldSetFlags()[10] ? this.STATUS : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.RISK_ASSESSMNT = fieldSetFlags()[11] ? this.RISK_ASSESSMNT : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.REFERENCE = fieldSetFlags()[12] ? this.REFERENCE : (java.util.List<eu.driver.model.emsi.REFERENCEEVENT>) defaultValue(fields()[12]);
        record.CASUALTIES = fieldSetFlags()[13] ? this.CASUALTIES : (java.util.List<eu.driver.model.emsi.CASUALTIESEVENT>) defaultValue(fields()[13]);
        record.EVAC = fieldSetFlags()[14] ? this.EVAC : (java.util.List<eu.driver.model.emsi.EVACEVENT>) defaultValue(fields()[14]);
        record.EGEO = fieldSetFlags()[15] ? this.EGEO : (java.util.List<eu.driver.model.emsi.EGEOEVENT>) defaultValue(fields()[15]);
        record.CAUSE = fieldSetFlags()[16] ? this.CAUSE : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.FREETEXT = fieldSetFlags()[17] ? this.FREETEXT : (java.lang.CharSequence) defaultValue(fields()[17]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EVENT>
    WRITER$ = (org.apache.avro.io.DatumWriter<EVENT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EVENT>
    READER$ = (org.apache.avro.io.DatumReader<EVENT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
