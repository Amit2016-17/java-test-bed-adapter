/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CASUALTIESEVENT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1505095724417941465L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CASUALTIESEVENT\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"CONTEXT\",\"type\":\"string\",\"source\":\"element CONTEXT\"},{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"DECONT\",\"type\":[\"null\",\"string\"],\"source\":\"element DECONT\"},{\"name\":\"TRIAGERED\",\"type\":[\"null\",\"string\"],\"source\":\"element TRIAGERED\"},{\"name\":\"TRIAGEYELLOW\",\"type\":[\"null\",\"string\"],\"source\":\"element TRIAGEYELLOW\"},{\"name\":\"TRIAGEGREEN\",\"type\":[\"null\",\"string\"],\"source\":\"element TRIAGEGREEN\"},{\"name\":\"TRIAGEBLACK\",\"type\":[\"null\",\"string\"],\"source\":\"element TRIAGEBLACK\"},{\"name\":\"MISSING\",\"type\":[\"null\",\"string\"],\"source\":\"element MISSING\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CASUALTIESEVENT> ENCODER =
      new BinaryMessageEncoder<CASUALTIESEVENT>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CASUALTIESEVENT> DECODER =
      new BinaryMessageDecoder<CASUALTIESEVENT>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CASUALTIESEVENT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CASUALTIESEVENT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CASUALTIESEVENT>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CASUALTIESEVENT to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CASUALTIESEVENT from a ByteBuffer. */
  public static CASUALTIESEVENT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence CONTEXT;
  @Deprecated public java.lang.Long DATIME;
  @Deprecated public java.lang.CharSequence DECONT;
  @Deprecated public java.lang.CharSequence TRIAGERED;
  @Deprecated public java.lang.CharSequence TRIAGEYELLOW;
  @Deprecated public java.lang.CharSequence TRIAGEGREEN;
  @Deprecated public java.lang.CharSequence TRIAGEBLACK;
  @Deprecated public java.lang.CharSequence MISSING;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CASUALTIESEVENT() {}

  /**
   * All-args constructor.
   * @param CONTEXT The new value for CONTEXT
   * @param DATIME The new value for DATIME
   * @param DECONT The new value for DECONT
   * @param TRIAGERED The new value for TRIAGERED
   * @param TRIAGEYELLOW The new value for TRIAGEYELLOW
   * @param TRIAGEGREEN The new value for TRIAGEGREEN
   * @param TRIAGEBLACK The new value for TRIAGEBLACK
   * @param MISSING The new value for MISSING
   */
  public CASUALTIESEVENT(java.lang.CharSequence CONTEXT, java.lang.Long DATIME, java.lang.CharSequence DECONT, java.lang.CharSequence TRIAGERED, java.lang.CharSequence TRIAGEYELLOW, java.lang.CharSequence TRIAGEGREEN, java.lang.CharSequence TRIAGEBLACK, java.lang.CharSequence MISSING) {
    this.CONTEXT = CONTEXT;
    this.DATIME = DATIME;
    this.DECONT = DECONT;
    this.TRIAGERED = TRIAGERED;
    this.TRIAGEYELLOW = TRIAGEYELLOW;
    this.TRIAGEGREEN = TRIAGEGREEN;
    this.TRIAGEBLACK = TRIAGEBLACK;
    this.MISSING = MISSING;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CONTEXT;
    case 1: return DATIME;
    case 2: return DECONT;
    case 3: return TRIAGERED;
    case 4: return TRIAGEYELLOW;
    case 5: return TRIAGEGREEN;
    case 6: return TRIAGEBLACK;
    case 7: return MISSING;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CONTEXT = (java.lang.CharSequence)value$; break;
    case 1: DATIME = (java.lang.Long)value$; break;
    case 2: DECONT = (java.lang.CharSequence)value$; break;
    case 3: TRIAGERED = (java.lang.CharSequence)value$; break;
    case 4: TRIAGEYELLOW = (java.lang.CharSequence)value$; break;
    case 5: TRIAGEGREEN = (java.lang.CharSequence)value$; break;
    case 6: TRIAGEBLACK = (java.lang.CharSequence)value$; break;
    case 7: MISSING = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CONTEXT' field.
   * @return The value of the 'CONTEXT' field.
   */
  public java.lang.CharSequence getCONTEXT() {
    return CONTEXT;
  }

  /**
   * Sets the value of the 'CONTEXT' field.
   * @param value the value to set.
   */
  public void setCONTEXT(java.lang.CharSequence value) {
    this.CONTEXT = value;
  }

  /**
   * Gets the value of the 'DATIME' field.
   * @return The value of the 'DATIME' field.
   */
  public java.lang.Long getDATIME() {
    return DATIME;
  }

  /**
   * Sets the value of the 'DATIME' field.
   * @param value the value to set.
   */
  public void setDATIME(java.lang.Long value) {
    this.DATIME = value;
  }

  /**
   * Gets the value of the 'DECONT' field.
   * @return The value of the 'DECONT' field.
   */
  public java.lang.CharSequence getDECONT() {
    return DECONT;
  }

  /**
   * Sets the value of the 'DECONT' field.
   * @param value the value to set.
   */
  public void setDECONT(java.lang.CharSequence value) {
    this.DECONT = value;
  }

  /**
   * Gets the value of the 'TRIAGERED' field.
   * @return The value of the 'TRIAGERED' field.
   */
  public java.lang.CharSequence getTRIAGERED() {
    return TRIAGERED;
  }

  /**
   * Sets the value of the 'TRIAGERED' field.
   * @param value the value to set.
   */
  public void setTRIAGERED(java.lang.CharSequence value) {
    this.TRIAGERED = value;
  }

  /**
   * Gets the value of the 'TRIAGEYELLOW' field.
   * @return The value of the 'TRIAGEYELLOW' field.
   */
  public java.lang.CharSequence getTRIAGEYELLOW() {
    return TRIAGEYELLOW;
  }

  /**
   * Sets the value of the 'TRIAGEYELLOW' field.
   * @param value the value to set.
   */
  public void setTRIAGEYELLOW(java.lang.CharSequence value) {
    this.TRIAGEYELLOW = value;
  }

  /**
   * Gets the value of the 'TRIAGEGREEN' field.
   * @return The value of the 'TRIAGEGREEN' field.
   */
  public java.lang.CharSequence getTRIAGEGREEN() {
    return TRIAGEGREEN;
  }

  /**
   * Sets the value of the 'TRIAGEGREEN' field.
   * @param value the value to set.
   */
  public void setTRIAGEGREEN(java.lang.CharSequence value) {
    this.TRIAGEGREEN = value;
  }

  /**
   * Gets the value of the 'TRIAGEBLACK' field.
   * @return The value of the 'TRIAGEBLACK' field.
   */
  public java.lang.CharSequence getTRIAGEBLACK() {
    return TRIAGEBLACK;
  }

  /**
   * Sets the value of the 'TRIAGEBLACK' field.
   * @param value the value to set.
   */
  public void setTRIAGEBLACK(java.lang.CharSequence value) {
    this.TRIAGEBLACK = value;
  }

  /**
   * Gets the value of the 'MISSING' field.
   * @return The value of the 'MISSING' field.
   */
  public java.lang.CharSequence getMISSING() {
    return MISSING;
  }

  /**
   * Sets the value of the 'MISSING' field.
   * @param value the value to set.
   */
  public void setMISSING(java.lang.CharSequence value) {
    this.MISSING = value;
  }

  /**
   * Creates a new CASUALTIESEVENT RecordBuilder.
   * @return A new CASUALTIESEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.CASUALTIESEVENT.Builder newBuilder() {
    return new eu.driver.model.emsi.CASUALTIESEVENT.Builder();
  }

  /**
   * Creates a new CASUALTIESEVENT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CASUALTIESEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.CASUALTIESEVENT.Builder newBuilder(eu.driver.model.emsi.CASUALTIESEVENT.Builder other) {
    return new eu.driver.model.emsi.CASUALTIESEVENT.Builder(other);
  }

  /**
   * Creates a new CASUALTIESEVENT RecordBuilder by copying an existing CASUALTIESEVENT instance.
   * @param other The existing instance to copy.
   * @return A new CASUALTIESEVENT RecordBuilder
   */
  public static eu.driver.model.emsi.CASUALTIESEVENT.Builder newBuilder(eu.driver.model.emsi.CASUALTIESEVENT other) {
    return new eu.driver.model.emsi.CASUALTIESEVENT.Builder(other);
  }

  /**
   * RecordBuilder for CASUALTIESEVENT instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CASUALTIESEVENT>
    implements org.apache.avro.data.RecordBuilder<CASUALTIESEVENT> {

    private java.lang.CharSequence CONTEXT;
    private java.lang.Long DATIME;
    private java.lang.CharSequence DECONT;
    private java.lang.CharSequence TRIAGERED;
    private java.lang.CharSequence TRIAGEYELLOW;
    private java.lang.CharSequence TRIAGEGREEN;
    private java.lang.CharSequence TRIAGEBLACK;
    private java.lang.CharSequence MISSING;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.CASUALTIESEVENT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CONTEXT)) {
        this.CONTEXT = data().deepCopy(fields()[0].schema(), other.CONTEXT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[1].schema(), other.DATIME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DECONT)) {
        this.DECONT = data().deepCopy(fields()[2].schema(), other.DECONT);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TRIAGERED)) {
        this.TRIAGERED = data().deepCopy(fields()[3].schema(), other.TRIAGERED);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.TRIAGEYELLOW)) {
        this.TRIAGEYELLOW = data().deepCopy(fields()[4].schema(), other.TRIAGEYELLOW);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TRIAGEGREEN)) {
        this.TRIAGEGREEN = data().deepCopy(fields()[5].schema(), other.TRIAGEGREEN);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TRIAGEBLACK)) {
        this.TRIAGEBLACK = data().deepCopy(fields()[6].schema(), other.TRIAGEBLACK);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.MISSING)) {
        this.MISSING = data().deepCopy(fields()[7].schema(), other.MISSING);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CASUALTIESEVENT instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.CASUALTIESEVENT other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CONTEXT)) {
        this.CONTEXT = data().deepCopy(fields()[0].schema(), other.CONTEXT);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[1].schema(), other.DATIME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DECONT)) {
        this.DECONT = data().deepCopy(fields()[2].schema(), other.DECONT);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TRIAGERED)) {
        this.TRIAGERED = data().deepCopy(fields()[3].schema(), other.TRIAGERED);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.TRIAGEYELLOW)) {
        this.TRIAGEYELLOW = data().deepCopy(fields()[4].schema(), other.TRIAGEYELLOW);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TRIAGEGREEN)) {
        this.TRIAGEGREEN = data().deepCopy(fields()[5].schema(), other.TRIAGEGREEN);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TRIAGEBLACK)) {
        this.TRIAGEBLACK = data().deepCopy(fields()[6].schema(), other.TRIAGEBLACK);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.MISSING)) {
        this.MISSING = data().deepCopy(fields()[7].schema(), other.MISSING);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'CONTEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getCONTEXT() {
      return CONTEXT;
    }

    /**
      * Sets the value of the 'CONTEXT' field.
      * @param value The value of 'CONTEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setCONTEXT(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CONTEXT = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CONTEXT' field has been set.
      * @return True if the 'CONTEXT' field has been set, false otherwise.
      */
    public boolean hasCONTEXT() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CONTEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearCONTEXT() {
      CONTEXT = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'DATIME' field.
      * @return The value.
      */
    public java.lang.Long getDATIME() {
      return DATIME;
    }

    /**
      * Sets the value of the 'DATIME' field.
      * @param value The value of 'DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setDATIME(java.lang.Long value) {
      validate(fields()[1], value);
      this.DATIME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'DATIME' field has been set.
      * @return True if the 'DATIME' field has been set, false otherwise.
      */
    public boolean hasDATIME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearDATIME() {
      DATIME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'DECONT' field.
      * @return The value.
      */
    public java.lang.CharSequence getDECONT() {
      return DECONT;
    }

    /**
      * Sets the value of the 'DECONT' field.
      * @param value The value of 'DECONT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setDECONT(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.DECONT = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'DECONT' field has been set.
      * @return True if the 'DECONT' field has been set, false otherwise.
      */
    public boolean hasDECONT() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'DECONT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearDECONT() {
      DECONT = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TRIAGERED' field.
      * @return The value.
      */
    public java.lang.CharSequence getTRIAGERED() {
      return TRIAGERED;
    }

    /**
      * Sets the value of the 'TRIAGERED' field.
      * @param value The value of 'TRIAGERED'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setTRIAGERED(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.TRIAGERED = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TRIAGERED' field has been set.
      * @return True if the 'TRIAGERED' field has been set, false otherwise.
      */
    public boolean hasTRIAGERED() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TRIAGERED' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearTRIAGERED() {
      TRIAGERED = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'TRIAGEYELLOW' field.
      * @return The value.
      */
    public java.lang.CharSequence getTRIAGEYELLOW() {
      return TRIAGEYELLOW;
    }

    /**
      * Sets the value of the 'TRIAGEYELLOW' field.
      * @param value The value of 'TRIAGEYELLOW'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setTRIAGEYELLOW(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.TRIAGEYELLOW = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'TRIAGEYELLOW' field has been set.
      * @return True if the 'TRIAGEYELLOW' field has been set, false otherwise.
      */
    public boolean hasTRIAGEYELLOW() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'TRIAGEYELLOW' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearTRIAGEYELLOW() {
      TRIAGEYELLOW = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'TRIAGEGREEN' field.
      * @return The value.
      */
    public java.lang.CharSequence getTRIAGEGREEN() {
      return TRIAGEGREEN;
    }

    /**
      * Sets the value of the 'TRIAGEGREEN' field.
      * @param value The value of 'TRIAGEGREEN'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setTRIAGEGREEN(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.TRIAGEGREEN = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'TRIAGEGREEN' field has been set.
      * @return True if the 'TRIAGEGREEN' field has been set, false otherwise.
      */
    public boolean hasTRIAGEGREEN() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'TRIAGEGREEN' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearTRIAGEGREEN() {
      TRIAGEGREEN = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'TRIAGEBLACK' field.
      * @return The value.
      */
    public java.lang.CharSequence getTRIAGEBLACK() {
      return TRIAGEBLACK;
    }

    /**
      * Sets the value of the 'TRIAGEBLACK' field.
      * @param value The value of 'TRIAGEBLACK'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setTRIAGEBLACK(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.TRIAGEBLACK = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'TRIAGEBLACK' field has been set.
      * @return True if the 'TRIAGEBLACK' field has been set, false otherwise.
      */
    public boolean hasTRIAGEBLACK() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'TRIAGEBLACK' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearTRIAGEBLACK() {
      TRIAGEBLACK = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'MISSING' field.
      * @return The value.
      */
    public java.lang.CharSequence getMISSING() {
      return MISSING;
    }

    /**
      * Sets the value of the 'MISSING' field.
      * @param value The value of 'MISSING'.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder setMISSING(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.MISSING = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'MISSING' field has been set.
      * @return True if the 'MISSING' field has been set, false otherwise.
      */
    public boolean hasMISSING() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'MISSING' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.CASUALTIESEVENT.Builder clearMISSING() {
      MISSING = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CASUALTIESEVENT build() {
      try {
        CASUALTIESEVENT record = new CASUALTIESEVENT();
        record.CONTEXT = fieldSetFlags()[0] ? this.CONTEXT : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.DATIME = fieldSetFlags()[1] ? this.DATIME : (java.lang.Long) defaultValue(fields()[1]);
        record.DECONT = fieldSetFlags()[2] ? this.DECONT : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.TRIAGERED = fieldSetFlags()[3] ? this.TRIAGERED : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.TRIAGEYELLOW = fieldSetFlags()[4] ? this.TRIAGEYELLOW : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.TRIAGEGREEN = fieldSetFlags()[5] ? this.TRIAGEGREEN : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.TRIAGEBLACK = fieldSetFlags()[6] ? this.TRIAGEBLACK : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.MISSING = fieldSetFlags()[7] ? this.MISSING : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CASUALTIESEVENT>
    WRITER$ = (org.apache.avro.io.DatumWriter<CASUALTIESEVENT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CASUALTIESEVENT>
    READER$ = (org.apache.avro.io.DatumReader<CASUALTIESEVENT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
