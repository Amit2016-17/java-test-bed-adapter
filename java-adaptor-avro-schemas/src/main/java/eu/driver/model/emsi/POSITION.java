/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class POSITION extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5546019491251037888L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"POSITION\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"LOC_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element LOC_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"},{\"name\":\"COORDSYS\",\"type\":[\"null\",\"string\"],\"source\":\"element COORDSYS\"},{\"name\":\"COORD\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"COORDType\",\"fields\":[{\"name\":\"LAT\",\"type\":\"double\",\"source\":\"element LAT\"},{\"name\":\"LON\",\"type\":\"double\",\"source\":\"element LON\"},{\"name\":\"HEIGHT\",\"type\":[\"null\",\"double\"],\"source\":\"element HEIGHT\"}]}},\"source\":\"element COORD\"},{\"name\":\"HEIGHT_ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element HEIGHT_ROLE\"},{\"name\":\"ADDRESS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ADDRESS\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<POSITION> ENCODER =
      new BinaryMessageEncoder<POSITION>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<POSITION> DECODER =
      new BinaryMessageDecoder<POSITION>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<POSITION> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<POSITION> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<POSITION>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this POSITION to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a POSITION from a ByteBuffer. */
  public static POSITION fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence LOC_ID;
  @Deprecated public java.lang.CharSequence NAME;
  @Deprecated public java.lang.CharSequence TYPE;
  @Deprecated public java.lang.CharSequence COORDSYS;
  @Deprecated public java.util.List<eu.driver.model.emsi.COORDType> COORD;
  @Deprecated public java.lang.CharSequence HEIGHT_ROLE;
  @Deprecated public java.util.List<java.lang.CharSequence> ADDRESS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public POSITION() {}

  /**
   * All-args constructor.
   * @param LOC_ID The new value for LOC_ID
   * @param NAME The new value for NAME
   * @param TYPE The new value for TYPE
   * @param COORDSYS The new value for COORDSYS
   * @param COORD The new value for COORD
   * @param HEIGHT_ROLE The new value for HEIGHT_ROLE
   * @param ADDRESS The new value for ADDRESS
   */
  public POSITION(java.lang.CharSequence LOC_ID, java.lang.CharSequence NAME, java.lang.CharSequence TYPE, java.lang.CharSequence COORDSYS, java.util.List<eu.driver.model.emsi.COORDType> COORD, java.lang.CharSequence HEIGHT_ROLE, java.util.List<java.lang.CharSequence> ADDRESS) {
    this.LOC_ID = LOC_ID;
    this.NAME = NAME;
    this.TYPE = TYPE;
    this.COORDSYS = COORDSYS;
    this.COORD = COORD;
    this.HEIGHT_ROLE = HEIGHT_ROLE;
    this.ADDRESS = ADDRESS;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return LOC_ID;
    case 1: return NAME;
    case 2: return TYPE;
    case 3: return COORDSYS;
    case 4: return COORD;
    case 5: return HEIGHT_ROLE;
    case 6: return ADDRESS;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: LOC_ID = (java.lang.CharSequence)value$; break;
    case 1: NAME = (java.lang.CharSequence)value$; break;
    case 2: TYPE = (java.lang.CharSequence)value$; break;
    case 3: COORDSYS = (java.lang.CharSequence)value$; break;
    case 4: COORD = (java.util.List<eu.driver.model.emsi.COORDType>)value$; break;
    case 5: HEIGHT_ROLE = (java.lang.CharSequence)value$; break;
    case 6: ADDRESS = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'LOC_ID' field.
   * @return The value of the 'LOC_ID' field.
   */
  public java.lang.CharSequence getLOCID() {
    return LOC_ID;
  }

  /**
   * Sets the value of the 'LOC_ID' field.
   * @param value the value to set.
   */
  public void setLOCID(java.lang.CharSequence value) {
    this.LOC_ID = value;
  }

  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public java.lang.CharSequence getNAME() {
    return NAME;
  }

  /**
   * Sets the value of the 'NAME' field.
   * @param value the value to set.
   */
  public void setNAME(java.lang.CharSequence value) {
    this.NAME = value;
  }

  /**
   * Gets the value of the 'TYPE' field.
   * @return The value of the 'TYPE' field.
   */
  public java.lang.CharSequence getTYPE() {
    return TYPE;
  }

  /**
   * Sets the value of the 'TYPE' field.
   * @param value the value to set.
   */
  public void setTYPE(java.lang.CharSequence value) {
    this.TYPE = value;
  }

  /**
   * Gets the value of the 'COORDSYS' field.
   * @return The value of the 'COORDSYS' field.
   */
  public java.lang.CharSequence getCOORDSYS() {
    return COORDSYS;
  }

  /**
   * Sets the value of the 'COORDSYS' field.
   * @param value the value to set.
   */
  public void setCOORDSYS(java.lang.CharSequence value) {
    this.COORDSYS = value;
  }

  /**
   * Gets the value of the 'COORD' field.
   * @return The value of the 'COORD' field.
   */
  public java.util.List<eu.driver.model.emsi.COORDType> getCOORD() {
    return COORD;
  }

  /**
   * Sets the value of the 'COORD' field.
   * @param value the value to set.
   */
  public void setCOORD(java.util.List<eu.driver.model.emsi.COORDType> value) {
    this.COORD = value;
  }

  /**
   * Gets the value of the 'HEIGHT_ROLE' field.
   * @return The value of the 'HEIGHT_ROLE' field.
   */
  public java.lang.CharSequence getHEIGHTROLE() {
    return HEIGHT_ROLE;
  }

  /**
   * Sets the value of the 'HEIGHT_ROLE' field.
   * @param value the value to set.
   */
  public void setHEIGHTROLE(java.lang.CharSequence value) {
    this.HEIGHT_ROLE = value;
  }

  /**
   * Gets the value of the 'ADDRESS' field.
   * @return The value of the 'ADDRESS' field.
   */
  public java.util.List<java.lang.CharSequence> getADDRESS() {
    return ADDRESS;
  }

  /**
   * Sets the value of the 'ADDRESS' field.
   * @param value the value to set.
   */
  public void setADDRESS(java.util.List<java.lang.CharSequence> value) {
    this.ADDRESS = value;
  }

  /**
   * Creates a new POSITION RecordBuilder.
   * @return A new POSITION RecordBuilder
   */
  public static eu.driver.model.emsi.POSITION.Builder newBuilder() {
    return new eu.driver.model.emsi.POSITION.Builder();
  }

  /**
   * Creates a new POSITION RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new POSITION RecordBuilder
   */
  public static eu.driver.model.emsi.POSITION.Builder newBuilder(eu.driver.model.emsi.POSITION.Builder other) {
    return new eu.driver.model.emsi.POSITION.Builder(other);
  }

  /**
   * Creates a new POSITION RecordBuilder by copying an existing POSITION instance.
   * @param other The existing instance to copy.
   * @return A new POSITION RecordBuilder
   */
  public static eu.driver.model.emsi.POSITION.Builder newBuilder(eu.driver.model.emsi.POSITION other) {
    return new eu.driver.model.emsi.POSITION.Builder(other);
  }

  /**
   * RecordBuilder for POSITION instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<POSITION>
    implements org.apache.avro.data.RecordBuilder<POSITION> {

    private java.lang.CharSequence LOC_ID;
    private java.lang.CharSequence NAME;
    private java.lang.CharSequence TYPE;
    private java.lang.CharSequence COORDSYS;
    private java.util.List<eu.driver.model.emsi.COORDType> COORD;
    private java.lang.CharSequence HEIGHT_ROLE;
    private java.util.List<java.lang.CharSequence> ADDRESS;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.POSITION.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.LOC_ID)) {
        this.LOC_ID = data().deepCopy(fields()[0].schema(), other.LOC_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[2].schema(), other.TYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.COORDSYS)) {
        this.COORDSYS = data().deepCopy(fields()[3].schema(), other.COORDSYS);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COORD)) {
        this.COORD = data().deepCopy(fields()[4].schema(), other.COORD);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.HEIGHT_ROLE)) {
        this.HEIGHT_ROLE = data().deepCopy(fields()[5].schema(), other.HEIGHT_ROLE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[6].schema(), other.ADDRESS);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing POSITION instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.POSITION other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.LOC_ID)) {
        this.LOC_ID = data().deepCopy(fields()[0].schema(), other.LOC_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[2].schema(), other.TYPE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.COORDSYS)) {
        this.COORDSYS = data().deepCopy(fields()[3].schema(), other.COORDSYS);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COORD)) {
        this.COORD = data().deepCopy(fields()[4].schema(), other.COORD);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.HEIGHT_ROLE)) {
        this.HEIGHT_ROLE = data().deepCopy(fields()[5].schema(), other.HEIGHT_ROLE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[6].schema(), other.ADDRESS);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'LOC_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getLOCID() {
      return LOC_ID;
    }

    /**
      * Sets the value of the 'LOC_ID' field.
      * @param value The value of 'LOC_ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setLOCID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.LOC_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'LOC_ID' field has been set.
      * @return True if the 'LOC_ID' field has been set, false otherwise.
      */
    public boolean hasLOCID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'LOC_ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearLOCID() {
      LOC_ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setNAME(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.NAME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearNAME() {
      NAME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TYPE' field.
      * @return The value.
      */
    public java.lang.CharSequence getTYPE() {
      return TYPE;
    }

    /**
      * Sets the value of the 'TYPE' field.
      * @param value The value of 'TYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setTYPE(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.TYPE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TYPE' field has been set.
      * @return True if the 'TYPE' field has been set, false otherwise.
      */
    public boolean hasTYPE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearTYPE() {
      TYPE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'COORDSYS' field.
      * @return The value.
      */
    public java.lang.CharSequence getCOORDSYS() {
      return COORDSYS;
    }

    /**
      * Sets the value of the 'COORDSYS' field.
      * @param value The value of 'COORDSYS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setCOORDSYS(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.COORDSYS = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'COORDSYS' field has been set.
      * @return True if the 'COORDSYS' field has been set, false otherwise.
      */
    public boolean hasCOORDSYS() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'COORDSYS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearCOORDSYS() {
      COORDSYS = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'COORD' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.COORDType> getCOORD() {
      return COORD;
    }

    /**
      * Sets the value of the 'COORD' field.
      * @param value The value of 'COORD'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setCOORD(java.util.List<eu.driver.model.emsi.COORDType> value) {
      validate(fields()[4], value);
      this.COORD = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'COORD' field has been set.
      * @return True if the 'COORD' field has been set, false otherwise.
      */
    public boolean hasCOORD() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'COORD' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearCOORD() {
      COORD = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'HEIGHT_ROLE' field.
      * @return The value.
      */
    public java.lang.CharSequence getHEIGHTROLE() {
      return HEIGHT_ROLE;
    }

    /**
      * Sets the value of the 'HEIGHT_ROLE' field.
      * @param value The value of 'HEIGHT_ROLE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setHEIGHTROLE(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.HEIGHT_ROLE = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'HEIGHT_ROLE' field has been set.
      * @return True if the 'HEIGHT_ROLE' field has been set, false otherwise.
      */
    public boolean hasHEIGHTROLE() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'HEIGHT_ROLE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearHEIGHTROLE() {
      HEIGHT_ROLE = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ADDRESS' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getADDRESS() {
      return ADDRESS;
    }

    /**
      * Sets the value of the 'ADDRESS' field.
      * @param value The value of 'ADDRESS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder setADDRESS(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.ADDRESS = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ADDRESS' field has been set.
      * @return True if the 'ADDRESS' field has been set, false otherwise.
      */
    public boolean hasADDRESS() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ADDRESS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.POSITION.Builder clearADDRESS() {
      ADDRESS = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public POSITION build() {
      try {
        POSITION record = new POSITION();
        record.LOC_ID = fieldSetFlags()[0] ? this.LOC_ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.NAME = fieldSetFlags()[1] ? this.NAME : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.TYPE = fieldSetFlags()[2] ? this.TYPE : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.COORDSYS = fieldSetFlags()[3] ? this.COORDSYS : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.COORD = fieldSetFlags()[4] ? this.COORD : (java.util.List<eu.driver.model.emsi.COORDType>) defaultValue(fields()[4]);
        record.HEIGHT_ROLE = fieldSetFlags()[5] ? this.HEIGHT_ROLE : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ADDRESS = fieldSetFlags()[6] ? this.ADDRESS : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<POSITION>
    WRITER$ = (org.apache.avro.io.DatumWriter<POSITION>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<POSITION>
    READER$ = (org.apache.avro.io.DatumReader<POSITION>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
