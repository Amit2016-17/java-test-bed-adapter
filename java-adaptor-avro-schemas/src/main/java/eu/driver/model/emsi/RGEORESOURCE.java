/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RGEORESOURCE extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2339958337173466290L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RGEORESOURCE\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"TYPE\",\"type\":\"string\",\"source\":\"element TYPE\"},{\"name\":\"POSITION\",\"type\":{\"type\":\"record\",\"name\":\"POSITION\",\"fields\":[{\"name\":\"LOC_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element LOC_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"},{\"name\":\"COORDSYS\",\"type\":[\"null\",\"string\"],\"source\":\"element COORDSYS\"},{\"name\":\"COORD\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"COORDType\",\"fields\":[{\"name\":\"LAT\",\"type\":\"double\",\"source\":\"element LAT\"},{\"name\":\"LON\",\"type\":\"double\",\"source\":\"element LON\"},{\"name\":\"HEIGHT\",\"type\":[\"null\",\"double\"],\"source\":\"element HEIGHT\"}]}},\"source\":\"element COORD\"},{\"name\":\"HEIGHT_ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element HEIGHT_ROLE\"},{\"name\":\"ADDRESS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ADDRESS\"}]},\"source\":\"element POSITION\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"ID\",\"type\":[\"null\",\"string\"],\"source\":\"element ID\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RGEORESOURCE> ENCODER =
      new BinaryMessageEncoder<RGEORESOURCE>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RGEORESOURCE> DECODER =
      new BinaryMessageDecoder<RGEORESOURCE>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RGEORESOURCE> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RGEORESOURCE> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RGEORESOURCE>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RGEORESOURCE to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RGEORESOURCE from a ByteBuffer. */
  public static RGEORESOURCE fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long DATIME;
  @Deprecated public java.lang.CharSequence TYPE;
  @Deprecated public eu.driver.model.emsi.POSITION POSITION;
  @Deprecated public java.lang.CharSequence FREETEXT;
  @Deprecated public java.lang.CharSequence ID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RGEORESOURCE() {}

  /**
   * All-args constructor.
   * @param DATIME The new value for DATIME
   * @param TYPE The new value for TYPE
   * @param POSITION The new value for POSITION
   * @param FREETEXT The new value for FREETEXT
   * @param ID The new value for ID
   */
  public RGEORESOURCE(java.lang.Long DATIME, java.lang.CharSequence TYPE, eu.driver.model.emsi.POSITION POSITION, java.lang.CharSequence FREETEXT, java.lang.CharSequence ID) {
    this.DATIME = DATIME;
    this.TYPE = TYPE;
    this.POSITION = POSITION;
    this.FREETEXT = FREETEXT;
    this.ID = ID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DATIME;
    case 1: return TYPE;
    case 2: return POSITION;
    case 3: return FREETEXT;
    case 4: return ID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DATIME = (java.lang.Long)value$; break;
    case 1: TYPE = (java.lang.CharSequence)value$; break;
    case 2: POSITION = (eu.driver.model.emsi.POSITION)value$; break;
    case 3: FREETEXT = (java.lang.CharSequence)value$; break;
    case 4: ID = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'DATIME' field.
   * @return The value of the 'DATIME' field.
   */
  public java.lang.Long getDATIME() {
    return DATIME;
  }

  /**
   * Sets the value of the 'DATIME' field.
   * @param value the value to set.
   */
  public void setDATIME(java.lang.Long value) {
    this.DATIME = value;
  }

  /**
   * Gets the value of the 'TYPE' field.
   * @return The value of the 'TYPE' field.
   */
  public java.lang.CharSequence getTYPE() {
    return TYPE;
  }

  /**
   * Sets the value of the 'TYPE' field.
   * @param value the value to set.
   */
  public void setTYPE(java.lang.CharSequence value) {
    this.TYPE = value;
  }

  /**
   * Gets the value of the 'POSITION' field.
   * @return The value of the 'POSITION' field.
   */
  public eu.driver.model.emsi.POSITION getPOSITION() {
    return POSITION;
  }

  /**
   * Sets the value of the 'POSITION' field.
   * @param value the value to set.
   */
  public void setPOSITION(eu.driver.model.emsi.POSITION value) {
    this.POSITION = value;
  }

  /**
   * Gets the value of the 'FREETEXT' field.
   * @return The value of the 'FREETEXT' field.
   */
  public java.lang.CharSequence getFREETEXT() {
    return FREETEXT;
  }

  /**
   * Sets the value of the 'FREETEXT' field.
   * @param value the value to set.
   */
  public void setFREETEXT(java.lang.CharSequence value) {
    this.FREETEXT = value;
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Creates a new RGEORESOURCE RecordBuilder.
   * @return A new RGEORESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RGEORESOURCE.Builder newBuilder() {
    return new eu.driver.model.emsi.RGEORESOURCE.Builder();
  }

  /**
   * Creates a new RGEORESOURCE RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RGEORESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RGEORESOURCE.Builder newBuilder(eu.driver.model.emsi.RGEORESOURCE.Builder other) {
    return new eu.driver.model.emsi.RGEORESOURCE.Builder(other);
  }

  /**
   * Creates a new RGEORESOURCE RecordBuilder by copying an existing RGEORESOURCE instance.
   * @param other The existing instance to copy.
   * @return A new RGEORESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RGEORESOURCE.Builder newBuilder(eu.driver.model.emsi.RGEORESOURCE other) {
    return new eu.driver.model.emsi.RGEORESOURCE.Builder(other);
  }

  /**
   * RecordBuilder for RGEORESOURCE instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RGEORESOURCE>
    implements org.apache.avro.data.RecordBuilder<RGEORESOURCE> {

    private java.lang.Long DATIME;
    private java.lang.CharSequence TYPE;
    private eu.driver.model.emsi.POSITION POSITION;
    private eu.driver.model.emsi.POSITION.Builder POSITIONBuilder;
    private java.lang.CharSequence FREETEXT;
    private java.lang.CharSequence ID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.RGEORESOURCE.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[0].schema(), other.DATIME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[1].schema(), other.TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.POSITION)) {
        this.POSITION = data().deepCopy(fields()[2].schema(), other.POSITION);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPOSITIONBuilder()) {
        this.POSITIONBuilder = eu.driver.model.emsi.POSITION.newBuilder(other.getPOSITIONBuilder());
      }
      if (isValidValue(fields()[3], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[3].schema(), other.FREETEXT);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ID)) {
        this.ID = data().deepCopy(fields()[4].schema(), other.ID);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RGEORESOURCE instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.RGEORESOURCE other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.DATIME)) {
        this.DATIME = data().deepCopy(fields()[0].schema(), other.DATIME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TYPE)) {
        this.TYPE = data().deepCopy(fields()[1].schema(), other.TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.POSITION)) {
        this.POSITION = data().deepCopy(fields()[2].schema(), other.POSITION);
        fieldSetFlags()[2] = true;
      }
      this.POSITIONBuilder = null;
      if (isValidValue(fields()[3], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[3].schema(), other.FREETEXT);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ID)) {
        this.ID = data().deepCopy(fields()[4].schema(), other.ID);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'DATIME' field.
      * @return The value.
      */
    public java.lang.Long getDATIME() {
      return DATIME;
    }

    /**
      * Sets the value of the 'DATIME' field.
      * @param value The value of 'DATIME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setDATIME(java.lang.Long value) {
      validate(fields()[0], value);
      this.DATIME = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'DATIME' field has been set.
      * @return True if the 'DATIME' field has been set, false otherwise.
      */
    public boolean hasDATIME() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'DATIME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder clearDATIME() {
      DATIME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'TYPE' field.
      * @return The value.
      */
    public java.lang.CharSequence getTYPE() {
      return TYPE;
    }

    /**
      * Sets the value of the 'TYPE' field.
      * @param value The value of 'TYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setTYPE(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.TYPE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'TYPE' field has been set.
      * @return True if the 'TYPE' field has been set, false otherwise.
      */
    public boolean hasTYPE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'TYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder clearTYPE() {
      TYPE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'POSITION' field.
      * @return The value.
      */
    public eu.driver.model.emsi.POSITION getPOSITION() {
      return POSITION;
    }

    /**
      * Sets the value of the 'POSITION' field.
      * @param value The value of 'POSITION'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setPOSITION(eu.driver.model.emsi.POSITION value) {
      validate(fields()[2], value);
      this.POSITIONBuilder = null;
      this.POSITION = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'POSITION' field has been set.
      * @return True if the 'POSITION' field has been set, false otherwise.
      */
    public boolean hasPOSITION() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'POSITION' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.emsi.POSITION.Builder getPOSITIONBuilder() {
      if (POSITIONBuilder == null) {
        if (hasPOSITION()) {
          setPOSITIONBuilder(eu.driver.model.emsi.POSITION.newBuilder(POSITION));
        } else {
          setPOSITIONBuilder(eu.driver.model.emsi.POSITION.newBuilder());
        }
      }
      return POSITIONBuilder;
    }

    /**
     * Sets the Builder instance for the 'POSITION' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setPOSITIONBuilder(eu.driver.model.emsi.POSITION.Builder value) {
      clearPOSITION();
      POSITIONBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'POSITION' field has an active Builder instance
     * @return True if the 'POSITION' field has an active Builder instance
     */
    public boolean hasPOSITIONBuilder() {
      return POSITIONBuilder != null;
    }

    /**
      * Clears the value of the 'POSITION' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder clearPOSITION() {
      POSITION = null;
      POSITIONBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'FREETEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getFREETEXT() {
      return FREETEXT;
    }

    /**
      * Sets the value of the 'FREETEXT' field.
      * @param value The value of 'FREETEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setFREETEXT(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.FREETEXT = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'FREETEXT' field has been set.
      * @return True if the 'FREETEXT' field has been set, false otherwise.
      */
    public boolean hasFREETEXT() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'FREETEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder clearFREETEXT() {
      FREETEXT = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder setID(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RGEORESOURCE.Builder clearID() {
      ID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RGEORESOURCE build() {
      try {
        RGEORESOURCE record = new RGEORESOURCE();
        record.DATIME = fieldSetFlags()[0] ? this.DATIME : (java.lang.Long) defaultValue(fields()[0]);
        record.TYPE = fieldSetFlags()[1] ? this.TYPE : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (POSITIONBuilder != null) {
          record.POSITION = this.POSITIONBuilder.build();
        } else {
          record.POSITION = fieldSetFlags()[2] ? this.POSITION : (eu.driver.model.emsi.POSITION) defaultValue(fields()[2]);
        }
        record.FREETEXT = fieldSetFlags()[3] ? this.FREETEXT : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.ID = fieldSetFlags()[4] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RGEORESOURCE>
    WRITER$ = (org.apache.avro.io.DatumWriter<RGEORESOURCE>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RGEORESOURCE>
    READER$ = (org.apache.avro.io.DatumReader<RGEORESOURCE>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
