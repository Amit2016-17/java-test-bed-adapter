/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.emsi;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RESOURCE extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5410866725183414763L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RESOURCE\",\"namespace\":\"eu.driver.model.emsi\",\"fields\":[{\"name\":\"RTYPE\",\"type\":{\"type\":\"record\",\"name\":\"RTYPERESOURCE\",\"fields\":[{\"name\":\"CLASS\",\"type\":\"string\",\"source\":\"element CLASS\"},{\"name\":\"CAPABILITY\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CAPABILITY\"},{\"name\":\"CHARACTERISTICS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element CHARACTERISTICS\"}]},\"source\":\"element RTYPE\"},{\"name\":\"ID\",\"type\":[\"null\",\"string\"],\"source\":\"element ID\"},{\"name\":\"ORG_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element ORG_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"RGEO\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RGEORESOURCE\",\"fields\":[{\"name\":\"DATIME\",\"type\":[\"null\",\"long\"],\"source\":\"element DATIME\"},{\"name\":\"TYPE\",\"type\":\"string\",\"source\":\"element TYPE\"},{\"name\":\"POSITION\",\"type\":{\"type\":\"record\",\"name\":\"POSITION\",\"fields\":[{\"name\":\"LOC_ID\",\"type\":[\"null\",\"string\"],\"source\":\"element LOC_ID\"},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"source\":\"element NAME\"},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"source\":\"element TYPE\"},{\"name\":\"COORDSYS\",\"type\":[\"null\",\"string\"],\"source\":\"element COORDSYS\"},{\"name\":\"COORD\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"COORDType\",\"fields\":[{\"name\":\"LAT\",\"type\":\"double\",\"source\":\"element LAT\"},{\"name\":\"LON\",\"type\":\"double\",\"source\":\"element LON\"},{\"name\":\"HEIGHT\",\"type\":[\"null\",\"double\"],\"source\":\"element HEIGHT\"}]}},\"source\":\"element COORD\"},{\"name\":\"HEIGHT_ROLE\",\"type\":[\"null\",\"string\"],\"source\":\"element HEIGHT_ROLE\"},{\"name\":\"ADDRESS\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element ADDRESS\"}]},\"source\":\"element POSITION\"},{\"name\":\"FREETEXT\",\"type\":[\"null\",\"string\"],\"source\":\"element FREETEXT\"},{\"name\":\"ID\",\"type\":[\"null\",\"string\"],\"source\":\"element ID\"}]}},\"source\":\"element RGEO\"},{\"name\":\"QUANTITY\",\"type\":[\"null\",\"double\"],\"source\":\"element QUANTITY\"},{\"name\":\"UM\",\"type\":[\"null\",\"string\"],\"source\":\"element UM\"},{\"name\":\"STATUS\",\"type\":[\"null\",\"string\"],\"source\":\"element STATUS\"},{\"name\":\"NATIONALITY\",\"type\":[\"null\",\"string\"],\"source\":\"element NATIONALITY\"},{\"name\":\"CONTACT\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CONTACTRESOURCE\",\"fields\":[{\"name\":\"TYPE\",\"type\":\"string\",\"source\":\"element TYPE\"},{\"name\":\"DETAIL\",\"type\":\"string\",\"source\":\"element DETAIL\"}]}},\"source\":\"element CONTACT\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RESOURCE> ENCODER =
      new BinaryMessageEncoder<RESOURCE>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RESOURCE> DECODER =
      new BinaryMessageDecoder<RESOURCE>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RESOURCE> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RESOURCE> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RESOURCE>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RESOURCE to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RESOURCE from a ByteBuffer. */
  public static RESOURCE fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.emsi.RTYPERESOURCE RTYPE;
  @Deprecated public java.lang.CharSequence ID;
  @Deprecated public java.lang.CharSequence ORG_ID;
  @Deprecated public java.lang.CharSequence NAME;
  @Deprecated public java.lang.CharSequence FREETEXT;
  @Deprecated public java.util.List<eu.driver.model.emsi.RGEORESOURCE> RGEO;
  @Deprecated public java.lang.Double QUANTITY;
  @Deprecated public java.lang.CharSequence UM;
  @Deprecated public java.lang.CharSequence STATUS;
  @Deprecated public java.lang.CharSequence NATIONALITY;
  @Deprecated public java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> CONTACT;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RESOURCE() {}

  /**
   * All-args constructor.
   * @param RTYPE The new value for RTYPE
   * @param ID The new value for ID
   * @param ORG_ID The new value for ORG_ID
   * @param NAME The new value for NAME
   * @param FREETEXT The new value for FREETEXT
   * @param RGEO The new value for RGEO
   * @param QUANTITY The new value for QUANTITY
   * @param UM The new value for UM
   * @param STATUS The new value for STATUS
   * @param NATIONALITY The new value for NATIONALITY
   * @param CONTACT The new value for CONTACT
   */
  public RESOURCE(eu.driver.model.emsi.RTYPERESOURCE RTYPE, java.lang.CharSequence ID, java.lang.CharSequence ORG_ID, java.lang.CharSequence NAME, java.lang.CharSequence FREETEXT, java.util.List<eu.driver.model.emsi.RGEORESOURCE> RGEO, java.lang.Double QUANTITY, java.lang.CharSequence UM, java.lang.CharSequence STATUS, java.lang.CharSequence NATIONALITY, java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> CONTACT) {
    this.RTYPE = RTYPE;
    this.ID = ID;
    this.ORG_ID = ORG_ID;
    this.NAME = NAME;
    this.FREETEXT = FREETEXT;
    this.RGEO = RGEO;
    this.QUANTITY = QUANTITY;
    this.UM = UM;
    this.STATUS = STATUS;
    this.NATIONALITY = NATIONALITY;
    this.CONTACT = CONTACT;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return RTYPE;
    case 1: return ID;
    case 2: return ORG_ID;
    case 3: return NAME;
    case 4: return FREETEXT;
    case 5: return RGEO;
    case 6: return QUANTITY;
    case 7: return UM;
    case 8: return STATUS;
    case 9: return NATIONALITY;
    case 10: return CONTACT;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: RTYPE = (eu.driver.model.emsi.RTYPERESOURCE)value$; break;
    case 1: ID = (java.lang.CharSequence)value$; break;
    case 2: ORG_ID = (java.lang.CharSequence)value$; break;
    case 3: NAME = (java.lang.CharSequence)value$; break;
    case 4: FREETEXT = (java.lang.CharSequence)value$; break;
    case 5: RGEO = (java.util.List<eu.driver.model.emsi.RGEORESOURCE>)value$; break;
    case 6: QUANTITY = (java.lang.Double)value$; break;
    case 7: UM = (java.lang.CharSequence)value$; break;
    case 8: STATUS = (java.lang.CharSequence)value$; break;
    case 9: NATIONALITY = (java.lang.CharSequence)value$; break;
    case 10: CONTACT = (java.util.List<eu.driver.model.emsi.CONTACTRESOURCE>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'RTYPE' field.
   * @return The value of the 'RTYPE' field.
   */
  public eu.driver.model.emsi.RTYPERESOURCE getRTYPE() {
    return RTYPE;
  }

  /**
   * Sets the value of the 'RTYPE' field.
   * @param value the value to set.
   */
  public void setRTYPE(eu.driver.model.emsi.RTYPERESOURCE value) {
    this.RTYPE = value;
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'ORG_ID' field.
   * @return The value of the 'ORG_ID' field.
   */
  public java.lang.CharSequence getORGID() {
    return ORG_ID;
  }

  /**
   * Sets the value of the 'ORG_ID' field.
   * @param value the value to set.
   */
  public void setORGID(java.lang.CharSequence value) {
    this.ORG_ID = value;
  }

  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public java.lang.CharSequence getNAME() {
    return NAME;
  }

  /**
   * Sets the value of the 'NAME' field.
   * @param value the value to set.
   */
  public void setNAME(java.lang.CharSequence value) {
    this.NAME = value;
  }

  /**
   * Gets the value of the 'FREETEXT' field.
   * @return The value of the 'FREETEXT' field.
   */
  public java.lang.CharSequence getFREETEXT() {
    return FREETEXT;
  }

  /**
   * Sets the value of the 'FREETEXT' field.
   * @param value the value to set.
   */
  public void setFREETEXT(java.lang.CharSequence value) {
    this.FREETEXT = value;
  }

  /**
   * Gets the value of the 'RGEO' field.
   * @return The value of the 'RGEO' field.
   */
  public java.util.List<eu.driver.model.emsi.RGEORESOURCE> getRGEO() {
    return RGEO;
  }

  /**
   * Sets the value of the 'RGEO' field.
   * @param value the value to set.
   */
  public void setRGEO(java.util.List<eu.driver.model.emsi.RGEORESOURCE> value) {
    this.RGEO = value;
  }

  /**
   * Gets the value of the 'QUANTITY' field.
   * @return The value of the 'QUANTITY' field.
   */
  public java.lang.Double getQUANTITY() {
    return QUANTITY;
  }

  /**
   * Sets the value of the 'QUANTITY' field.
   * @param value the value to set.
   */
  public void setQUANTITY(java.lang.Double value) {
    this.QUANTITY = value;
  }

  /**
   * Gets the value of the 'UM' field.
   * @return The value of the 'UM' field.
   */
  public java.lang.CharSequence getUM() {
    return UM;
  }

  /**
   * Sets the value of the 'UM' field.
   * @param value the value to set.
   */
  public void setUM(java.lang.CharSequence value) {
    this.UM = value;
  }

  /**
   * Gets the value of the 'STATUS' field.
   * @return The value of the 'STATUS' field.
   */
  public java.lang.CharSequence getSTATUS() {
    return STATUS;
  }

  /**
   * Sets the value of the 'STATUS' field.
   * @param value the value to set.
   */
  public void setSTATUS(java.lang.CharSequence value) {
    this.STATUS = value;
  }

  /**
   * Gets the value of the 'NATIONALITY' field.
   * @return The value of the 'NATIONALITY' field.
   */
  public java.lang.CharSequence getNATIONALITY() {
    return NATIONALITY;
  }

  /**
   * Sets the value of the 'NATIONALITY' field.
   * @param value the value to set.
   */
  public void setNATIONALITY(java.lang.CharSequence value) {
    this.NATIONALITY = value;
  }

  /**
   * Gets the value of the 'CONTACT' field.
   * @return The value of the 'CONTACT' field.
   */
  public java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> getCONTACT() {
    return CONTACT;
  }

  /**
   * Sets the value of the 'CONTACT' field.
   * @param value the value to set.
   */
  public void setCONTACT(java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> value) {
    this.CONTACT = value;
  }

  /**
   * Creates a new RESOURCE RecordBuilder.
   * @return A new RESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RESOURCE.Builder newBuilder() {
    return new eu.driver.model.emsi.RESOURCE.Builder();
  }

  /**
   * Creates a new RESOURCE RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RESOURCE.Builder newBuilder(eu.driver.model.emsi.RESOURCE.Builder other) {
    return new eu.driver.model.emsi.RESOURCE.Builder(other);
  }

  /**
   * Creates a new RESOURCE RecordBuilder by copying an existing RESOURCE instance.
   * @param other The existing instance to copy.
   * @return A new RESOURCE RecordBuilder
   */
  public static eu.driver.model.emsi.RESOURCE.Builder newBuilder(eu.driver.model.emsi.RESOURCE other) {
    return new eu.driver.model.emsi.RESOURCE.Builder(other);
  }

  /**
   * RecordBuilder for RESOURCE instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RESOURCE>
    implements org.apache.avro.data.RecordBuilder<RESOURCE> {

    private eu.driver.model.emsi.RTYPERESOURCE RTYPE;
    private eu.driver.model.emsi.RTYPERESOURCE.Builder RTYPEBuilder;
    private java.lang.CharSequence ID;
    private java.lang.CharSequence ORG_ID;
    private java.lang.CharSequence NAME;
    private java.lang.CharSequence FREETEXT;
    private java.util.List<eu.driver.model.emsi.RGEORESOURCE> RGEO;
    private java.lang.Double QUANTITY;
    private java.lang.CharSequence UM;
    private java.lang.CharSequence STATUS;
    private java.lang.CharSequence NATIONALITY;
    private java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> CONTACT;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.emsi.RESOURCE.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.RTYPE)) {
        this.RTYPE = data().deepCopy(fields()[0].schema(), other.RTYPE);
        fieldSetFlags()[0] = true;
      }
      if (other.hasRTYPEBuilder()) {
        this.RTYPEBuilder = eu.driver.model.emsi.RTYPERESOURCE.newBuilder(other.getRTYPEBuilder());
      }
      if (isValidValue(fields()[1], other.ID)) {
        this.ID = data().deepCopy(fields()[1].schema(), other.ID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ORG_ID)) {
        this.ORG_ID = data().deepCopy(fields()[2].schema(), other.ORG_ID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.NAME)) {
        this.NAME = data().deepCopy(fields()[3].schema(), other.NAME);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[4].schema(), other.FREETEXT);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.RGEO)) {
        this.RGEO = data().deepCopy(fields()[5].schema(), other.RGEO);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.QUANTITY)) {
        this.QUANTITY = data().deepCopy(fields()[6].schema(), other.QUANTITY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.UM)) {
        this.UM = data().deepCopy(fields()[7].schema(), other.UM);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.STATUS)) {
        this.STATUS = data().deepCopy(fields()[8].schema(), other.STATUS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.NATIONALITY)) {
        this.NATIONALITY = data().deepCopy(fields()[9].schema(), other.NATIONALITY);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.CONTACT)) {
        this.CONTACT = data().deepCopy(fields()[10].schema(), other.CONTACT);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RESOURCE instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.emsi.RESOURCE other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.RTYPE)) {
        this.RTYPE = data().deepCopy(fields()[0].schema(), other.RTYPE);
        fieldSetFlags()[0] = true;
      }
      this.RTYPEBuilder = null;
      if (isValidValue(fields()[1], other.ID)) {
        this.ID = data().deepCopy(fields()[1].schema(), other.ID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ORG_ID)) {
        this.ORG_ID = data().deepCopy(fields()[2].schema(), other.ORG_ID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.NAME)) {
        this.NAME = data().deepCopy(fields()[3].schema(), other.NAME);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.FREETEXT)) {
        this.FREETEXT = data().deepCopy(fields()[4].schema(), other.FREETEXT);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.RGEO)) {
        this.RGEO = data().deepCopy(fields()[5].schema(), other.RGEO);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.QUANTITY)) {
        this.QUANTITY = data().deepCopy(fields()[6].schema(), other.QUANTITY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.UM)) {
        this.UM = data().deepCopy(fields()[7].schema(), other.UM);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.STATUS)) {
        this.STATUS = data().deepCopy(fields()[8].schema(), other.STATUS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.NATIONALITY)) {
        this.NATIONALITY = data().deepCopy(fields()[9].schema(), other.NATIONALITY);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.CONTACT)) {
        this.CONTACT = data().deepCopy(fields()[10].schema(), other.CONTACT);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'RTYPE' field.
      * @return The value.
      */
    public eu.driver.model.emsi.RTYPERESOURCE getRTYPE() {
      return RTYPE;
    }

    /**
      * Sets the value of the 'RTYPE' field.
      * @param value The value of 'RTYPE'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setRTYPE(eu.driver.model.emsi.RTYPERESOURCE value) {
      validate(fields()[0], value);
      this.RTYPEBuilder = null;
      this.RTYPE = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'RTYPE' field has been set.
      * @return True if the 'RTYPE' field has been set, false otherwise.
      */
    public boolean hasRTYPE() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'RTYPE' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.emsi.RTYPERESOURCE.Builder getRTYPEBuilder() {
      if (RTYPEBuilder == null) {
        if (hasRTYPE()) {
          setRTYPEBuilder(eu.driver.model.emsi.RTYPERESOURCE.newBuilder(RTYPE));
        } else {
          setRTYPEBuilder(eu.driver.model.emsi.RTYPERESOURCE.newBuilder());
        }
      }
      return RTYPEBuilder;
    }

    /**
     * Sets the Builder instance for the 'RTYPE' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.emsi.RESOURCE.Builder setRTYPEBuilder(eu.driver.model.emsi.RTYPERESOURCE.Builder value) {
      clearRTYPE();
      RTYPEBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'RTYPE' field has an active Builder instance
     * @return True if the 'RTYPE' field has an active Builder instance
     */
    public boolean hasRTYPEBuilder() {
      return RTYPEBuilder != null;
    }

    /**
      * Clears the value of the 'RTYPE' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearRTYPE() {
      RTYPE = null;
      RTYPEBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearID() {
      ID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ORG_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getORGID() {
      return ORG_ID;
    }

    /**
      * Sets the value of the 'ORG_ID' field.
      * @param value The value of 'ORG_ID'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setORGID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ORG_ID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ORG_ID' field has been set.
      * @return True if the 'ORG_ID' field has been set, false otherwise.
      */
    public boolean hasORGID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ORG_ID' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearORGID() {
      ORG_ID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setNAME(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.NAME = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearNAME() {
      NAME = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'FREETEXT' field.
      * @return The value.
      */
    public java.lang.CharSequence getFREETEXT() {
      return FREETEXT;
    }

    /**
      * Sets the value of the 'FREETEXT' field.
      * @param value The value of 'FREETEXT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setFREETEXT(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.FREETEXT = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'FREETEXT' field has been set.
      * @return True if the 'FREETEXT' field has been set, false otherwise.
      */
    public boolean hasFREETEXT() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'FREETEXT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearFREETEXT() {
      FREETEXT = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'RGEO' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.RGEORESOURCE> getRGEO() {
      return RGEO;
    }

    /**
      * Sets the value of the 'RGEO' field.
      * @param value The value of 'RGEO'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setRGEO(java.util.List<eu.driver.model.emsi.RGEORESOURCE> value) {
      validate(fields()[5], value);
      this.RGEO = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'RGEO' field has been set.
      * @return True if the 'RGEO' field has been set, false otherwise.
      */
    public boolean hasRGEO() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'RGEO' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearRGEO() {
      RGEO = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'QUANTITY' field.
      * @return The value.
      */
    public java.lang.Double getQUANTITY() {
      return QUANTITY;
    }

    /**
      * Sets the value of the 'QUANTITY' field.
      * @param value The value of 'QUANTITY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setQUANTITY(java.lang.Double value) {
      validate(fields()[6], value);
      this.QUANTITY = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'QUANTITY' field has been set.
      * @return True if the 'QUANTITY' field has been set, false otherwise.
      */
    public boolean hasQUANTITY() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'QUANTITY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearQUANTITY() {
      QUANTITY = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'UM' field.
      * @return The value.
      */
    public java.lang.CharSequence getUM() {
      return UM;
    }

    /**
      * Sets the value of the 'UM' field.
      * @param value The value of 'UM'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setUM(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.UM = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'UM' field has been set.
      * @return True if the 'UM' field has been set, false otherwise.
      */
    public boolean hasUM() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'UM' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearUM() {
      UM = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'STATUS' field.
      * @return The value.
      */
    public java.lang.CharSequence getSTATUS() {
      return STATUS;
    }

    /**
      * Sets the value of the 'STATUS' field.
      * @param value The value of 'STATUS'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setSTATUS(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.STATUS = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'STATUS' field has been set.
      * @return True if the 'STATUS' field has been set, false otherwise.
      */
    public boolean hasSTATUS() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'STATUS' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearSTATUS() {
      STATUS = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'NATIONALITY' field.
      * @return The value.
      */
    public java.lang.CharSequence getNATIONALITY() {
      return NATIONALITY;
    }

    /**
      * Sets the value of the 'NATIONALITY' field.
      * @param value The value of 'NATIONALITY'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setNATIONALITY(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.NATIONALITY = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'NATIONALITY' field has been set.
      * @return True if the 'NATIONALITY' field has been set, false otherwise.
      */
    public boolean hasNATIONALITY() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'NATIONALITY' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearNATIONALITY() {
      NATIONALITY = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'CONTACT' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> getCONTACT() {
      return CONTACT;
    }

    /**
      * Sets the value of the 'CONTACT' field.
      * @param value The value of 'CONTACT'.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder setCONTACT(java.util.List<eu.driver.model.emsi.CONTACTRESOURCE> value) {
      validate(fields()[10], value);
      this.CONTACT = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'CONTACT' field has been set.
      * @return True if the 'CONTACT' field has been set, false otherwise.
      */
    public boolean hasCONTACT() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'CONTACT' field.
      * @return This builder.
      */
    public eu.driver.model.emsi.RESOURCE.Builder clearCONTACT() {
      CONTACT = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RESOURCE build() {
      try {
        RESOURCE record = new RESOURCE();
        if (RTYPEBuilder != null) {
          record.RTYPE = this.RTYPEBuilder.build();
        } else {
          record.RTYPE = fieldSetFlags()[0] ? this.RTYPE : (eu.driver.model.emsi.RTYPERESOURCE) defaultValue(fields()[0]);
        }
        record.ID = fieldSetFlags()[1] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ORG_ID = fieldSetFlags()[2] ? this.ORG_ID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.NAME = fieldSetFlags()[3] ? this.NAME : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.FREETEXT = fieldSetFlags()[4] ? this.FREETEXT : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.RGEO = fieldSetFlags()[5] ? this.RGEO : (java.util.List<eu.driver.model.emsi.RGEORESOURCE>) defaultValue(fields()[5]);
        record.QUANTITY = fieldSetFlags()[6] ? this.QUANTITY : (java.lang.Double) defaultValue(fields()[6]);
        record.UM = fieldSetFlags()[7] ? this.UM : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.STATUS = fieldSetFlags()[8] ? this.STATUS : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.NATIONALITY = fieldSetFlags()[9] ? this.NATIONALITY : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.CONTACT = fieldSetFlags()[10] ? this.CONTACT : (java.util.List<eu.driver.model.emsi.CONTACTRESOURCE>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RESOURCE>
    WRITER$ = (org.apache.avro.io.DatumWriter<RESOURCE>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RESOURCE>
    READER$ = (org.apache.avro.io.DatumReader<RESOURCE>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
