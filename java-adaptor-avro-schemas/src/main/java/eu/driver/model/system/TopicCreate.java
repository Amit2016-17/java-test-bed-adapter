/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.system;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The message send to the admin tool to request a topic to be created and grant clients access as publisher/subscriber to them. */
@org.apache.avro.specific.AvroGenerated
public class TopicCreate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4046114709606144346L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TopicCreate\",\"namespace\":\"eu.driver.model.system\",\"doc\":\"The message send to the admin tool to request a topic to be created and grant clients access as publisher/subscriber to them.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"sender Client id\"},{\"name\":\"topicName\",\"type\":\"string\",\"doc\":\"The name of the Topic to be created by the admin tool.\"},{\"name\":\"subscribeAllowed\",\"type\":[{\"type\":\"record\",\"name\":\"subscribeAllowed\",\"namespace\":\"eu.driver.model.cap\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"sender Client id\"}]}],\"doc\":\"Indicates which clients are allowed to connect as subscriber.\"},{\"name\":\"publishedAllowed\",\"type\":[{\"type\":\"record\",\"name\":\"publishedAllowed\",\"namespace\":\"eu.driver.model.cap\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"sender Client id\"}]}],\"doc\":\"Indicates which clients are allowed to connect as publisher.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TopicCreate> ENCODER =
      new BinaryMessageEncoder<TopicCreate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TopicCreate> DECODER =
      new BinaryMessageDecoder<TopicCreate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TopicCreate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TopicCreate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TopicCreate>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TopicCreate to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TopicCreate from a ByteBuffer. */
  public static TopicCreate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** sender Client id */
  @Deprecated public java.lang.CharSequence id;
  /** The name of the Topic to be created by the admin tool. */
  @Deprecated public java.lang.CharSequence topicName;
  /** Indicates which clients are allowed to connect as subscriber. */
  @Deprecated public java.lang.Object subscribeAllowed;
  /** Indicates which clients are allowed to connect as publisher. */
  @Deprecated public java.lang.Object publishedAllowed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TopicCreate() {}

  /**
   * All-args constructor.
   * @param id sender Client id
   * @param topicName The name of the Topic to be created by the admin tool.
   * @param subscribeAllowed Indicates which clients are allowed to connect as subscriber.
   * @param publishedAllowed Indicates which clients are allowed to connect as publisher.
   */
  public TopicCreate(java.lang.CharSequence id, java.lang.CharSequence topicName, java.lang.Object subscribeAllowed, java.lang.Object publishedAllowed) {
    this.id = id;
    this.topicName = topicName;
    this.subscribeAllowed = subscribeAllowed;
    this.publishedAllowed = publishedAllowed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return topicName;
    case 2: return subscribeAllowed;
    case 3: return publishedAllowed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: topicName = (java.lang.CharSequence)value$; break;
    case 2: subscribeAllowed = (java.lang.Object)value$; break;
    case 3: publishedAllowed = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return sender Client id
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * sender Client id
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'topicName' field.
   * @return The name of the Topic to be created by the admin tool.
   */
  public java.lang.CharSequence getTopicName() {
    return topicName;
  }

  /**
   * Sets the value of the 'topicName' field.
   * The name of the Topic to be created by the admin tool.
   * @param value the value to set.
   */
  public void setTopicName(java.lang.CharSequence value) {
    this.topicName = value;
  }

  /**
   * Gets the value of the 'subscribeAllowed' field.
   * @return Indicates which clients are allowed to connect as subscriber.
   */
  public java.lang.Object getSubscribeAllowed() {
    return subscribeAllowed;
  }

  /**
   * Sets the value of the 'subscribeAllowed' field.
   * Indicates which clients are allowed to connect as subscriber.
   * @param value the value to set.
   */
  public void setSubscribeAllowed(java.lang.Object value) {
    this.subscribeAllowed = value;
  }

  /**
   * Gets the value of the 'publishedAllowed' field.
   * @return Indicates which clients are allowed to connect as publisher.
   */
  public java.lang.Object getPublishedAllowed() {
    return publishedAllowed;
  }

  /**
   * Sets the value of the 'publishedAllowed' field.
   * Indicates which clients are allowed to connect as publisher.
   * @param value the value to set.
   */
  public void setPublishedAllowed(java.lang.Object value) {
    this.publishedAllowed = value;
  }

  /**
   * Creates a new TopicCreate RecordBuilder.
   * @return A new TopicCreate RecordBuilder
   */
  public static eu.driver.model.system.TopicCreate.Builder newBuilder() {
    return new eu.driver.model.system.TopicCreate.Builder();
  }

  /**
   * Creates a new TopicCreate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TopicCreate RecordBuilder
   */
  public static eu.driver.model.system.TopicCreate.Builder newBuilder(eu.driver.model.system.TopicCreate.Builder other) {
    return new eu.driver.model.system.TopicCreate.Builder(other);
  }

  /**
   * Creates a new TopicCreate RecordBuilder by copying an existing TopicCreate instance.
   * @param other The existing instance to copy.
   * @return A new TopicCreate RecordBuilder
   */
  public static eu.driver.model.system.TopicCreate.Builder newBuilder(eu.driver.model.system.TopicCreate other) {
    return new eu.driver.model.system.TopicCreate.Builder(other);
  }

  /**
   * RecordBuilder for TopicCreate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TopicCreate>
    implements org.apache.avro.data.RecordBuilder<TopicCreate> {

    /** sender Client id */
    private java.lang.CharSequence id;
    /** The name of the Topic to be created by the admin tool. */
    private java.lang.CharSequence topicName;
    /** Indicates which clients are allowed to connect as subscriber. */
    private java.lang.Object subscribeAllowed;
    /** Indicates which clients are allowed to connect as publisher. */
    private java.lang.Object publishedAllowed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.system.TopicCreate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.topicName)) {
        this.topicName = data().deepCopy(fields()[1].schema(), other.topicName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscribeAllowed)) {
        this.subscribeAllowed = data().deepCopy(fields()[2].schema(), other.subscribeAllowed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.publishedAllowed)) {
        this.publishedAllowed = data().deepCopy(fields()[3].schema(), other.publishedAllowed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TopicCreate instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.system.TopicCreate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.topicName)) {
        this.topicName = data().deepCopy(fields()[1].schema(), other.topicName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subscribeAllowed)) {
        this.subscribeAllowed = data().deepCopy(fields()[2].schema(), other.subscribeAllowed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.publishedAllowed)) {
        this.publishedAllowed = data().deepCopy(fields()[3].schema(), other.publishedAllowed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * sender Client id
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * sender Client id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * sender Client id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * sender Client id
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'topicName' field.
      * The name of the Topic to be created by the admin tool.
      * @return The value.
      */
    public java.lang.CharSequence getTopicName() {
      return topicName;
    }

    /**
      * Sets the value of the 'topicName' field.
      * The name of the Topic to be created by the admin tool.
      * @param value The value of 'topicName'.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder setTopicName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.topicName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'topicName' field has been set.
      * The name of the Topic to be created by the admin tool.
      * @return True if the 'topicName' field has been set, false otherwise.
      */
    public boolean hasTopicName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'topicName' field.
      * The name of the Topic to be created by the admin tool.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder clearTopicName() {
      topicName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subscribeAllowed' field.
      * Indicates which clients are allowed to connect as subscriber.
      * @return The value.
      */
    public java.lang.Object getSubscribeAllowed() {
      return subscribeAllowed;
    }

    /**
      * Sets the value of the 'subscribeAllowed' field.
      * Indicates which clients are allowed to connect as subscriber.
      * @param value The value of 'subscribeAllowed'.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder setSubscribeAllowed(java.lang.Object value) {
      validate(fields()[2], value);
      this.subscribeAllowed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subscribeAllowed' field has been set.
      * Indicates which clients are allowed to connect as subscriber.
      * @return True if the 'subscribeAllowed' field has been set, false otherwise.
      */
    public boolean hasSubscribeAllowed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subscribeAllowed' field.
      * Indicates which clients are allowed to connect as subscriber.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder clearSubscribeAllowed() {
      subscribeAllowed = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishedAllowed' field.
      * Indicates which clients are allowed to connect as publisher.
      * @return The value.
      */
    public java.lang.Object getPublishedAllowed() {
      return publishedAllowed;
    }

    /**
      * Sets the value of the 'publishedAllowed' field.
      * Indicates which clients are allowed to connect as publisher.
      * @param value The value of 'publishedAllowed'.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder setPublishedAllowed(java.lang.Object value) {
      validate(fields()[3], value);
      this.publishedAllowed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'publishedAllowed' field has been set.
      * Indicates which clients are allowed to connect as publisher.
      * @return True if the 'publishedAllowed' field has been set, false otherwise.
      */
    public boolean hasPublishedAllowed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'publishedAllowed' field.
      * Indicates which clients are allowed to connect as publisher.
      * @return This builder.
      */
    public eu.driver.model.system.TopicCreate.Builder clearPublishedAllowed() {
      publishedAllowed = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TopicCreate build() {
      try {
        TopicCreate record = new TopicCreate();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.topicName = fieldSetFlags()[1] ? this.topicName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.subscribeAllowed = fieldSetFlags()[2] ? this.subscribeAllowed : (java.lang.Object) defaultValue(fields()[2]);
        record.publishedAllowed = fieldSetFlags()[3] ? this.publishedAllowed : (java.lang.Object) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TopicCreate>
    WRITER$ = (org.apache.avro.io.DatumWriter<TopicCreate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TopicCreate>
    READER$ = (org.apache.avro.io.DatumReader<TopicCreate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
