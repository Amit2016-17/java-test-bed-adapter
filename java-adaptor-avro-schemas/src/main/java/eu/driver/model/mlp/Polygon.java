/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Polygon extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3989881274492456296L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Polygon\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"outerBoundaryIs\",\"type\":{\"type\":\"record\",\"name\":\"LinearRing\",\"fields\":[{\"name\":\"coords\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coord\",\"fields\":[{\"name\":\"X\",\"type\":\"string\",\"doc\":\"The first coordinate in a coordinate system (30 27 45.3N)\"},{\"name\":\"Y\",\"type\":[\"null\",\"string\"],\"doc\":\"Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.\",\"default\":null},{\"name\":\"Z\",\"type\":[\"null\",\"string\"],\"doc\":\"Third ordinate in a coordinate system which has at least three ordinates.\",\"default\":null}]}},\"doc\":\"Must contain at least 3 coordinates\"}]}},{\"name\":\"innerBoundaryIs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"LinearRing\"}],\"default\":null},{\"name\":\"attr_gid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_srsName\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Polygon> ENCODER =
      new BinaryMessageEncoder<Polygon>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Polygon> DECODER =
      new BinaryMessageDecoder<Polygon>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Polygon> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Polygon> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Polygon>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Polygon to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Polygon from a ByteBuffer. */
  public static Polygon fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.mlp.LinearRing outerBoundaryIs;
  @Deprecated public java.util.List<eu.driver.model.mlp.LinearRing> innerBoundaryIs;
  @Deprecated public java.lang.CharSequence attr_gid;
  @Deprecated public java.lang.CharSequence attr_srsName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Polygon() {}

  /**
   * All-args constructor.
   * @param outerBoundaryIs The new value for outerBoundaryIs
   * @param innerBoundaryIs The new value for innerBoundaryIs
   * @param attr_gid The new value for attr_gid
   * @param attr_srsName The new value for attr_srsName
   */
  public Polygon(eu.driver.model.mlp.LinearRing outerBoundaryIs, java.util.List<eu.driver.model.mlp.LinearRing> innerBoundaryIs, java.lang.CharSequence attr_gid, java.lang.CharSequence attr_srsName) {
    this.outerBoundaryIs = outerBoundaryIs;
    this.innerBoundaryIs = innerBoundaryIs;
    this.attr_gid = attr_gid;
    this.attr_srsName = attr_srsName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return outerBoundaryIs;
    case 1: return innerBoundaryIs;
    case 2: return attr_gid;
    case 3: return attr_srsName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: outerBoundaryIs = (eu.driver.model.mlp.LinearRing)value$; break;
    case 1: innerBoundaryIs = (java.util.List<eu.driver.model.mlp.LinearRing>)value$; break;
    case 2: attr_gid = (java.lang.CharSequence)value$; break;
    case 3: attr_srsName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'outerBoundaryIs' field.
   * @return The value of the 'outerBoundaryIs' field.
   */
  public eu.driver.model.mlp.LinearRing getOuterBoundaryIs() {
    return outerBoundaryIs;
  }

  /**
   * Sets the value of the 'outerBoundaryIs' field.
   * @param value the value to set.
   */
  public void setOuterBoundaryIs(eu.driver.model.mlp.LinearRing value) {
    this.outerBoundaryIs = value;
  }

  /**
   * Gets the value of the 'innerBoundaryIs' field.
   * @return The value of the 'innerBoundaryIs' field.
   */
  public java.util.List<eu.driver.model.mlp.LinearRing> getInnerBoundaryIs() {
    return innerBoundaryIs;
  }

  /**
   * Sets the value of the 'innerBoundaryIs' field.
   * @param value the value to set.
   */
  public void setInnerBoundaryIs(java.util.List<eu.driver.model.mlp.LinearRing> value) {
    this.innerBoundaryIs = value;
  }

  /**
   * Gets the value of the 'attr_gid' field.
   * @return The value of the 'attr_gid' field.
   */
  public java.lang.CharSequence getAttrGid() {
    return attr_gid;
  }

  /**
   * Sets the value of the 'attr_gid' field.
   * @param value the value to set.
   */
  public void setAttrGid(java.lang.CharSequence value) {
    this.attr_gid = value;
  }

  /**
   * Gets the value of the 'attr_srsName' field.
   * @return The value of the 'attr_srsName' field.
   */
  public java.lang.CharSequence getAttrSrsName() {
    return attr_srsName;
  }

  /**
   * Sets the value of the 'attr_srsName' field.
   * @param value the value to set.
   */
  public void setAttrSrsName(java.lang.CharSequence value) {
    this.attr_srsName = value;
  }

  /**
   * Creates a new Polygon RecordBuilder.
   * @return A new Polygon RecordBuilder
   */
  public static eu.driver.model.mlp.Polygon.Builder newBuilder() {
    return new eu.driver.model.mlp.Polygon.Builder();
  }

  /**
   * Creates a new Polygon RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Polygon RecordBuilder
   */
  public static eu.driver.model.mlp.Polygon.Builder newBuilder(eu.driver.model.mlp.Polygon.Builder other) {
    return new eu.driver.model.mlp.Polygon.Builder(other);
  }

  /**
   * Creates a new Polygon RecordBuilder by copying an existing Polygon instance.
   * @param other The existing instance to copy.
   * @return A new Polygon RecordBuilder
   */
  public static eu.driver.model.mlp.Polygon.Builder newBuilder(eu.driver.model.mlp.Polygon other) {
    return new eu.driver.model.mlp.Polygon.Builder(other);
  }

  /**
   * RecordBuilder for Polygon instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Polygon>
    implements org.apache.avro.data.RecordBuilder<Polygon> {

    private eu.driver.model.mlp.LinearRing outerBoundaryIs;
    private eu.driver.model.mlp.LinearRing.Builder outerBoundaryIsBuilder;
    private java.util.List<eu.driver.model.mlp.LinearRing> innerBoundaryIs;
    private java.lang.CharSequence attr_gid;
    private java.lang.CharSequence attr_srsName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Polygon.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.outerBoundaryIs)) {
        this.outerBoundaryIs = data().deepCopy(fields()[0].schema(), other.outerBoundaryIs);
        fieldSetFlags()[0] = true;
      }
      if (other.hasOuterBoundaryIsBuilder()) {
        this.outerBoundaryIsBuilder = eu.driver.model.mlp.LinearRing.newBuilder(other.getOuterBoundaryIsBuilder());
      }
      if (isValidValue(fields()[1], other.innerBoundaryIs)) {
        this.innerBoundaryIs = data().deepCopy(fields()[1].schema(), other.innerBoundaryIs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attr_gid)) {
        this.attr_gid = data().deepCopy(fields()[2].schema(), other.attr_gid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attr_srsName)) {
        this.attr_srsName = data().deepCopy(fields()[3].schema(), other.attr_srsName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Polygon instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Polygon other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.outerBoundaryIs)) {
        this.outerBoundaryIs = data().deepCopy(fields()[0].schema(), other.outerBoundaryIs);
        fieldSetFlags()[0] = true;
      }
      this.outerBoundaryIsBuilder = null;
      if (isValidValue(fields()[1], other.innerBoundaryIs)) {
        this.innerBoundaryIs = data().deepCopy(fields()[1].schema(), other.innerBoundaryIs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attr_gid)) {
        this.attr_gid = data().deepCopy(fields()[2].schema(), other.attr_gid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attr_srsName)) {
        this.attr_srsName = data().deepCopy(fields()[3].schema(), other.attr_srsName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'outerBoundaryIs' field.
      * @return The value.
      */
    public eu.driver.model.mlp.LinearRing getOuterBoundaryIs() {
      return outerBoundaryIs;
    }

    /**
      * Sets the value of the 'outerBoundaryIs' field.
      * @param value The value of 'outerBoundaryIs'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder setOuterBoundaryIs(eu.driver.model.mlp.LinearRing value) {
      validate(fields()[0], value);
      this.outerBoundaryIsBuilder = null;
      this.outerBoundaryIs = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'outerBoundaryIs' field has been set.
      * @return True if the 'outerBoundaryIs' field has been set, false otherwise.
      */
    public boolean hasOuterBoundaryIs() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'outerBoundaryIs' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.LinearRing.Builder getOuterBoundaryIsBuilder() {
      if (outerBoundaryIsBuilder == null) {
        if (hasOuterBoundaryIs()) {
          setOuterBoundaryIsBuilder(eu.driver.model.mlp.LinearRing.newBuilder(outerBoundaryIs));
        } else {
          setOuterBoundaryIsBuilder(eu.driver.model.mlp.LinearRing.newBuilder());
        }
      }
      return outerBoundaryIsBuilder;
    }

    /**
     * Sets the Builder instance for the 'outerBoundaryIs' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.Polygon.Builder setOuterBoundaryIsBuilder(eu.driver.model.mlp.LinearRing.Builder value) {
      clearOuterBoundaryIs();
      outerBoundaryIsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'outerBoundaryIs' field has an active Builder instance
     * @return True if the 'outerBoundaryIs' field has an active Builder instance
     */
    public boolean hasOuterBoundaryIsBuilder() {
      return outerBoundaryIsBuilder != null;
    }

    /**
      * Clears the value of the 'outerBoundaryIs' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder clearOuterBoundaryIs() {
      outerBoundaryIs = null;
      outerBoundaryIsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'innerBoundaryIs' field.
      * @return The value.
      */
    public java.util.List<eu.driver.model.mlp.LinearRing> getInnerBoundaryIs() {
      return innerBoundaryIs;
    }

    /**
      * Sets the value of the 'innerBoundaryIs' field.
      * @param value The value of 'innerBoundaryIs'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder setInnerBoundaryIs(java.util.List<eu.driver.model.mlp.LinearRing> value) {
      validate(fields()[1], value);
      this.innerBoundaryIs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'innerBoundaryIs' field has been set.
      * @return True if the 'innerBoundaryIs' field has been set, false otherwise.
      */
    public boolean hasInnerBoundaryIs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'innerBoundaryIs' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder clearInnerBoundaryIs() {
      innerBoundaryIs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'attr_gid' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttrGid() {
      return attr_gid;
    }

    /**
      * Sets the value of the 'attr_gid' field.
      * @param value The value of 'attr_gid'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder setAttrGid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.attr_gid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_gid' field has been set.
      * @return True if the 'attr_gid' field has been set, false otherwise.
      */
    public boolean hasAttrGid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'attr_gid' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder clearAttrGid() {
      attr_gid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'attr_srsName' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttrSrsName() {
      return attr_srsName;
    }

    /**
      * Sets the value of the 'attr_srsName' field.
      * @param value The value of 'attr_srsName'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder setAttrSrsName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.attr_srsName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_srsName' field has been set.
      * @return True if the 'attr_srsName' field has been set, false otherwise.
      */
    public boolean hasAttrSrsName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'attr_srsName' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Polygon.Builder clearAttrSrsName() {
      attr_srsName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Polygon build() {
      try {
        Polygon record = new Polygon();
        if (outerBoundaryIsBuilder != null) {
          record.outerBoundaryIs = this.outerBoundaryIsBuilder.build();
        } else {
          record.outerBoundaryIs = fieldSetFlags()[0] ? this.outerBoundaryIs : (eu.driver.model.mlp.LinearRing) defaultValue(fields()[0]);
        }
        record.innerBoundaryIs = fieldSetFlags()[1] ? this.innerBoundaryIs : (java.util.List<eu.driver.model.mlp.LinearRing>) defaultValue(fields()[1]);
        record.attr_gid = fieldSetFlags()[2] ? this.attr_gid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.attr_srsName = fieldSetFlags()[3] ? this.attr_srsName : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Polygon>
    WRITER$ = (org.apache.avro.io.DatumWriter<Polygon>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Polygon>
    READER$ = (org.apache.avro.io.DatumReader<Polygon>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
