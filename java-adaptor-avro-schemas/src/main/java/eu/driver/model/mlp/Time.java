/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Time extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7636991177306732478L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Time\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"attr_utc_off\",\"type\":\"string\",\"doc\":\"Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.\",\"default\":\"0000\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Time> ENCODER =
      new BinaryMessageEncoder<Time>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Time> DECODER =
      new BinaryMessageDecoder<Time>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Time> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Time> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Time>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Time to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Time from a ByteBuffer. */
  public static Time fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss */
  @Deprecated public long time;
  /** Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich. */
  @Deprecated public java.lang.CharSequence attr_utc_off;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Time() {}

  /**
   * All-args constructor.
   * @param time UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
   * @param attr_utc_off Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
   */
  public Time(java.lang.Long time, java.lang.CharSequence attr_utc_off) {
    this.time = time;
    this.attr_utc_off = attr_utc_off;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return attr_utc_off;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Long)value$; break;
    case 1: attr_utc_off = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'attr_utc_off' field.
   * @return Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
   */
  public java.lang.CharSequence getAttrUtcOff() {
    return attr_utc_off;
  }

  /**
   * Sets the value of the 'attr_utc_off' field.
   * Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
   * @param value the value to set.
   */
  public void setAttrUtcOff(java.lang.CharSequence value) {
    this.attr_utc_off = value;
  }

  /**
   * Creates a new Time RecordBuilder.
   * @return A new Time RecordBuilder
   */
  public static eu.driver.model.mlp.Time.Builder newBuilder() {
    return new eu.driver.model.mlp.Time.Builder();
  }

  /**
   * Creates a new Time RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Time RecordBuilder
   */
  public static eu.driver.model.mlp.Time.Builder newBuilder(eu.driver.model.mlp.Time.Builder other) {
    return new eu.driver.model.mlp.Time.Builder(other);
  }

  /**
   * Creates a new Time RecordBuilder by copying an existing Time instance.
   * @param other The existing instance to copy.
   * @return A new Time RecordBuilder
   */
  public static eu.driver.model.mlp.Time.Builder newBuilder(eu.driver.model.mlp.Time other) {
    return new eu.driver.model.mlp.Time.Builder(other);
  }

  /**
   * RecordBuilder for Time instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Time>
    implements org.apache.avro.data.RecordBuilder<Time> {

    /** UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss */
    private long time;
    /** Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich. */
    private java.lang.CharSequence attr_utc_off;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Time.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attr_utc_off)) {
        this.attr_utc_off = data().deepCopy(fields()[1].schema(), other.attr_utc_off);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Time instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Time other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attr_utc_off)) {
        this.attr_utc_off = data().deepCopy(fields()[1].schema(), other.attr_utc_off);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
      * @param value The value of 'time'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Time.Builder setTime(long value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
      * @return This builder.
      */
    public eu.driver.model.mlp.Time.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'attr_utc_off' field.
      * Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
      * @return The value.
      */
    public java.lang.CharSequence getAttrUtcOff() {
      return attr_utc_off;
    }

    /**
      * Sets the value of the 'attr_utc_off' field.
      * Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
      * @param value The value of 'attr_utc_off'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Time.Builder setAttrUtcOff(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.attr_utc_off = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'attr_utc_off' field has been set.
      * Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
      * @return True if the 'attr_utc_off' field has been set, false otherwise.
      */
    public boolean hasAttrUtcOff() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'attr_utc_off' field.
      * Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
      * @return This builder.
      */
    public eu.driver.model.mlp.Time.Builder clearAttrUtcOff() {
      attr_utc_off = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Time build() {
      try {
        Time record = new Time();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Long) defaultValue(fields()[0]);
        record.attr_utc_off = fieldSetFlags()[1] ? this.attr_utc_off : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Time>
    WRITER$ = (org.apache.avro.io.DatumWriter<Time>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Time>
    READER$ = (org.apache.avro.io.DatumReader<Time>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
