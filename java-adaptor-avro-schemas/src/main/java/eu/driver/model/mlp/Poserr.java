/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Poserr extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3216782029961040268L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Poserr\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"result\",\"type\":{\"type\":\"record\",\"name\":\"Result\",\"fields\":[{\"name\":\"result\",\"type\":{\"type\":\"enum\",\"name\":\"ResultEnum\",\"symbols\":[\"OK\",\"SYSTEM_FAILURE\",\"UNSPECIFIED_ERROR\",\"UNAUTHORIZED_APPLICATION\",\"UNKNOWN_SUBSCRIBER\",\"ABSENT_SUBSCRIBER\",\"POSITION_METHOD_FAILURE\",\"CONGESTION_IN_LOCATION_SERVER\",\"CONGESTION_IN_MOBILE_NETWORK\",\"UNSUPPORTED_VERSION\",\"TOO_MANY_POSITION_ITEMS\",\"FORMAT_ERROR\",\"SYNTAX_ERROR\",\"PROTOCOL_ELEMENT_NOT_SUPPORTED\",\"SERVICE_NOT_SUPPORTED\",\"PROTOCOL_ELEMENT_ATTRIBUTE_NOT_SUPPORTED\",\"INVALID_PROTOCOL_ELEMENT_VALUE\",\"INVALID_PROTOCOL_ELEMENT_ATTRIBUTE_VALUE\",\"PROTOCOL_ELEMENT_VALUE_NOT_SUPPORTED\",\"PROTOCOL_ELEMENT_ATTRIBUTE_VALUE_NOT_SUPPORTED\",\"QOP_NOT_ATTAINABLE\",\"POSITIONING_NOT_ALLOWED\",\"DISALLOWED_BY_LOCAL_REGULATIONS\",\"MISCONFIGURATION_OF_LOCATION_SERVER\"]},\"doc\":\"See MLP 3.1 specifications chapter 5.4 on Result Codes\"},{\"name\":\"attr_resid\",\"type\":\"string\",\"doc\":\"See MLP 3.1 specifications chapter 5.4 on Result Codes\"}]}},{\"name\":\"add_info\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"time\",\"type\":{\"type\":\"record\",\"name\":\"Time\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"attr_utc_off\",\"type\":\"string\",\"doc\":\"Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.\",\"default\":\"0000\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Poserr> ENCODER =
      new BinaryMessageEncoder<Poserr>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Poserr> DECODER =
      new BinaryMessageDecoder<Poserr>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Poserr> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Poserr> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Poserr>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Poserr to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Poserr from a ByteBuffer. */
  public static Poserr fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.mlp.Result result;
  @Deprecated public java.lang.CharSequence add_info;
  @Deprecated public eu.driver.model.mlp.Time time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Poserr() {}

  /**
   * All-args constructor.
   * @param result The new value for result
   * @param add_info The new value for add_info
   * @param time The new value for time
   */
  public Poserr(eu.driver.model.mlp.Result result, java.lang.CharSequence add_info, eu.driver.model.mlp.Time time) {
    this.result = result;
    this.add_info = add_info;
    this.time = time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return result;
    case 1: return add_info;
    case 2: return time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: result = (eu.driver.model.mlp.Result)value$; break;
    case 1: add_info = (java.lang.CharSequence)value$; break;
    case 2: time = (eu.driver.model.mlp.Time)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public eu.driver.model.mlp.Result getResult() {
    return result;
  }

  /**
   * Sets the value of the 'result' field.
   * @param value the value to set.
   */
  public void setResult(eu.driver.model.mlp.Result value) {
    this.result = value;
  }

  /**
   * Gets the value of the 'add_info' field.
   * @return The value of the 'add_info' field.
   */
  public java.lang.CharSequence getAddInfo() {
    return add_info;
  }

  /**
   * Sets the value of the 'add_info' field.
   * @param value the value to set.
   */
  public void setAddInfo(java.lang.CharSequence value) {
    this.add_info = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public eu.driver.model.mlp.Time getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(eu.driver.model.mlp.Time value) {
    this.time = value;
  }

  /**
   * Creates a new Poserr RecordBuilder.
   * @return A new Poserr RecordBuilder
   */
  public static eu.driver.model.mlp.Poserr.Builder newBuilder() {
    return new eu.driver.model.mlp.Poserr.Builder();
  }

  /**
   * Creates a new Poserr RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Poserr RecordBuilder
   */
  public static eu.driver.model.mlp.Poserr.Builder newBuilder(eu.driver.model.mlp.Poserr.Builder other) {
    return new eu.driver.model.mlp.Poserr.Builder(other);
  }

  /**
   * Creates a new Poserr RecordBuilder by copying an existing Poserr instance.
   * @param other The existing instance to copy.
   * @return A new Poserr RecordBuilder
   */
  public static eu.driver.model.mlp.Poserr.Builder newBuilder(eu.driver.model.mlp.Poserr other) {
    return new eu.driver.model.mlp.Poserr.Builder(other);
  }

  /**
   * RecordBuilder for Poserr instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Poserr>
    implements org.apache.avro.data.RecordBuilder<Poserr> {

    private eu.driver.model.mlp.Result result;
    private eu.driver.model.mlp.Result.Builder resultBuilder;
    private java.lang.CharSequence add_info;
    private eu.driver.model.mlp.Time time;
    private eu.driver.model.mlp.Time.Builder timeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Poserr.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.result)) {
        this.result = data().deepCopy(fields()[0].schema(), other.result);
        fieldSetFlags()[0] = true;
      }
      if (other.hasResultBuilder()) {
        this.resultBuilder = eu.driver.model.mlp.Result.newBuilder(other.getResultBuilder());
      }
      if (isValidValue(fields()[1], other.add_info)) {
        this.add_info = data().deepCopy(fields()[1].schema(), other.add_info);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (other.hasTimeBuilder()) {
        this.timeBuilder = eu.driver.model.mlp.Time.newBuilder(other.getTimeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Poserr instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Poserr other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.result)) {
        this.result = data().deepCopy(fields()[0].schema(), other.result);
        fieldSetFlags()[0] = true;
      }
      this.resultBuilder = null;
      if (isValidValue(fields()[1], other.add_info)) {
        this.add_info = data().deepCopy(fields()[1].schema(), other.add_info);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      this.timeBuilder = null;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public eu.driver.model.mlp.Result getResult() {
      return result;
    }

    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder setResult(eu.driver.model.mlp.Result value) {
      validate(fields()[0], value);
      this.resultBuilder = null;
      this.result = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'result' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.Result.Builder getResultBuilder() {
      if (resultBuilder == null) {
        if (hasResult()) {
          setResultBuilder(eu.driver.model.mlp.Result.newBuilder(result));
        } else {
          setResultBuilder(eu.driver.model.mlp.Result.newBuilder());
        }
      }
      return resultBuilder;
    }

    /**
     * Sets the Builder instance for the 'result' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.Poserr.Builder setResultBuilder(eu.driver.model.mlp.Result.Builder value) {
      clearResult();
      resultBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'result' field has an active Builder instance
     * @return True if the 'result' field has an active Builder instance
     */
    public boolean hasResultBuilder() {
      return resultBuilder != null;
    }

    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder clearResult() {
      result = null;
      resultBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'add_info' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddInfo() {
      return add_info;
    }

    /**
      * Sets the value of the 'add_info' field.
      * @param value The value of 'add_info'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder setAddInfo(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.add_info = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'add_info' field has been set.
      * @return True if the 'add_info' field has been set, false otherwise.
      */
    public boolean hasAddInfo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'add_info' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder clearAddInfo() {
      add_info = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public eu.driver.model.mlp.Time getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder setTime(eu.driver.model.mlp.Time value) {
      validate(fields()[2], value);
      this.timeBuilder = null;
      this.time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'time' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.mlp.Time.Builder getTimeBuilder() {
      if (timeBuilder == null) {
        if (hasTime()) {
          setTimeBuilder(eu.driver.model.mlp.Time.newBuilder(time));
        } else {
          setTimeBuilder(eu.driver.model.mlp.Time.newBuilder());
        }
      }
      return timeBuilder;
    }

    /**
     * Sets the Builder instance for the 'time' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.mlp.Poserr.Builder setTimeBuilder(eu.driver.model.mlp.Time.Builder value) {
      clearTime();
      timeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'time' field has an active Builder instance
     * @return True if the 'time' field has an active Builder instance
     */
    public boolean hasTimeBuilder() {
      return timeBuilder != null;
    }

    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public eu.driver.model.mlp.Poserr.Builder clearTime() {
      time = null;
      timeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Poserr build() {
      try {
        Poserr record = new Poserr();
        if (resultBuilder != null) {
          record.result = this.resultBuilder.build();
        } else {
          record.result = fieldSetFlags()[0] ? this.result : (eu.driver.model.mlp.Result) defaultValue(fields()[0]);
        }
        record.add_info = fieldSetFlags()[1] ? this.add_info : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (timeBuilder != null) {
          record.time = this.timeBuilder.build();
        } else {
          record.time = fieldSetFlags()[2] ? this.time : (eu.driver.model.mlp.Time) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Poserr>
    WRITER$ = (org.apache.avro.io.DatumWriter<Poserr>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Poserr>
    READER$ = (org.apache.avro.io.DatumReader<Poserr>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
