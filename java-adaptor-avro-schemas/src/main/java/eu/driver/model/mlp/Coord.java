/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.mlp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Coord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3222549263892506520L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Coord\",\"namespace\":\"eu.driver.model.mlp\",\"fields\":[{\"name\":\"X\",\"type\":\"string\",\"doc\":\"The first coordinate in a coordinate system (30 27 45.3N)\"},{\"name\":\"Y\",\"type\":[\"null\",\"string\"],\"doc\":\"Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.\",\"default\":null},{\"name\":\"Z\",\"type\":[\"null\",\"string\"],\"doc\":\"Third ordinate in a coordinate system which has at least three ordinates.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Coord> ENCODER =
      new BinaryMessageEncoder<Coord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Coord> DECODER =
      new BinaryMessageDecoder<Coord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Coord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Coord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Coord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Coord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Coord from a ByteBuffer. */
  public static Coord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The first coordinate in a coordinate system (30 27 45.3N) */
  @Deprecated public java.lang.CharSequence X;
  /** Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system. */
  @Deprecated public java.lang.CharSequence Y;
  /** Third ordinate in a coordinate system which has at least three ordinates. */
  @Deprecated public java.lang.CharSequence Z;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Coord() {}

  /**
   * All-args constructor.
   * @param X The first coordinate in a coordinate system (30 27 45.3N)
   * @param Y Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
   * @param Z Third ordinate in a coordinate system which has at least three ordinates.
   */
  public Coord(java.lang.CharSequence X, java.lang.CharSequence Y, java.lang.CharSequence Z) {
    this.X = X;
    this.Y = Y;
    this.Z = Z;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return X;
    case 1: return Y;
    case 2: return Z;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: X = (java.lang.CharSequence)value$; break;
    case 1: Y = (java.lang.CharSequence)value$; break;
    case 2: Z = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'X' field.
   * @return The first coordinate in a coordinate system (30 27 45.3N)
   */
  public java.lang.CharSequence getX() {
    return X;
  }

  /**
   * Sets the value of the 'X' field.
   * The first coordinate in a coordinate system (30 27 45.3N)
   * @param value the value to set.
   */
  public void setX(java.lang.CharSequence value) {
    this.X = value;
  }

  /**
   * Gets the value of the 'Y' field.
   * @return Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
   */
  public java.lang.CharSequence getY() {
    return Y;
  }

  /**
   * Sets the value of the 'Y' field.
   * Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
   * @param value the value to set.
   */
  public void setY(java.lang.CharSequence value) {
    this.Y = value;
  }

  /**
   * Gets the value of the 'Z' field.
   * @return Third ordinate in a coordinate system which has at least three ordinates.
   */
  public java.lang.CharSequence getZ() {
    return Z;
  }

  /**
   * Sets the value of the 'Z' field.
   * Third ordinate in a coordinate system which has at least three ordinates.
   * @param value the value to set.
   */
  public void setZ(java.lang.CharSequence value) {
    this.Z = value;
  }

  /**
   * Creates a new Coord RecordBuilder.
   * @return A new Coord RecordBuilder
   */
  public static eu.driver.model.mlp.Coord.Builder newBuilder() {
    return new eu.driver.model.mlp.Coord.Builder();
  }

  /**
   * Creates a new Coord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Coord RecordBuilder
   */
  public static eu.driver.model.mlp.Coord.Builder newBuilder(eu.driver.model.mlp.Coord.Builder other) {
    return new eu.driver.model.mlp.Coord.Builder(other);
  }

  /**
   * Creates a new Coord RecordBuilder by copying an existing Coord instance.
   * @param other The existing instance to copy.
   * @return A new Coord RecordBuilder
   */
  public static eu.driver.model.mlp.Coord.Builder newBuilder(eu.driver.model.mlp.Coord other) {
    return new eu.driver.model.mlp.Coord.Builder(other);
  }

  /**
   * RecordBuilder for Coord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Coord>
    implements org.apache.avro.data.RecordBuilder<Coord> {

    /** The first coordinate in a coordinate system (30 27 45.3N) */
    private java.lang.CharSequence X;
    /** Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system. */
    private java.lang.CharSequence Y;
    /** Third ordinate in a coordinate system which has at least three ordinates. */
    private java.lang.CharSequence Z;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.mlp.Coord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.X)) {
        this.X = data().deepCopy(fields()[0].schema(), other.X);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Y)) {
        this.Y = data().deepCopy(fields()[1].schema(), other.Y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Z)) {
        this.Z = data().deepCopy(fields()[2].schema(), other.Z);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Coord instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.mlp.Coord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.X)) {
        this.X = data().deepCopy(fields()[0].schema(), other.X);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Y)) {
        this.Y = data().deepCopy(fields()[1].schema(), other.Y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Z)) {
        this.Z = data().deepCopy(fields()[2].schema(), other.Z);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'X' field.
      * The first coordinate in a coordinate system (30 27 45.3N)
      * @return The value.
      */
    public java.lang.CharSequence getX() {
      return X;
    }

    /**
      * Sets the value of the 'X' field.
      * The first coordinate in a coordinate system (30 27 45.3N)
      * @param value The value of 'X'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder setX(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.X = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'X' field has been set.
      * The first coordinate in a coordinate system (30 27 45.3N)
      * @return True if the 'X' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'X' field.
      * The first coordinate in a coordinate system (30 27 45.3N)
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder clearX() {
      X = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Y' field.
      * Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
      * @return The value.
      */
    public java.lang.CharSequence getY() {
      return Y;
    }

    /**
      * Sets the value of the 'Y' field.
      * Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
      * @param value The value of 'Y'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder setY(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Y = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Y' field has been set.
      * Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
      * @return True if the 'Y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Y' field.
      * Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system.
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder clearY() {
      Y = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Z' field.
      * Third ordinate in a coordinate system which has at least three ordinates.
      * @return The value.
      */
    public java.lang.CharSequence getZ() {
      return Z;
    }

    /**
      * Sets the value of the 'Z' field.
      * Third ordinate in a coordinate system which has at least three ordinates.
      * @param value The value of 'Z'.
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder setZ(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Z = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Z' field has been set.
      * Third ordinate in a coordinate system which has at least three ordinates.
      * @return True if the 'Z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Z' field.
      * Third ordinate in a coordinate system which has at least three ordinates.
      * @return This builder.
      */
    public eu.driver.model.mlp.Coord.Builder clearZ() {
      Z = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Coord build() {
      try {
        Coord record = new Coord();
        record.X = fieldSetFlags()[0] ? this.X : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Y = fieldSetFlags()[1] ? this.Y : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Z = fieldSetFlags()[2] ? this.Z : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Coord>
    WRITER$ = (org.apache.avro.io.DatumWriter<Coord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Coord>
    READER$ = (org.apache.avro.io.DatumReader<Coord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
