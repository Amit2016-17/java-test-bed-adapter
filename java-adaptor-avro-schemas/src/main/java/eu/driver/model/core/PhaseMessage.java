/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.core;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is the message for phase information. */
@org.apache.avro.specific.AvroGenerated
public class PhaseMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5941107533468540820L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhaseMessage\",\"namespace\":\"eu.driver.model.core\",\"doc\":\"This is the message for phase information.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique ID of the message\"},{\"name\":\"phase\",\"type\":{\"type\":\"enum\",\"name\":\"Phase\",\"namespace\":\"eu.driver.model.tm\",\"symbols\":[\"PROPER_NAME\",\"INITIALIZATION\",\"PREPARATION\",\"PRE_INCIDENT\",\"INCIDENT\",\"POST_INCIDENT\"]},\"doc\":\"The current active phase.\"},{\"name\":\"isStarting\",\"type\":\"boolean\",\"doc\":\"Indicating if started (true) or ended (false).\"},{\"name\":\"alternativeName\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional alternative name for the phase. Linked to PROPER_NAME.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PhaseMessage> ENCODER =
      new BinaryMessageEncoder<PhaseMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PhaseMessage> DECODER =
      new BinaryMessageDecoder<PhaseMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PhaseMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PhaseMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PhaseMessage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PhaseMessage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PhaseMessage from a ByteBuffer. */
  public static PhaseMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique ID of the message */
  @Deprecated public java.lang.CharSequence id;
  /** The current active phase. */
  @Deprecated public eu.driver.model.tm.Phase phase;
  /** Indicating if started (true) or ended (false). */
  @Deprecated public boolean isStarting;
  /** An optional alternative name for the phase. Linked to PROPER_NAME. */
  @Deprecated public java.lang.CharSequence alternativeName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PhaseMessage() {}

  /**
   * All-args constructor.
   * @param id The unique ID of the message
   * @param phase The current active phase.
   * @param isStarting Indicating if started (true) or ended (false).
   * @param alternativeName An optional alternative name for the phase. Linked to PROPER_NAME.
   */
  public PhaseMessage(java.lang.CharSequence id, eu.driver.model.tm.Phase phase, java.lang.Boolean isStarting, java.lang.CharSequence alternativeName) {
    this.id = id;
    this.phase = phase;
    this.isStarting = isStarting;
    this.alternativeName = alternativeName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return phase;
    case 2: return isStarting;
    case 3: return alternativeName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: phase = (eu.driver.model.tm.Phase)value$; break;
    case 2: isStarting = (java.lang.Boolean)value$; break;
    case 3: alternativeName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique ID of the message
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The unique ID of the message
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'phase' field.
   * @return The current active phase.
   */
  public eu.driver.model.tm.Phase getPhase() {
    return phase;
  }

  /**
   * Sets the value of the 'phase' field.
   * The current active phase.
   * @param value the value to set.
   */
  public void setPhase(eu.driver.model.tm.Phase value) {
    this.phase = value;
  }

  /**
   * Gets the value of the 'isStarting' field.
   * @return Indicating if started (true) or ended (false).
   */
  public java.lang.Boolean getIsStarting() {
    return isStarting;
  }

  /**
   * Sets the value of the 'isStarting' field.
   * Indicating if started (true) or ended (false).
   * @param value the value to set.
   */
  public void setIsStarting(java.lang.Boolean value) {
    this.isStarting = value;
  }

  /**
   * Gets the value of the 'alternativeName' field.
   * @return An optional alternative name for the phase. Linked to PROPER_NAME.
   */
  public java.lang.CharSequence getAlternativeName() {
    return alternativeName;
  }

  /**
   * Sets the value of the 'alternativeName' field.
   * An optional alternative name for the phase. Linked to PROPER_NAME.
   * @param value the value to set.
   */
  public void setAlternativeName(java.lang.CharSequence value) {
    this.alternativeName = value;
  }

  /**
   * Creates a new PhaseMessage RecordBuilder.
   * @return A new PhaseMessage RecordBuilder
   */
  public static eu.driver.model.core.PhaseMessage.Builder newBuilder() {
    return new eu.driver.model.core.PhaseMessage.Builder();
  }

  /**
   * Creates a new PhaseMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PhaseMessage RecordBuilder
   */
  public static eu.driver.model.core.PhaseMessage.Builder newBuilder(eu.driver.model.core.PhaseMessage.Builder other) {
    return new eu.driver.model.core.PhaseMessage.Builder(other);
  }

  /**
   * Creates a new PhaseMessage RecordBuilder by copying an existing PhaseMessage instance.
   * @param other The existing instance to copy.
   * @return A new PhaseMessage RecordBuilder
   */
  public static eu.driver.model.core.PhaseMessage.Builder newBuilder(eu.driver.model.core.PhaseMessage other) {
    return new eu.driver.model.core.PhaseMessage.Builder(other);
  }

  /**
   * RecordBuilder for PhaseMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhaseMessage>
    implements org.apache.avro.data.RecordBuilder<PhaseMessage> {

    /** The unique ID of the message */
    private java.lang.CharSequence id;
    /** The current active phase. */
    private eu.driver.model.tm.Phase phase;
    /** Indicating if started (true) or ended (false). */
    private boolean isStarting;
    /** An optional alternative name for the phase. Linked to PROPER_NAME. */
    private java.lang.CharSequence alternativeName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.core.PhaseMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phase)) {
        this.phase = data().deepCopy(fields()[1].schema(), other.phase);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isStarting)) {
        this.isStarting = data().deepCopy(fields()[2].schema(), other.isStarting);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternativeName)) {
        this.alternativeName = data().deepCopy(fields()[3].schema(), other.alternativeName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PhaseMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.core.PhaseMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phase)) {
        this.phase = data().deepCopy(fields()[1].schema(), other.phase);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isStarting)) {
        this.isStarting = data().deepCopy(fields()[2].schema(), other.isStarting);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternativeName)) {
        this.alternativeName = data().deepCopy(fields()[3].schema(), other.alternativeName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * The unique ID of the message
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * The unique ID of the message
      * @param value The value of 'id'.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique ID of the message
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique ID of the message
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'phase' field.
      * The current active phase.
      * @return The value.
      */
    public eu.driver.model.tm.Phase getPhase() {
      return phase;
    }

    /**
      * Sets the value of the 'phase' field.
      * The current active phase.
      * @param value The value of 'phase'.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder setPhase(eu.driver.model.tm.Phase value) {
      validate(fields()[1], value);
      this.phase = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'phase' field has been set.
      * The current active phase.
      * @return True if the 'phase' field has been set, false otherwise.
      */
    public boolean hasPhase() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'phase' field.
      * The current active phase.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder clearPhase() {
      phase = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isStarting' field.
      * Indicating if started (true) or ended (false).
      * @return The value.
      */
    public java.lang.Boolean getIsStarting() {
      return isStarting;
    }

    /**
      * Sets the value of the 'isStarting' field.
      * Indicating if started (true) or ended (false).
      * @param value The value of 'isStarting'.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder setIsStarting(boolean value) {
      validate(fields()[2], value);
      this.isStarting = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isStarting' field has been set.
      * Indicating if started (true) or ended (false).
      * @return True if the 'isStarting' field has been set, false otherwise.
      */
    public boolean hasIsStarting() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isStarting' field.
      * Indicating if started (true) or ended (false).
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder clearIsStarting() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternativeName' field.
      * An optional alternative name for the phase. Linked to PROPER_NAME.
      * @return The value.
      */
    public java.lang.CharSequence getAlternativeName() {
      return alternativeName;
    }

    /**
      * Sets the value of the 'alternativeName' field.
      * An optional alternative name for the phase. Linked to PROPER_NAME.
      * @param value The value of 'alternativeName'.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder setAlternativeName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.alternativeName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'alternativeName' field has been set.
      * An optional alternative name for the phase. Linked to PROPER_NAME.
      * @return True if the 'alternativeName' field has been set, false otherwise.
      */
    public boolean hasAlternativeName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'alternativeName' field.
      * An optional alternative name for the phase. Linked to PROPER_NAME.
      * @return This builder.
      */
    public eu.driver.model.core.PhaseMessage.Builder clearAlternativeName() {
      alternativeName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PhaseMessage build() {
      try {
        PhaseMessage record = new PhaseMessage();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.phase = fieldSetFlags()[1] ? this.phase : (eu.driver.model.tm.Phase) defaultValue(fields()[1]);
        record.isStarting = fieldSetFlags()[2] ? this.isStarting : (java.lang.Boolean) defaultValue(fields()[2]);
        record.alternativeName = fieldSetFlags()[3] ? this.alternativeName : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PhaseMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<PhaseMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PhaseMessage>
    READER$ = (org.apache.avro.io.DatumReader<PhaseMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
