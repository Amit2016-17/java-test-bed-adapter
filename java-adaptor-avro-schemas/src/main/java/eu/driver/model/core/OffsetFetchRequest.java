/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.core;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OffsetFetchRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5749424105181104075L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OffsetFetchRequest\",\"namespace\":\"eu.driver.model.core\",\"fields\":[{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"offset\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"partition\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OffsetFetchRequest> ENCODER =
      new BinaryMessageEncoder<OffsetFetchRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OffsetFetchRequest> DECODER =
      new BinaryMessageDecoder<OffsetFetchRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OffsetFetchRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OffsetFetchRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OffsetFetchRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OffsetFetchRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OffsetFetchRequest from a ByteBuffer. */
  public static OffsetFetchRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence topic;
  @Deprecated public java.lang.Integer offset;
  @Deprecated public java.lang.Integer partition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OffsetFetchRequest() {}

  /**
   * All-args constructor.
   * @param topic The new value for topic
   * @param offset The new value for offset
   * @param partition The new value for partition
   */
  public OffsetFetchRequest(java.lang.CharSequence topic, java.lang.Integer offset, java.lang.Integer partition) {
    this.topic = topic;
    this.offset = offset;
    this.partition = partition;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topic;
    case 1: return offset;
    case 2: return partition;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topic = (java.lang.CharSequence)value$; break;
    case 1: offset = (java.lang.Integer)value$; break;
    case 2: partition = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.CharSequence getTopic() {
    return topic;
  }

  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.CharSequence value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Integer value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return The value of the 'partition' field.
   */
  public java.lang.Integer getPartition() {
    return partition;
  }

  /**
   * Sets the value of the 'partition' field.
   * @param value the value to set.
   */
  public void setPartition(java.lang.Integer value) {
    this.partition = value;
  }

  /**
   * Creates a new OffsetFetchRequest RecordBuilder.
   * @return A new OffsetFetchRequest RecordBuilder
   */
  public static eu.driver.model.core.OffsetFetchRequest.Builder newBuilder() {
    return new eu.driver.model.core.OffsetFetchRequest.Builder();
  }

  /**
   * Creates a new OffsetFetchRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OffsetFetchRequest RecordBuilder
   */
  public static eu.driver.model.core.OffsetFetchRequest.Builder newBuilder(eu.driver.model.core.OffsetFetchRequest.Builder other) {
    return new eu.driver.model.core.OffsetFetchRequest.Builder(other);
  }

  /**
   * Creates a new OffsetFetchRequest RecordBuilder by copying an existing OffsetFetchRequest instance.
   * @param other The existing instance to copy.
   * @return A new OffsetFetchRequest RecordBuilder
   */
  public static eu.driver.model.core.OffsetFetchRequest.Builder newBuilder(eu.driver.model.core.OffsetFetchRequest other) {
    return new eu.driver.model.core.OffsetFetchRequest.Builder(other);
  }

  /**
   * RecordBuilder for OffsetFetchRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OffsetFetchRequest>
    implements org.apache.avro.data.RecordBuilder<OffsetFetchRequest> {

    private java.lang.CharSequence topic;
    private java.lang.Integer offset;
    private java.lang.Integer partition;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.core.OffsetFetchRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offset)) {
        this.offset = data().deepCopy(fields()[1].schema(), other.offset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.partition)) {
        this.partition = data().deepCopy(fields()[2].schema(), other.partition);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OffsetFetchRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.core.OffsetFetchRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offset)) {
        this.offset = data().deepCopy(fields()[1].schema(), other.offset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.partition)) {
        this.partition = data().deepCopy(fields()[2].schema(), other.partition);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.CharSequence getTopic() {
      return topic;
    }

    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder setTopic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.topic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Integer getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder setOffset(java.lang.Integer value) {
      validate(fields()[1], value);
      this.offset = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder clearOffset() {
      offset = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * @return The value.
      */
    public java.lang.Integer getPartition() {
      return partition;
    }

    /**
      * Sets the value of the 'partition' field.
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder setPartition(java.lang.Integer value) {
      validate(fields()[2], value);
      this.partition = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'partition' field.
      * @return This builder.
      */
    public eu.driver.model.core.OffsetFetchRequest.Builder clearPartition() {
      partition = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OffsetFetchRequest build() {
      try {
        OffsetFetchRequest record = new OffsetFetchRequest();
        record.topic = fieldSetFlags()[0] ? this.topic : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.offset = fieldSetFlags()[1] ? this.offset : (java.lang.Integer) defaultValue(fields()[1]);
        record.partition = fieldSetFlags()[2] ? this.partition : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OffsetFetchRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<OffsetFetchRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OffsetFetchRequest>
    READER$ = (org.apache.avro.io.DatumReader<OffsetFetchRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
