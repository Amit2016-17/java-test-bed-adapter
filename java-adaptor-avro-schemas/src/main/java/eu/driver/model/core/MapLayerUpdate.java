/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.core;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Message for indicating a new or updated map layer */
@org.apache.avro.specific.AvroGenerated
public class MapLayerUpdate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7580433586664693169L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MapLayerUpdate\",\"namespace\":\"eu.driver.model.core\",\"doc\":\"Message for indicating a new or updated map layer\",\"fields\":[{\"name\":\"url\",\"type\":\"string\",\"doc\":\"Link to the layer\"},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional title of the data file, e.g. to serve it via WMS or otherwise\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional description of the file\",\"default\":null},{\"name\":\"username\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional username when security is enabled\",\"default\":null},{\"name\":\"password\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional password when security is enabled\",\"default\":null},{\"name\":\"updateType\",\"type\":{\"type\":\"enum\",\"name\":\"UpdateType\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\"]},\"doc\":\"Create, update, delete\"},{\"name\":\"layerType\",\"type\":{\"type\":\"enum\",\"name\":\"LayerType\",\"symbols\":[\"WMS\",\"WMTS\",\"WCS\",\"WFS\",\"OTHER\"]},\"doc\":\"The type of layer that is offered\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MapLayerUpdate> ENCODER =
      new BinaryMessageEncoder<MapLayerUpdate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MapLayerUpdate> DECODER =
      new BinaryMessageDecoder<MapLayerUpdate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MapLayerUpdate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MapLayerUpdate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MapLayerUpdate>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MapLayerUpdate to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MapLayerUpdate from a ByteBuffer. */
  public static MapLayerUpdate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Link to the layer */
  @Deprecated public java.lang.CharSequence url;
  /** Optional title of the data file, e.g. to serve it via WMS or otherwise */
  @Deprecated public java.lang.CharSequence title;
  /** Optional description of the file */
  @Deprecated public java.lang.CharSequence description;
  /** Optional username when security is enabled */
  @Deprecated public java.lang.CharSequence username;
  /** Optional password when security is enabled */
  @Deprecated public java.lang.CharSequence password;
  /** Create, update, delete */
  @Deprecated public eu.driver.model.core.UpdateType updateType;
  /** The type of layer that is offered */
  @Deprecated public eu.driver.model.core.LayerType layerType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MapLayerUpdate() {}

  /**
   * All-args constructor.
   * @param url Link to the layer
   * @param title Optional title of the data file, e.g. to serve it via WMS or otherwise
   * @param description Optional description of the file
   * @param username Optional username when security is enabled
   * @param password Optional password when security is enabled
   * @param updateType Create, update, delete
   * @param layerType The type of layer that is offered
   */
  public MapLayerUpdate(java.lang.CharSequence url, java.lang.CharSequence title, java.lang.CharSequence description, java.lang.CharSequence username, java.lang.CharSequence password, eu.driver.model.core.UpdateType updateType, eu.driver.model.core.LayerType layerType) {
    this.url = url;
    this.title = title;
    this.description = description;
    this.username = username;
    this.password = password;
    this.updateType = updateType;
    this.layerType = layerType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return url;
    case 1: return title;
    case 2: return description;
    case 3: return username;
    case 4: return password;
    case 5: return updateType;
    case 6: return layerType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: url = (java.lang.CharSequence)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: username = (java.lang.CharSequence)value$; break;
    case 4: password = (java.lang.CharSequence)value$; break;
    case 5: updateType = (eu.driver.model.core.UpdateType)value$; break;
    case 6: layerType = (eu.driver.model.core.LayerType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'url' field.
   * @return Link to the layer
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * Link to the layer
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Optional title of the data file, e.g. to serve it via WMS or otherwise
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * Optional title of the data file, e.g. to serve it via WMS or otherwise
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Optional description of the file
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Optional description of the file
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return Optional username when security is enabled
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * Optional username when security is enabled
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return Optional password when security is enabled
   */
  public java.lang.CharSequence getPassword() {
    return password;
  }

  /**
   * Sets the value of the 'password' field.
   * Optional password when security is enabled
   * @param value the value to set.
   */
  public void setPassword(java.lang.CharSequence value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'updateType' field.
   * @return Create, update, delete
   */
  public eu.driver.model.core.UpdateType getUpdateType() {
    return updateType;
  }

  /**
   * Sets the value of the 'updateType' field.
   * Create, update, delete
   * @param value the value to set.
   */
  public void setUpdateType(eu.driver.model.core.UpdateType value) {
    this.updateType = value;
  }

  /**
   * Gets the value of the 'layerType' field.
   * @return The type of layer that is offered
   */
  public eu.driver.model.core.LayerType getLayerType() {
    return layerType;
  }

  /**
   * Sets the value of the 'layerType' field.
   * The type of layer that is offered
   * @param value the value to set.
   */
  public void setLayerType(eu.driver.model.core.LayerType value) {
    this.layerType = value;
  }

  /**
   * Creates a new MapLayerUpdate RecordBuilder.
   * @return A new MapLayerUpdate RecordBuilder
   */
  public static eu.driver.model.core.MapLayerUpdate.Builder newBuilder() {
    return new eu.driver.model.core.MapLayerUpdate.Builder();
  }

  /**
   * Creates a new MapLayerUpdate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MapLayerUpdate RecordBuilder
   */
  public static eu.driver.model.core.MapLayerUpdate.Builder newBuilder(eu.driver.model.core.MapLayerUpdate.Builder other) {
    return new eu.driver.model.core.MapLayerUpdate.Builder(other);
  }

  /**
   * Creates a new MapLayerUpdate RecordBuilder by copying an existing MapLayerUpdate instance.
   * @param other The existing instance to copy.
   * @return A new MapLayerUpdate RecordBuilder
   */
  public static eu.driver.model.core.MapLayerUpdate.Builder newBuilder(eu.driver.model.core.MapLayerUpdate other) {
    return new eu.driver.model.core.MapLayerUpdate.Builder(other);
  }

  /**
   * RecordBuilder for MapLayerUpdate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MapLayerUpdate>
    implements org.apache.avro.data.RecordBuilder<MapLayerUpdate> {

    /** Link to the layer */
    private java.lang.CharSequence url;
    /** Optional title of the data file, e.g. to serve it via WMS or otherwise */
    private java.lang.CharSequence title;
    /** Optional description of the file */
    private java.lang.CharSequence description;
    /** Optional username when security is enabled */
    private java.lang.CharSequence username;
    /** Optional password when security is enabled */
    private java.lang.CharSequence password;
    /** Create, update, delete */
    private eu.driver.model.core.UpdateType updateType;
    /** The type of layer that is offered */
    private eu.driver.model.core.LayerType layerType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.core.MapLayerUpdate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.url)) {
        this.url = data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.username)) {
        this.username = data().deepCopy(fields()[3].schema(), other.username);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.password)) {
        this.password = data().deepCopy(fields()[4].schema(), other.password);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updateType)) {
        this.updateType = data().deepCopy(fields()[5].schema(), other.updateType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.layerType)) {
        this.layerType = data().deepCopy(fields()[6].schema(), other.layerType);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MapLayerUpdate instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.core.MapLayerUpdate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.url)) {
        this.url = data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.username)) {
        this.username = data().deepCopy(fields()[3].schema(), other.username);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.password)) {
        this.password = data().deepCopy(fields()[4].schema(), other.password);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updateType)) {
        this.updateType = data().deepCopy(fields()[5].schema(), other.updateType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.layerType)) {
        this.layerType = data().deepCopy(fields()[6].schema(), other.layerType);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'url' field.
      * Link to the layer
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * Link to the layer
      * @param value The value of 'url'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.url = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * Link to the layer
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'url' field.
      * Link to the layer
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearUrl() {
      url = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Optional title of the data file, e.g. to serve it via WMS or otherwise
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * Optional title of the data file, e.g. to serve it via WMS or otherwise
      * @param value The value of 'title'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Optional title of the data file, e.g. to serve it via WMS or otherwise
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * Optional title of the data file, e.g. to serve it via WMS or otherwise
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Optional description of the file
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Optional description of the file
      * @param value The value of 'description'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Optional description of the file
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Optional description of the file
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * Optional username when security is enabled
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * Optional username when security is enabled
      * @param value The value of 'username'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.username = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * Optional username when security is enabled
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'username' field.
      * Optional username when security is enabled
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearUsername() {
      username = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * Optional password when security is enabled
      * @return The value.
      */
    public java.lang.CharSequence getPassword() {
      return password;
    }

    /**
      * Sets the value of the 'password' field.
      * Optional password when security is enabled
      * @param value The value of 'password'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setPassword(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.password = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * Optional password when security is enabled
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'password' field.
      * Optional password when security is enabled
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearPassword() {
      password = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateType' field.
      * Create, update, delete
      * @return The value.
      */
    public eu.driver.model.core.UpdateType getUpdateType() {
      return updateType;
    }

    /**
      * Sets the value of the 'updateType' field.
      * Create, update, delete
      * @param value The value of 'updateType'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setUpdateType(eu.driver.model.core.UpdateType value) {
      validate(fields()[5], value);
      this.updateType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'updateType' field has been set.
      * Create, update, delete
      * @return True if the 'updateType' field has been set, false otherwise.
      */
    public boolean hasUpdateType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'updateType' field.
      * Create, update, delete
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearUpdateType() {
      updateType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'layerType' field.
      * The type of layer that is offered
      * @return The value.
      */
    public eu.driver.model.core.LayerType getLayerType() {
      return layerType;
    }

    /**
      * Sets the value of the 'layerType' field.
      * The type of layer that is offered
      * @param value The value of 'layerType'.
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder setLayerType(eu.driver.model.core.LayerType value) {
      validate(fields()[6], value);
      this.layerType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'layerType' field has been set.
      * The type of layer that is offered
      * @return True if the 'layerType' field has been set, false otherwise.
      */
    public boolean hasLayerType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'layerType' field.
      * The type of layer that is offered
      * @return This builder.
      */
    public eu.driver.model.core.MapLayerUpdate.Builder clearLayerType() {
      layerType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MapLayerUpdate build() {
      try {
        MapLayerUpdate record = new MapLayerUpdate();
        record.url = fieldSetFlags()[0] ? this.url : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.username = fieldSetFlags()[3] ? this.username : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.password = fieldSetFlags()[4] ? this.password : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.updateType = fieldSetFlags()[5] ? this.updateType : (eu.driver.model.core.UpdateType) defaultValue(fields()[5]);
        record.layerType = fieldSetFlags()[6] ? this.layerType : (eu.driver.model.core.LayerType) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MapLayerUpdate>
    WRITER$ = (org.apache.avro.io.DatumWriter<MapLayerUpdate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MapLayerUpdate>
    READER$ = (org.apache.avro.io.DatumReader<MapLayerUpdate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
