/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.core;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This message represents one observation of one observer that was provided by the app. */
@org.apache.avro.specific.AvroGenerated
public class ObserverToolAnswer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5138030300845259098L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObserverToolAnswer\",\"namespace\":\"eu.driver.model.core\",\"doc\":\"This message represents one observation of one observer that was provided by the app.\",\"fields\":[{\"name\":\"trialId\",\"type\":\"int\",\"doc\":\"The unique identifier of the running Trial.\"},{\"name\":\"sessionId\",\"type\":\"int\",\"doc\":\"The sessionId for the running Trial.\"},{\"name\":\"answerId\",\"type\":\"int\",\"doc\":\"The id of the answer in OST databased.\"},{\"name\":\"timeSendUTC\",\"type\":\"long\",\"doc\":\"The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"timeWhen\",\"type\":\"long\",\"doc\":\"The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"observationTypeName\",\"type\":\"string\",\"doc\":\"The name of the questionnaire.\"},{\"name\":\"observervationTypeId\",\"type\":\"int\",\"doc\":\"The id of the questionnaire in the OST database.\"},{\"name\":\"observationTypeDescription\",\"type\":\"string\",\"doc\":\"The description of the questionnaire.\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"The description provided by the user at the end of the questionnaire (attachments section).\"},{\"name\":\"multiplicity\",\"type\":\"boolean\",\"doc\":\"The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).\"},{\"name\":\"questions\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"question\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"The id of the question in OST database.\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The question.\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"The additional clarifications shown below the question.\"},{\"name\":\"answer\",\"type\":\"string\",\"doc\":\"The answer marked by the user (names of radio buttons, names of checkboxes, value of slider or text).\"},{\"name\":\"comment\",\"type\":\"string\",\"doc\":\"The comment provided by the user below the question.\"},{\"name\":\"typeOfQuestion\",\"type\":{\"type\":\"enum\",\"name\":\"TypeOfQuestion\",\"symbols\":[\"slider\",\"checkbox\",\"radiobutton\",\"text\"]}}]},{\"type\":\"array\",\"items\":\"question\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ObserverToolAnswer> ENCODER =
      new BinaryMessageEncoder<ObserverToolAnswer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ObserverToolAnswer> DECODER =
      new BinaryMessageDecoder<ObserverToolAnswer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ObserverToolAnswer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ObserverToolAnswer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ObserverToolAnswer>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ObserverToolAnswer to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ObserverToolAnswer from a ByteBuffer. */
  public static ObserverToolAnswer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the running Trial. */
  @Deprecated public int trialId;
  /** The sessionId for the running Trial. */
  @Deprecated public int sessionId;
  /** The id of the answer in OST databased. */
  @Deprecated public int answerId;
  /** The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long timeSendUTC;
  /** The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long timeWhen;
  /** The name of the questionnaire. */
  @Deprecated public java.lang.CharSequence observationTypeName;
  /** The id of the questionnaire in the OST database. */
  @Deprecated public int observervationTypeId;
  /** The description of the questionnaire. */
  @Deprecated public java.lang.CharSequence observationTypeDescription;
  /** The description provided by the user at the end of the questionnaire (attachments section). */
  @Deprecated public java.lang.CharSequence description;
  /** The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user). */
  @Deprecated public boolean multiplicity;
  @Deprecated public java.lang.Object questions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObserverToolAnswer() {}

  /**
   * All-args constructor.
   * @param trialId The unique identifier of the running Trial.
   * @param sessionId The sessionId for the running Trial.
   * @param answerId The id of the answer in OST databased.
   * @param timeSendUTC The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param timeWhen The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param observationTypeName The name of the questionnaire.
   * @param observervationTypeId The id of the questionnaire in the OST database.
   * @param observationTypeDescription The description of the questionnaire.
   * @param description The description provided by the user at the end of the questionnaire (attachments section).
   * @param multiplicity The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
   * @param questions The new value for questions
   */
  public ObserverToolAnswer(java.lang.Integer trialId, java.lang.Integer sessionId, java.lang.Integer answerId, java.lang.Long timeSendUTC, java.lang.Long timeWhen, java.lang.CharSequence observationTypeName, java.lang.Integer observervationTypeId, java.lang.CharSequence observationTypeDescription, java.lang.CharSequence description, java.lang.Boolean multiplicity, java.lang.Object questions) {
    this.trialId = trialId;
    this.sessionId = sessionId;
    this.answerId = answerId;
    this.timeSendUTC = timeSendUTC;
    this.timeWhen = timeWhen;
    this.observationTypeName = observationTypeName;
    this.observervationTypeId = observervationTypeId;
    this.observationTypeDescription = observationTypeDescription;
    this.description = description;
    this.multiplicity = multiplicity;
    this.questions = questions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trialId;
    case 1: return sessionId;
    case 2: return answerId;
    case 3: return timeSendUTC;
    case 4: return timeWhen;
    case 5: return observationTypeName;
    case 6: return observervationTypeId;
    case 7: return observationTypeDescription;
    case 8: return description;
    case 9: return multiplicity;
    case 10: return questions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trialId = (java.lang.Integer)value$; break;
    case 1: sessionId = (java.lang.Integer)value$; break;
    case 2: answerId = (java.lang.Integer)value$; break;
    case 3: timeSendUTC = (java.lang.Long)value$; break;
    case 4: timeWhen = (java.lang.Long)value$; break;
    case 5: observationTypeName = (java.lang.CharSequence)value$; break;
    case 6: observervationTypeId = (java.lang.Integer)value$; break;
    case 7: observationTypeDescription = (java.lang.CharSequence)value$; break;
    case 8: description = (java.lang.CharSequence)value$; break;
    case 9: multiplicity = (java.lang.Boolean)value$; break;
    case 10: questions = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trialId' field.
   * @return The unique identifier of the running Trial.
   */
  public java.lang.Integer getTrialId() {
    return trialId;
  }

  /**
   * Sets the value of the 'trialId' field.
   * The unique identifier of the running Trial.
   * @param value the value to set.
   */
  public void setTrialId(java.lang.Integer value) {
    this.trialId = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return The sessionId for the running Trial.
   */
  public java.lang.Integer getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * The sessionId for the running Trial.
   * @param value the value to set.
   */
  public void setSessionId(java.lang.Integer value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'answerId' field.
   * @return The id of the answer in OST databased.
   */
  public java.lang.Integer getAnswerId() {
    return answerId;
  }

  /**
   * Sets the value of the 'answerId' field.
   * The id of the answer in OST databased.
   * @param value the value to set.
   */
  public void setAnswerId(java.lang.Integer value) {
    this.answerId = value;
  }

  /**
   * Gets the value of the 'timeSendUTC' field.
   * @return The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getTimeSendUTC() {
    return timeSendUTC;
  }

  /**
   * Sets the value of the 'timeSendUTC' field.
   * The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setTimeSendUTC(java.lang.Long value) {
    this.timeSendUTC = value;
  }

  /**
   * Gets the value of the 'timeWhen' field.
   * @return The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getTimeWhen() {
    return timeWhen;
  }

  /**
   * Sets the value of the 'timeWhen' field.
   * The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setTimeWhen(java.lang.Long value) {
    this.timeWhen = value;
  }

  /**
   * Gets the value of the 'observationTypeName' field.
   * @return The name of the questionnaire.
   */
  public java.lang.CharSequence getObservationTypeName() {
    return observationTypeName;
  }

  /**
   * Sets the value of the 'observationTypeName' field.
   * The name of the questionnaire.
   * @param value the value to set.
   */
  public void setObservationTypeName(java.lang.CharSequence value) {
    this.observationTypeName = value;
  }

  /**
   * Gets the value of the 'observervationTypeId' field.
   * @return The id of the questionnaire in the OST database.
   */
  public java.lang.Integer getObservervationTypeId() {
    return observervationTypeId;
  }

  /**
   * Sets the value of the 'observervationTypeId' field.
   * The id of the questionnaire in the OST database.
   * @param value the value to set.
   */
  public void setObservervationTypeId(java.lang.Integer value) {
    this.observervationTypeId = value;
  }

  /**
   * Gets the value of the 'observationTypeDescription' field.
   * @return The description of the questionnaire.
   */
  public java.lang.CharSequence getObservationTypeDescription() {
    return observationTypeDescription;
  }

  /**
   * Sets the value of the 'observationTypeDescription' field.
   * The description of the questionnaire.
   * @param value the value to set.
   */
  public void setObservationTypeDescription(java.lang.CharSequence value) {
    this.observationTypeDescription = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The description provided by the user at the end of the questionnaire (attachments section).
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * The description provided by the user at the end of the questionnaire (attachments section).
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'multiplicity' field.
   * @return The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
   */
  public java.lang.Boolean getMultiplicity() {
    return multiplicity;
  }

  /**
   * Sets the value of the 'multiplicity' field.
   * The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
   * @param value the value to set.
   */
  public void setMultiplicity(java.lang.Boolean value) {
    this.multiplicity = value;
  }

  /**
   * Gets the value of the 'questions' field.
   * @return The value of the 'questions' field.
   */
  public java.lang.Object getQuestions() {
    return questions;
  }

  /**
   * Sets the value of the 'questions' field.
   * @param value the value to set.
   */
  public void setQuestions(java.lang.Object value) {
    this.questions = value;
  }

  /**
   * Creates a new ObserverToolAnswer RecordBuilder.
   * @return A new ObserverToolAnswer RecordBuilder
   */
  public static eu.driver.model.core.ObserverToolAnswer.Builder newBuilder() {
    return new eu.driver.model.core.ObserverToolAnswer.Builder();
  }

  /**
   * Creates a new ObserverToolAnswer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObserverToolAnswer RecordBuilder
   */
  public static eu.driver.model.core.ObserverToolAnswer.Builder newBuilder(eu.driver.model.core.ObserverToolAnswer.Builder other) {
    return new eu.driver.model.core.ObserverToolAnswer.Builder(other);
  }

  /**
   * Creates a new ObserverToolAnswer RecordBuilder by copying an existing ObserverToolAnswer instance.
   * @param other The existing instance to copy.
   * @return A new ObserverToolAnswer RecordBuilder
   */
  public static eu.driver.model.core.ObserverToolAnswer.Builder newBuilder(eu.driver.model.core.ObserverToolAnswer other) {
    return new eu.driver.model.core.ObserverToolAnswer.Builder(other);
  }

  /**
   * RecordBuilder for ObserverToolAnswer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObserverToolAnswer>
    implements org.apache.avro.data.RecordBuilder<ObserverToolAnswer> {

    /** The unique identifier of the running Trial. */
    private int trialId;
    /** The sessionId for the running Trial. */
    private int sessionId;
    /** The id of the answer in OST databased. */
    private int answerId;
    /** The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long timeSendUTC;
    /** The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long timeWhen;
    /** The name of the questionnaire. */
    private java.lang.CharSequence observationTypeName;
    /** The id of the questionnaire in the OST database. */
    private int observervationTypeId;
    /** The description of the questionnaire. */
    private java.lang.CharSequence observationTypeDescription;
    /** The description provided by the user at the end of the questionnaire (attachments section). */
    private java.lang.CharSequence description;
    /** The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user). */
    private boolean multiplicity;
    private java.lang.Object questions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.core.ObserverToolAnswer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.answerId)) {
        this.answerId = data().deepCopy(fields()[2].schema(), other.answerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeSendUTC)) {
        this.timeSendUTC = data().deepCopy(fields()[3].schema(), other.timeSendUTC);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timeWhen)) {
        this.timeWhen = data().deepCopy(fields()[4].schema(), other.timeWhen);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.observationTypeName)) {
        this.observationTypeName = data().deepCopy(fields()[5].schema(), other.observationTypeName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.observervationTypeId)) {
        this.observervationTypeId = data().deepCopy(fields()[6].schema(), other.observervationTypeId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.observationTypeDescription)) {
        this.observationTypeDescription = data().deepCopy(fields()[7].schema(), other.observationTypeDescription);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.multiplicity)) {
        this.multiplicity = data().deepCopy(fields()[9].schema(), other.multiplicity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.questions)) {
        this.questions = data().deepCopy(fields()[10].schema(), other.questions);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ObserverToolAnswer instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.core.ObserverToolAnswer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.answerId)) {
        this.answerId = data().deepCopy(fields()[2].schema(), other.answerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeSendUTC)) {
        this.timeSendUTC = data().deepCopy(fields()[3].schema(), other.timeSendUTC);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timeWhen)) {
        this.timeWhen = data().deepCopy(fields()[4].schema(), other.timeWhen);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.observationTypeName)) {
        this.observationTypeName = data().deepCopy(fields()[5].schema(), other.observationTypeName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.observervationTypeId)) {
        this.observervationTypeId = data().deepCopy(fields()[6].schema(), other.observervationTypeId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.observationTypeDescription)) {
        this.observationTypeDescription = data().deepCopy(fields()[7].schema(), other.observationTypeDescription);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.multiplicity)) {
        this.multiplicity = data().deepCopy(fields()[9].schema(), other.multiplicity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.questions)) {
        this.questions = data().deepCopy(fields()[10].schema(), other.questions);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @return The value.
      */
    public java.lang.Integer getTrialId() {
      return trialId;
    }

    /**
      * Sets the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @param value The value of 'trialId'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setTrialId(int value) {
      validate(fields()[0], value);
      this.trialId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trialId' field has been set.
      * The unique identifier of the running Trial.
      * @return True if the 'trialId' field has been set, false otherwise.
      */
    public boolean hasTrialId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearTrialId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * The sessionId for the running Trial.
      * @return The value.
      */
    public java.lang.Integer getSessionId() {
      return sessionId;
    }

    /**
      * Sets the value of the 'sessionId' field.
      * The sessionId for the running Trial.
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setSessionId(int value) {
      validate(fields()[1], value);
      this.sessionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * The sessionId for the running Trial.
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * The sessionId for the running Trial.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearSessionId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'answerId' field.
      * The id of the answer in OST databased.
      * @return The value.
      */
    public java.lang.Integer getAnswerId() {
      return answerId;
    }

    /**
      * Sets the value of the 'answerId' field.
      * The id of the answer in OST databased.
      * @param value The value of 'answerId'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setAnswerId(int value) {
      validate(fields()[2], value);
      this.answerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'answerId' field has been set.
      * The id of the answer in OST databased.
      * @return True if the 'answerId' field has been set, false otherwise.
      */
    public boolean hasAnswerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'answerId' field.
      * The id of the answer in OST databased.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearAnswerId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeSendUTC' field.
      * The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getTimeSendUTC() {
      return timeSendUTC;
    }

    /**
      * Sets the value of the 'timeSendUTC' field.
      * The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'timeSendUTC'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setTimeSendUTC(long value) {
      validate(fields()[3], value);
      this.timeSendUTC = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timeSendUTC' field has been set.
      * The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'timeSendUTC' field has been set, false otherwise.
      */
    public boolean hasTimeSendUTC() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timeSendUTC' field.
      * The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearTimeSendUTC() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeWhen' field.
      * The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getTimeWhen() {
      return timeWhen;
    }

    /**
      * Sets the value of the 'timeWhen' field.
      * The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'timeWhen'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setTimeWhen(long value) {
      validate(fields()[4], value);
      this.timeWhen = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timeWhen' field has been set.
      * The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'timeWhen' field has been set, false otherwise.
      */
    public boolean hasTimeWhen() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timeWhen' field.
      * The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearTimeWhen() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'observationTypeName' field.
      * The name of the questionnaire.
      * @return The value.
      */
    public java.lang.CharSequence getObservationTypeName() {
      return observationTypeName;
    }

    /**
      * Sets the value of the 'observationTypeName' field.
      * The name of the questionnaire.
      * @param value The value of 'observationTypeName'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setObservationTypeName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.observationTypeName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'observationTypeName' field has been set.
      * The name of the questionnaire.
      * @return True if the 'observationTypeName' field has been set, false otherwise.
      */
    public boolean hasObservationTypeName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'observationTypeName' field.
      * The name of the questionnaire.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearObservationTypeName() {
      observationTypeName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'observervationTypeId' field.
      * The id of the questionnaire in the OST database.
      * @return The value.
      */
    public java.lang.Integer getObservervationTypeId() {
      return observervationTypeId;
    }

    /**
      * Sets the value of the 'observervationTypeId' field.
      * The id of the questionnaire in the OST database.
      * @param value The value of 'observervationTypeId'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setObservervationTypeId(int value) {
      validate(fields()[6], value);
      this.observervationTypeId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'observervationTypeId' field has been set.
      * The id of the questionnaire in the OST database.
      * @return True if the 'observervationTypeId' field has been set, false otherwise.
      */
    public boolean hasObservervationTypeId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'observervationTypeId' field.
      * The id of the questionnaire in the OST database.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearObservervationTypeId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'observationTypeDescription' field.
      * The description of the questionnaire.
      * @return The value.
      */
    public java.lang.CharSequence getObservationTypeDescription() {
      return observationTypeDescription;
    }

    /**
      * Sets the value of the 'observationTypeDescription' field.
      * The description of the questionnaire.
      * @param value The value of 'observationTypeDescription'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setObservationTypeDescription(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.observationTypeDescription = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'observationTypeDescription' field has been set.
      * The description of the questionnaire.
      * @return True if the 'observationTypeDescription' field has been set, false otherwise.
      */
    public boolean hasObservationTypeDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'observationTypeDescription' field.
      * The description of the questionnaire.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearObservationTypeDescription() {
      observationTypeDescription = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * The description provided by the user at the end of the questionnaire (attachments section).
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * The description provided by the user at the end of the questionnaire (attachments section).
      * @param value The value of 'description'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.description = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * The description provided by the user at the end of the questionnaire (attachments section).
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'description' field.
      * The description provided by the user at the end of the questionnaire (attachments section).
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearDescription() {
      description = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'multiplicity' field.
      * The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
      * @return The value.
      */
    public java.lang.Boolean getMultiplicity() {
      return multiplicity;
    }

    /**
      * Sets the value of the 'multiplicity' field.
      * The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
      * @param value The value of 'multiplicity'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setMultiplicity(boolean value) {
      validate(fields()[9], value);
      this.multiplicity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'multiplicity' field has been set.
      * The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
      * @return True if the 'multiplicity' field has been set, false otherwise.
      */
    public boolean hasMultiplicity() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'multiplicity' field.
      * The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearMultiplicity() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'questions' field.
      * @return The value.
      */
    public java.lang.Object getQuestions() {
      return questions;
    }

    /**
      * Sets the value of the 'questions' field.
      * @param value The value of 'questions'.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder setQuestions(java.lang.Object value) {
      validate(fields()[10], value);
      this.questions = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'questions' field has been set.
      * @return True if the 'questions' field has been set, false otherwise.
      */
    public boolean hasQuestions() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'questions' field.
      * @return This builder.
      */
    public eu.driver.model.core.ObserverToolAnswer.Builder clearQuestions() {
      questions = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ObserverToolAnswer build() {
      try {
        ObserverToolAnswer record = new ObserverToolAnswer();
        record.trialId = fieldSetFlags()[0] ? this.trialId : (java.lang.Integer) defaultValue(fields()[0]);
        record.sessionId = fieldSetFlags()[1] ? this.sessionId : (java.lang.Integer) defaultValue(fields()[1]);
        record.answerId = fieldSetFlags()[2] ? this.answerId : (java.lang.Integer) defaultValue(fields()[2]);
        record.timeSendUTC = fieldSetFlags()[3] ? this.timeSendUTC : (java.lang.Long) defaultValue(fields()[3]);
        record.timeWhen = fieldSetFlags()[4] ? this.timeWhen : (java.lang.Long) defaultValue(fields()[4]);
        record.observationTypeName = fieldSetFlags()[5] ? this.observationTypeName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.observervationTypeId = fieldSetFlags()[6] ? this.observervationTypeId : (java.lang.Integer) defaultValue(fields()[6]);
        record.observationTypeDescription = fieldSetFlags()[7] ? this.observationTypeDescription : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.description = fieldSetFlags()[8] ? this.description : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.multiplicity = fieldSetFlags()[9] ? this.multiplicity : (java.lang.Boolean) defaultValue(fields()[9]);
        record.questions = fieldSetFlags()[10] ? this.questions : (java.lang.Object) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ObserverToolAnswer>
    WRITER$ = (org.apache.avro.io.DatumWriter<ObserverToolAnswer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ObserverToolAnswer>
    READER$ = (org.apache.avro.io.DatumReader<ObserverToolAnswer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
