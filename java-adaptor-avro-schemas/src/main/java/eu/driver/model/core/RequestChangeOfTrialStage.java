/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.core;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** With this message the observer toll gets informed about a new trial state. */
@org.apache.avro.specific.AvroGenerated
public class RequestChangeOfTrialStage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7745848767922458494L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RequestChangeOfTrialStage\",\"namespace\":\"eu.driver.model.core\",\"doc\":\"With this message the observer toll gets informed about a new trial state.\",\"fields\":[{\"name\":\"trialId\",\"type\":\"int\",\"doc\":\"The unique identifier of the running Trial.\"},{\"name\":\"trialSessionId\",\"type\":\"int\",\"doc\":\"The sessionId for the running Trial.\"},{\"name\":\"trialStageId\",\"type\":\"int\",\"doc\":\"The stageId of the stage that should be activated.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RequestChangeOfTrialStage> ENCODER =
      new BinaryMessageEncoder<RequestChangeOfTrialStage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RequestChangeOfTrialStage> DECODER =
      new BinaryMessageDecoder<RequestChangeOfTrialStage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RequestChangeOfTrialStage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RequestChangeOfTrialStage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RequestChangeOfTrialStage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RequestChangeOfTrialStage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RequestChangeOfTrialStage from a ByteBuffer. */
  public static RequestChangeOfTrialStage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the running Trial. */
  @Deprecated public int trialId;
  /** The sessionId for the running Trial. */
  @Deprecated public int trialSessionId;
  /** The stageId of the stage that should be activated. */
  @Deprecated public int trialStageId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RequestChangeOfTrialStage() {}

  /**
   * All-args constructor.
   * @param trialId The unique identifier of the running Trial.
   * @param trialSessionId The sessionId for the running Trial.
   * @param trialStageId The stageId of the stage that should be activated.
   */
  public RequestChangeOfTrialStage(java.lang.Integer trialId, java.lang.Integer trialSessionId, java.lang.Integer trialStageId) {
    this.trialId = trialId;
    this.trialSessionId = trialSessionId;
    this.trialStageId = trialStageId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trialId;
    case 1: return trialSessionId;
    case 2: return trialStageId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trialId = (java.lang.Integer)value$; break;
    case 1: trialSessionId = (java.lang.Integer)value$; break;
    case 2: trialStageId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trialId' field.
   * @return The unique identifier of the running Trial.
   */
  public java.lang.Integer getTrialId() {
    return trialId;
  }

  /**
   * Sets the value of the 'trialId' field.
   * The unique identifier of the running Trial.
   * @param value the value to set.
   */
  public void setTrialId(java.lang.Integer value) {
    this.trialId = value;
  }

  /**
   * Gets the value of the 'trialSessionId' field.
   * @return The sessionId for the running Trial.
   */
  public java.lang.Integer getTrialSessionId() {
    return trialSessionId;
  }

  /**
   * Sets the value of the 'trialSessionId' field.
   * The sessionId for the running Trial.
   * @param value the value to set.
   */
  public void setTrialSessionId(java.lang.Integer value) {
    this.trialSessionId = value;
  }

  /**
   * Gets the value of the 'trialStageId' field.
   * @return The stageId of the stage that should be activated.
   */
  public java.lang.Integer getTrialStageId() {
    return trialStageId;
  }

  /**
   * Sets the value of the 'trialStageId' field.
   * The stageId of the stage that should be activated.
   * @param value the value to set.
   */
  public void setTrialStageId(java.lang.Integer value) {
    this.trialStageId = value;
  }

  /**
   * Creates a new RequestChangeOfTrialStage RecordBuilder.
   * @return A new RequestChangeOfTrialStage RecordBuilder
   */
  public static eu.driver.model.core.RequestChangeOfTrialStage.Builder newBuilder() {
    return new eu.driver.model.core.RequestChangeOfTrialStage.Builder();
  }

  /**
   * Creates a new RequestChangeOfTrialStage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RequestChangeOfTrialStage RecordBuilder
   */
  public static eu.driver.model.core.RequestChangeOfTrialStage.Builder newBuilder(eu.driver.model.core.RequestChangeOfTrialStage.Builder other) {
    return new eu.driver.model.core.RequestChangeOfTrialStage.Builder(other);
  }

  /**
   * Creates a new RequestChangeOfTrialStage RecordBuilder by copying an existing RequestChangeOfTrialStage instance.
   * @param other The existing instance to copy.
   * @return A new RequestChangeOfTrialStage RecordBuilder
   */
  public static eu.driver.model.core.RequestChangeOfTrialStage.Builder newBuilder(eu.driver.model.core.RequestChangeOfTrialStage other) {
    return new eu.driver.model.core.RequestChangeOfTrialStage.Builder(other);
  }

  /**
   * RecordBuilder for RequestChangeOfTrialStage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RequestChangeOfTrialStage>
    implements org.apache.avro.data.RecordBuilder<RequestChangeOfTrialStage> {

    /** The unique identifier of the running Trial. */
    private int trialId;
    /** The sessionId for the running Trial. */
    private int trialSessionId;
    /** The stageId of the stage that should be activated. */
    private int trialStageId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.core.RequestChangeOfTrialStage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.trialSessionId)) {
        this.trialSessionId = data().deepCopy(fields()[1].schema(), other.trialSessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.trialStageId)) {
        this.trialStageId = data().deepCopy(fields()[2].schema(), other.trialStageId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RequestChangeOfTrialStage instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.core.RequestChangeOfTrialStage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.trialSessionId)) {
        this.trialSessionId = data().deepCopy(fields()[1].schema(), other.trialSessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.trialStageId)) {
        this.trialStageId = data().deepCopy(fields()[2].schema(), other.trialStageId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @return The value.
      */
    public java.lang.Integer getTrialId() {
      return trialId;
    }

    /**
      * Sets the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @param value The value of 'trialId'.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder setTrialId(int value) {
      validate(fields()[0], value);
      this.trialId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trialId' field has been set.
      * The unique identifier of the running Trial.
      * @return True if the 'trialId' field has been set, false otherwise.
      */
    public boolean hasTrialId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trialId' field.
      * The unique identifier of the running Trial.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder clearTrialId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'trialSessionId' field.
      * The sessionId for the running Trial.
      * @return The value.
      */
    public java.lang.Integer getTrialSessionId() {
      return trialSessionId;
    }

    /**
      * Sets the value of the 'trialSessionId' field.
      * The sessionId for the running Trial.
      * @param value The value of 'trialSessionId'.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder setTrialSessionId(int value) {
      validate(fields()[1], value);
      this.trialSessionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'trialSessionId' field has been set.
      * The sessionId for the running Trial.
      * @return True if the 'trialSessionId' field has been set, false otherwise.
      */
    public boolean hasTrialSessionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'trialSessionId' field.
      * The sessionId for the running Trial.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder clearTrialSessionId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'trialStageId' field.
      * The stageId of the stage that should be activated.
      * @return The value.
      */
    public java.lang.Integer getTrialStageId() {
      return trialStageId;
    }

    /**
      * Sets the value of the 'trialStageId' field.
      * The stageId of the stage that should be activated.
      * @param value The value of 'trialStageId'.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder setTrialStageId(int value) {
      validate(fields()[2], value);
      this.trialStageId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'trialStageId' field has been set.
      * The stageId of the stage that should be activated.
      * @return True if the 'trialStageId' field has been set, false otherwise.
      */
    public boolean hasTrialStageId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'trialStageId' field.
      * The stageId of the stage that should be activated.
      * @return This builder.
      */
    public eu.driver.model.core.RequestChangeOfTrialStage.Builder clearTrialStageId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RequestChangeOfTrialStage build() {
      try {
        RequestChangeOfTrialStage record = new RequestChangeOfTrialStage();
        record.trialId = fieldSetFlags()[0] ? this.trialId : (java.lang.Integer) defaultValue(fields()[0]);
        record.trialSessionId = fieldSetFlags()[1] ? this.trialSessionId : (java.lang.Integer) defaultValue(fields()[1]);
        record.trialStageId = fieldSetFlags()[2] ? this.trialStageId : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RequestChangeOfTrialStage>
    WRITER$ = (org.apache.avro.io.DatumWriter<RequestChangeOfTrialStage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RequestChangeOfTrialStage>
    READER$ = (org.apache.avro.io.DatumReader<RequestChangeOfTrialStage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
