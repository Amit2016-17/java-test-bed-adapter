/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.sim;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** ABSTRACT, do not use this record in general, the fields are incorporated inside all sub classes!! *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE* */
@org.apache.avro.specific.AvroGenerated
public class Base extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7805283062670089050L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Base\",\"namespace\":\"eu.driver.model.sim\",\"doc\":\"ABSTRACT, do not use this record in general, the fields are incorporated inside all sub classes!! *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE*\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"globally unique identifier for this entity/connection\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"name of this entity/connection\"},{\"name\":\"owner\",\"type\":\"string\",\"doc\":\"identifier of the simulator currently responsible for this entity/connection\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Base> ENCODER =
      new BinaryMessageEncoder<Base>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Base> DECODER =
      new BinaryMessageDecoder<Base>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Base> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Base> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Base>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Base to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Base from a ByteBuffer. */
  public static Base fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** globally unique identifier for this entity/connection */
  @Deprecated public java.lang.CharSequence guid;
  /** name of this entity/connection */
  @Deprecated public java.lang.CharSequence name;
  /** identifier of the simulator currently responsible for this entity/connection */
  @Deprecated public java.lang.CharSequence owner;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Base() {}

  /**
   * All-args constructor.
   * @param guid globally unique identifier for this entity/connection
   * @param name name of this entity/connection
   * @param owner identifier of the simulator currently responsible for this entity/connection
   */
  public Base(java.lang.CharSequence guid, java.lang.CharSequence name, java.lang.CharSequence owner) {
    this.guid = guid;
    this.name = name;
    this.owner = owner;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return name;
    case 2: return owner;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: owner = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return globally unique identifier for this entity/connection
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * globally unique identifier for this entity/connection
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return name of this entity/connection
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of this entity/connection
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return identifier of the simulator currently responsible for this entity/connection
   */
  public java.lang.CharSequence getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * identifier of the simulator currently responsible for this entity/connection
   * @param value the value to set.
   */
  public void setOwner(java.lang.CharSequence value) {
    this.owner = value;
  }

  /**
   * Creates a new Base RecordBuilder.
   * @return A new Base RecordBuilder
   */
  public static eu.driver.model.sim.Base.Builder newBuilder() {
    return new eu.driver.model.sim.Base.Builder();
  }

  /**
   * Creates a new Base RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Base RecordBuilder
   */
  public static eu.driver.model.sim.Base.Builder newBuilder(eu.driver.model.sim.Base.Builder other) {
    return new eu.driver.model.sim.Base.Builder(other);
  }

  /**
   * Creates a new Base RecordBuilder by copying an existing Base instance.
   * @param other The existing instance to copy.
   * @return A new Base RecordBuilder
   */
  public static eu.driver.model.sim.Base.Builder newBuilder(eu.driver.model.sim.Base other) {
    return new eu.driver.model.sim.Base.Builder(other);
  }

  /**
   * RecordBuilder for Base instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Base>
    implements org.apache.avro.data.RecordBuilder<Base> {

    /** globally unique identifier for this entity/connection */
    private java.lang.CharSequence guid;
    /** name of this entity/connection */
    private java.lang.CharSequence name;
    /** identifier of the simulator currently responsible for this entity/connection */
    private java.lang.CharSequence owner;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.sim.Base.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Base instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.sim.Base other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * globally unique identifier for this entity/connection
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * globally unique identifier for this entity/connection
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * globally unique identifier for this entity/connection
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * globally unique identifier for this entity/connection
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * name of this entity/connection
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * name of this entity/connection
      * @param value The value of 'name'.
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * name of this entity/connection
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * name of this entity/connection
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity/connection
      * @return The value.
      */
    public java.lang.CharSequence getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity/connection
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder setOwner(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.owner = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * identifier of the simulator currently responsible for this entity/connection
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'owner' field.
      * identifier of the simulator currently responsible for this entity/connection
      * @return This builder.
      */
    public eu.driver.model.sim.Base.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Base build() {
      try {
        Base record = new Base();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.owner = fieldSetFlags()[2] ? this.owner : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Base>
    WRITER$ = (org.apache.avro.io.DatumWriter<Base>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Base>
    READER$ = (org.apache.avro.io.DatumReader<Base>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
