/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.sim.entity.item;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information if the item is a person */
@org.apache.avro.specific.AvroGenerated
public class PersonType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2861682046635770415L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonType\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"doc\":\"Information if the item is a person\",\"fields\":[{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"PersonSubType\",\"symbols\":[\"MALE\",\"FEMALE\",\"UNKNOWN\"]},\"doc\":\"Gender of the person\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PersonType> ENCODER =
      new BinaryMessageEncoder<PersonType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PersonType> DECODER =
      new BinaryMessageDecoder<PersonType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PersonType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PersonType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PersonType>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PersonType to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PersonType from a ByteBuffer. */
  public static PersonType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Gender of the person */
  @Deprecated public eu.driver.model.sim.entity.item.PersonSubType gender;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonType() {}

  /**
   * All-args constructor.
   * @param gender Gender of the person
   */
  public PersonType(eu.driver.model.sim.entity.item.PersonSubType gender) {
    this.gender = gender;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gender;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gender = (eu.driver.model.sim.entity.item.PersonSubType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gender' field.
   * @return Gender of the person
   */
  public eu.driver.model.sim.entity.item.PersonSubType getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * Gender of the person
   * @param value the value to set.
   */
  public void setGender(eu.driver.model.sim.entity.item.PersonSubType value) {
    this.gender = value;
  }

  /**
   * Creates a new PersonType RecordBuilder.
   * @return A new PersonType RecordBuilder
   */
  public static eu.driver.model.sim.entity.item.PersonType.Builder newBuilder() {
    return new eu.driver.model.sim.entity.item.PersonType.Builder();
  }

  /**
   * Creates a new PersonType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonType RecordBuilder
   */
  public static eu.driver.model.sim.entity.item.PersonType.Builder newBuilder(eu.driver.model.sim.entity.item.PersonType.Builder other) {
    return new eu.driver.model.sim.entity.item.PersonType.Builder(other);
  }

  /**
   * Creates a new PersonType RecordBuilder by copying an existing PersonType instance.
   * @param other The existing instance to copy.
   * @return A new PersonType RecordBuilder
   */
  public static eu.driver.model.sim.entity.item.PersonType.Builder newBuilder(eu.driver.model.sim.entity.item.PersonType other) {
    return new eu.driver.model.sim.entity.item.PersonType.Builder(other);
  }

  /**
   * RecordBuilder for PersonType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonType>
    implements org.apache.avro.data.RecordBuilder<PersonType> {

    /** Gender of the person */
    private eu.driver.model.sim.entity.item.PersonSubType gender;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.sim.entity.item.PersonType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gender)) {
        this.gender = data().deepCopy(fields()[0].schema(), other.gender);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PersonType instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.sim.entity.item.PersonType other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.gender)) {
        this.gender = data().deepCopy(fields()[0].schema(), other.gender);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'gender' field.
      * Gender of the person
      * @return The value.
      */
    public eu.driver.model.sim.entity.item.PersonSubType getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * Gender of the person
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.item.PersonType.Builder setGender(eu.driver.model.sim.entity.item.PersonSubType value) {
      validate(fields()[0], value);
      this.gender = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * Gender of the person
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'gender' field.
      * Gender of the person
      * @return This builder.
      */
    public eu.driver.model.sim.entity.item.PersonType.Builder clearGender() {
      gender = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PersonType build() {
      try {
        PersonType record = new PersonType();
        record.gender = fieldSetFlags()[0] ? this.gender : (eu.driver.model.sim.entity.item.PersonSubType) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PersonType>
    WRITER$ = (org.apache.avro.io.DatumWriter<PersonType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PersonType>
    READER$ = (org.apache.avro.io.DatumReader<PersonType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
