/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.sim.geo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** WGS84/Aviation-based representation of a velocity vector. Right-handed item-specific reference system, with in base-setting heading/yaw-axis pointing down (to the centre of the earth), pitch-axis pointing to the right, roll/bank-axis pointing forward */
@org.apache.avro.specific.AvroGenerated
public class Velocity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8007381348687076656L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver.model.sim.geo\",\"doc\":\"WGS84/Aviation-based representation of a velocity vector. Right-handed item-specific reference system, with in base-setting heading/yaw-axis pointing down (to the centre of the earth), pitch-axis pointing to the right, roll/bank-axis pointing forward\",\"fields\":[{\"name\":\"yaw\",\"type\":\"double\",\"doc\":\"Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST\"},{\"name\":\"pitch\",\"type\":\"double\",\"doc\":\"Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards\"},{\"name\":\"magnitude\",\"type\":\"double\",\"doc\":\"Velocity in meter per second [0, inf) - 0 is standing still relative to the earth\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Velocity> ENCODER =
      new BinaryMessageEncoder<Velocity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Velocity> DECODER =
      new BinaryMessageDecoder<Velocity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Velocity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Velocity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Velocity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Velocity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Velocity from a ByteBuffer. */
  public static Velocity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST */
  @Deprecated public double yaw;
  /** Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards */
  @Deprecated public double pitch;
  /** Velocity in meter per second [0, inf) - 0 is standing still relative to the earth */
  @Deprecated public double magnitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Velocity() {}

  /**
   * All-args constructor.
   * @param yaw Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
   * @param pitch Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
   * @param magnitude Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
   */
  public Velocity(java.lang.Double yaw, java.lang.Double pitch, java.lang.Double magnitude) {
    this.yaw = yaw;
    this.pitch = pitch;
    this.magnitude = magnitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return yaw;
    case 1: return pitch;
    case 2: return magnitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: yaw = (java.lang.Double)value$; break;
    case 1: pitch = (java.lang.Double)value$; break;
    case 2: magnitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'yaw' field.
   * @return Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
   */
  public java.lang.Double getYaw() {
    return yaw;
  }

  /**
   * Sets the value of the 'yaw' field.
   * Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
   * @param value the value to set.
   */
  public void setYaw(java.lang.Double value) {
    this.yaw = value;
  }

  /**
   * Gets the value of the 'pitch' field.
   * @return Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
   */
  public java.lang.Double getPitch() {
    return pitch;
  }

  /**
   * Sets the value of the 'pitch' field.
   * Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
   * @param value the value to set.
   */
  public void setPitch(java.lang.Double value) {
    this.pitch = value;
  }

  /**
   * Gets the value of the 'magnitude' field.
   * @return Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
   */
  public java.lang.Double getMagnitude() {
    return magnitude;
  }

  /**
   * Sets the value of the 'magnitude' field.
   * Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
   * @param value the value to set.
   */
  public void setMagnitude(java.lang.Double value) {
    this.magnitude = value;
  }

  /**
   * Creates a new Velocity RecordBuilder.
   * @return A new Velocity RecordBuilder
   */
  public static eu.driver.model.sim.geo.Velocity.Builder newBuilder() {
    return new eu.driver.model.sim.geo.Velocity.Builder();
  }

  /**
   * Creates a new Velocity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Velocity RecordBuilder
   */
  public static eu.driver.model.sim.geo.Velocity.Builder newBuilder(eu.driver.model.sim.geo.Velocity.Builder other) {
    return new eu.driver.model.sim.geo.Velocity.Builder(other);
  }

  /**
   * Creates a new Velocity RecordBuilder by copying an existing Velocity instance.
   * @param other The existing instance to copy.
   * @return A new Velocity RecordBuilder
   */
  public static eu.driver.model.sim.geo.Velocity.Builder newBuilder(eu.driver.model.sim.geo.Velocity other) {
    return new eu.driver.model.sim.geo.Velocity.Builder(other);
  }

  /**
   * RecordBuilder for Velocity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Velocity>
    implements org.apache.avro.data.RecordBuilder<Velocity> {

    /** Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST */
    private double yaw;
    /** Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards */
    private double pitch;
    /** Velocity in meter per second [0, inf) - 0 is standing still relative to the earth */
    private double magnitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.sim.geo.Velocity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.yaw)) {
        this.yaw = data().deepCopy(fields()[0].schema(), other.yaw);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pitch)) {
        this.pitch = data().deepCopy(fields()[1].schema(), other.pitch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.magnitude)) {
        this.magnitude = data().deepCopy(fields()[2].schema(), other.magnitude);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Velocity instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.sim.geo.Velocity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.yaw)) {
        this.yaw = data().deepCopy(fields()[0].schema(), other.yaw);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pitch)) {
        this.pitch = data().deepCopy(fields()[1].schema(), other.pitch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.magnitude)) {
        this.magnitude = data().deepCopy(fields()[2].schema(), other.magnitude);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'yaw' field.
      * Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
      * @return The value.
      */
    public java.lang.Double getYaw() {
      return yaw;
    }

    /**
      * Sets the value of the 'yaw' field.
      * Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
      * @param value The value of 'yaw'.
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder setYaw(double value) {
      validate(fields()[0], value);
      this.yaw = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'yaw' field has been set.
      * Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
      * @return True if the 'yaw' field has been set, false otherwise.
      */
    public boolean hasYaw() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'yaw' field.
      * Yaw or heading in degrees [0, 360) - 0 is pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder clearYaw() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pitch' field.
      * Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
      * @return The value.
      */
    public java.lang.Double getPitch() {
      return pitch;
    }

    /**
      * Sets the value of the 'pitch' field.
      * Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
      * @param value The value of 'pitch'.
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder setPitch(double value) {
      validate(fields()[1], value);
      this.pitch = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pitch' field has been set.
      * Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
      * @return True if the 'pitch' field has been set, false otherwise.
      */
    public boolean hasPitch() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pitch' field.
      * Pitch in degrees (-90, 90] - 0 is perpendicular to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45 degrees pointing upwards, -45 is 45 degrees pointing downwards
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder clearPitch() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'magnitude' field.
      * Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
      * @return The value.
      */
    public java.lang.Double getMagnitude() {
      return magnitude;
    }

    /**
      * Sets the value of the 'magnitude' field.
      * Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
      * @param value The value of 'magnitude'.
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder setMagnitude(double value) {
      validate(fields()[2], value);
      this.magnitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'magnitude' field has been set.
      * Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
      * @return True if the 'magnitude' field has been set, false otherwise.
      */
    public boolean hasMagnitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'magnitude' field.
      * Velocity in meter per second [0, inf) - 0 is standing still relative to the earth
      * @return This builder.
      */
    public eu.driver.model.sim.geo.Velocity.Builder clearMagnitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Velocity build() {
      try {
        Velocity record = new Velocity();
        record.yaw = fieldSetFlags()[0] ? this.yaw : (java.lang.Double) defaultValue(fields()[0]);
        record.pitch = fieldSetFlags()[1] ? this.pitch : (java.lang.Double) defaultValue(fields()[1]);
        record.magnitude = fieldSetFlags()[2] ? this.magnitude : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Velocity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Velocity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Velocity>
    READER$ = (org.apache.avro.io.DatumReader<Velocity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
