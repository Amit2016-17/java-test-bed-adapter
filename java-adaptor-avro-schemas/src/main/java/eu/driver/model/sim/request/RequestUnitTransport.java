/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.sim.request;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Request for transporting a complete unit. *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE* */
@org.apache.avro.specific.AvroGenerated
public class RequestUnitTransport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3028500489906466959L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RequestUnitTransport\",\"namespace\":\"eu.driver.model.sim.request\",\"doc\":\"Request for transporting a complete unit. *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE*\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"Globally unique identifier for this request\"},{\"name\":\"owner\",\"type\":\"string\",\"doc\":\"Identifier of the simulator currently responsible for this request\"},{\"name\":\"unit\",\"type\":\"string\",\"doc\":\"Globally unique identifier for the unit that should transport\"},{\"name\":\"destination\",\"type\":\"string\",\"doc\":\"Globally unique identifier for the station that should be the destination\"},{\"name\":\"route\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.geo\",\"doc\":\"WGS84-based standard representation of a location on earth\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude in degrees (-90, 90] - 0 is equator\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]\"},{\"name\":\"altitude\",\"type\":[\"null\",\"double\"],\"doc\":\"Altitude in meters - 0 is surface of WGS84-based ellipsoid\",\"default\":null}]}}],\"doc\":\"List of locations that describes the route towards the destination\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RequestUnitTransport> ENCODER =
      new BinaryMessageEncoder<RequestUnitTransport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RequestUnitTransport> DECODER =
      new BinaryMessageDecoder<RequestUnitTransport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RequestUnitTransport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RequestUnitTransport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RequestUnitTransport>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RequestUnitTransport to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RequestUnitTransport from a ByteBuffer. */
  public static RequestUnitTransport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Globally unique identifier for this request */
  @Deprecated public java.lang.CharSequence guid;
  /** Identifier of the simulator currently responsible for this request */
  @Deprecated public java.lang.CharSequence owner;
  /** Globally unique identifier for the unit that should transport */
  @Deprecated public java.lang.CharSequence unit;
  /** Globally unique identifier for the station that should be the destination */
  @Deprecated public java.lang.CharSequence destination;
  /** List of locations that describes the route towards the destination */
  @Deprecated public java.util.List<eu.driver.model.sim.geo.Location> route;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RequestUnitTransport() {}

  /**
   * All-args constructor.
   * @param guid Globally unique identifier for this request
   * @param owner Identifier of the simulator currently responsible for this request
   * @param unit Globally unique identifier for the unit that should transport
   * @param destination Globally unique identifier for the station that should be the destination
   * @param route List of locations that describes the route towards the destination
   */
  public RequestUnitTransport(java.lang.CharSequence guid, java.lang.CharSequence owner, java.lang.CharSequence unit, java.lang.CharSequence destination, java.util.List<eu.driver.model.sim.geo.Location> route) {
    this.guid = guid;
    this.owner = owner;
    this.unit = unit;
    this.destination = destination;
    this.route = route;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return owner;
    case 2: return unit;
    case 3: return destination;
    case 4: return route;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: owner = (java.lang.CharSequence)value$; break;
    case 2: unit = (java.lang.CharSequence)value$; break;
    case 3: destination = (java.lang.CharSequence)value$; break;
    case 4: route = (java.util.List<eu.driver.model.sim.geo.Location>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return Globally unique identifier for this request
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * Globally unique identifier for this request
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return Identifier of the simulator currently responsible for this request
   */
  public java.lang.CharSequence getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * Identifier of the simulator currently responsible for this request
   * @param value the value to set.
   */
  public void setOwner(java.lang.CharSequence value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return Globally unique identifier for the unit that should transport
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * Globally unique identifier for the unit that should transport
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return Globally unique identifier for the station that should be the destination
   */
  public java.lang.CharSequence getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * Globally unique identifier for the station that should be the destination
   * @param value the value to set.
   */
  public void setDestination(java.lang.CharSequence value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'route' field.
   * @return List of locations that describes the route towards the destination
   */
  public java.util.List<eu.driver.model.sim.geo.Location> getRoute() {
    return route;
  }

  /**
   * Sets the value of the 'route' field.
   * List of locations that describes the route towards the destination
   * @param value the value to set.
   */
  public void setRoute(java.util.List<eu.driver.model.sim.geo.Location> value) {
    this.route = value;
  }

  /**
   * Creates a new RequestUnitTransport RecordBuilder.
   * @return A new RequestUnitTransport RecordBuilder
   */
  public static eu.driver.model.sim.request.RequestUnitTransport.Builder newBuilder() {
    return new eu.driver.model.sim.request.RequestUnitTransport.Builder();
  }

  /**
   * Creates a new RequestUnitTransport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RequestUnitTransport RecordBuilder
   */
  public static eu.driver.model.sim.request.RequestUnitTransport.Builder newBuilder(eu.driver.model.sim.request.RequestUnitTransport.Builder other) {
    return new eu.driver.model.sim.request.RequestUnitTransport.Builder(other);
  }

  /**
   * Creates a new RequestUnitTransport RecordBuilder by copying an existing RequestUnitTransport instance.
   * @param other The existing instance to copy.
   * @return A new RequestUnitTransport RecordBuilder
   */
  public static eu.driver.model.sim.request.RequestUnitTransport.Builder newBuilder(eu.driver.model.sim.request.RequestUnitTransport other) {
    return new eu.driver.model.sim.request.RequestUnitTransport.Builder(other);
  }

  /**
   * RecordBuilder for RequestUnitTransport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RequestUnitTransport>
    implements org.apache.avro.data.RecordBuilder<RequestUnitTransport> {

    /** Globally unique identifier for this request */
    private java.lang.CharSequence guid;
    /** Identifier of the simulator currently responsible for this request */
    private java.lang.CharSequence owner;
    /** Globally unique identifier for the unit that should transport */
    private java.lang.CharSequence unit;
    /** Globally unique identifier for the station that should be the destination */
    private java.lang.CharSequence destination;
    /** List of locations that describes the route towards the destination */
    private java.util.List<eu.driver.model.sim.geo.Location> route;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.sim.request.RequestUnitTransport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.owner)) {
        this.owner = data().deepCopy(fields()[1].schema(), other.owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.route)) {
        this.route = data().deepCopy(fields()[4].schema(), other.route);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RequestUnitTransport instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.sim.request.RequestUnitTransport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.owner)) {
        this.owner = data().deepCopy(fields()[1].schema(), other.owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.route)) {
        this.route = data().deepCopy(fields()[4].schema(), other.route);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * Globally unique identifier for this request
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * Globally unique identifier for this request
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * Globally unique identifier for this request
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * Globally unique identifier for this request
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this request
      * @return The value.
      */
    public java.lang.CharSequence getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this request
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder setOwner(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.owner = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * Identifier of the simulator currently responsible for this request
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this request
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * Globally unique identifier for the unit that should transport
      * @return The value.
      */
    public java.lang.CharSequence getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * Globally unique identifier for the unit that should transport
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.unit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * Globally unique identifier for the unit that should transport
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unit' field.
      * Globally unique identifier for the unit that should transport
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * Globally unique identifier for the station that should be the destination
      * @return The value.
      */
    public java.lang.CharSequence getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * Globally unique identifier for the station that should be the destination
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder setDestination(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * Globally unique identifier for the station that should be the destination
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination' field.
      * Globally unique identifier for the station that should be the destination
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'route' field.
      * List of locations that describes the route towards the destination
      * @return The value.
      */
    public java.util.List<eu.driver.model.sim.geo.Location> getRoute() {
      return route;
    }

    /**
      * Sets the value of the 'route' field.
      * List of locations that describes the route towards the destination
      * @param value The value of 'route'.
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder setRoute(java.util.List<eu.driver.model.sim.geo.Location> value) {
      validate(fields()[4], value);
      this.route = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'route' field has been set.
      * List of locations that describes the route towards the destination
      * @return True if the 'route' field has been set, false otherwise.
      */
    public boolean hasRoute() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'route' field.
      * List of locations that describes the route towards the destination
      * @return This builder.
      */
    public eu.driver.model.sim.request.RequestUnitTransport.Builder clearRoute() {
      route = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RequestUnitTransport build() {
      try {
        RequestUnitTransport record = new RequestUnitTransport();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.owner = fieldSetFlags()[1] ? this.owner : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.unit = fieldSetFlags()[2] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.destination = fieldSetFlags()[3] ? this.destination : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.route = fieldSetFlags()[4] ? this.route : (java.util.List<eu.driver.model.sim.geo.Location>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RequestUnitTransport>
    WRITER$ = (org.apache.avro.io.DatumWriter<RequestUnitTransport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RequestUnitTransport>
    READER$ = (org.apache.avro.io.DatumReader<RequestUnitTransport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
