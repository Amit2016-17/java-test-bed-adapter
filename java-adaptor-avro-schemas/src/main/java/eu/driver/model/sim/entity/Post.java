/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.sim.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Common Simulation Space Post, representing a media entity inside the simulation world (e.g. email, news article, facebook post, etc.). *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE* */
@org.apache.avro.specific.AvroGenerated
public class Post extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1229830271909884180L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Post\",\"namespace\":\"eu.driver.model.sim.entity\",\"doc\":\"Common Simulation Space Post, representing a media entity inside the simulation world (e.g. email, news article, facebook post, etc.). *Copyright (C) 2017-2018 XVR Simulation B.V., Delft, The Netherlands, Martijn Hendriks <hendriks @ xvrsim.com>. This file is part of DRIVER+ WP923 Test-bed infrastructure project. This file is licensed under the MIT license : https://github.com/DRIVER-EU/avro-schemas/blob/master/LICENSE*\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"Globally unique identifier for this post\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of this post\"},{\"name\":\"owner\",\"type\":\"string\",\"doc\":\"Identifier of the simulator currently responsible for this post\"},{\"name\":\"mediumType\",\"type\":{\"type\":\"enum\",\"name\":\"MediumTypes\",\"namespace\":\"eu.driver.model.sim.entity.post\",\"symbols\":[\"CHAT\",\"INCIDENT_REPORT\",\"MAIL\",\"MICROBLOG\",\"NEWS\",\"SITUATION_REPORT\",\"SOCIAL_NETWORK\",\"VIDEO\"]},\"doc\":\"Type of crisis media medium this post was placed on/in\"},{\"name\":\"mediumName\",\"type\":\"string\",\"doc\":\"Name of the medium this post was placed on/in\"},{\"name\":\"header\",\"type\":[\"null\",\"string\"],\"doc\":\"Title of this post\",\"default\":null},{\"name\":\"intro\",\"type\":[\"null\",\"string\"],\"doc\":\"Introduction of this post\",\"default\":null},{\"name\":\"body\",\"type\":\"string\",\"doc\":\"The body text of this post\"},{\"name\":\"files\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Links to files attached to this post\",\"default\":null},{\"name\":\"visibleForParticipant\",\"type\":\"boolean\",\"doc\":\"Indication whether or not this post is visible for any participant\"},{\"name\":\"senderName\",\"type\":\"string\",\"doc\":\"Name of the sender sending this post\"},{\"name\":\"senderRole\",\"type\":[\"null\",\"string\"],\"doc\":\"Reference to the role sending this post\",\"default\":null},{\"name\":\"recipients\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of references to the roles that should receive this post personally\",\"default\":null},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.geo\",\"doc\":\"WGS84-based standard representation of a location on earth\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude in degrees (-90, 90] - 0 is equator\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]\"},{\"name\":\"altitude\",\"type\":[\"null\",\"double\"],\"doc\":\"Altitude in meters - 0 is surface of WGS84-based ellipsoid\",\"default\":null}]}],\"doc\":\"Location of this item\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Post> ENCODER =
      new BinaryMessageEncoder<Post>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Post> DECODER =
      new BinaryMessageDecoder<Post>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Post> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Post> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Post>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Post to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Post from a ByteBuffer. */
  public static Post fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Globally unique identifier for this post */
  @Deprecated public java.lang.CharSequence guid;
  /** Name of this post */
  @Deprecated public java.lang.CharSequence name;
  /** Identifier of the simulator currently responsible for this post */
  @Deprecated public java.lang.CharSequence owner;
  /** Type of crisis media medium this post was placed on/in */
  @Deprecated public eu.driver.model.sim.entity.post.MediumTypes mediumType;
  /** Name of the medium this post was placed on/in */
  @Deprecated public java.lang.CharSequence mediumName;
  /** Title of this post */
  @Deprecated public java.lang.CharSequence header;
  /** Introduction of this post */
  @Deprecated public java.lang.CharSequence intro;
  /** The body text of this post */
  @Deprecated public java.lang.CharSequence body;
  /** Links to files attached to this post */
  @Deprecated public java.util.List<java.lang.CharSequence> files;
  /** Indication whether or not this post is visible for any participant */
  @Deprecated public boolean visibleForParticipant;
  /** Name of the sender sending this post */
  @Deprecated public java.lang.CharSequence senderName;
  /** Reference to the role sending this post */
  @Deprecated public java.lang.CharSequence senderRole;
  /** List of references to the roles that should receive this post personally */
  @Deprecated public java.util.List<java.lang.CharSequence> recipients;
  /** The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long date;
  /** Location of this item */
  @Deprecated public eu.driver.model.sim.geo.Location location;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Post() {}

  /**
   * All-args constructor.
   * @param guid Globally unique identifier for this post
   * @param name Name of this post
   * @param owner Identifier of the simulator currently responsible for this post
   * @param mediumType Type of crisis media medium this post was placed on/in
   * @param mediumName Name of the medium this post was placed on/in
   * @param header Title of this post
   * @param intro Introduction of this post
   * @param body The body text of this post
   * @param files Links to files attached to this post
   * @param visibleForParticipant Indication whether or not this post is visible for any participant
   * @param senderName Name of the sender sending this post
   * @param senderRole Reference to the role sending this post
   * @param recipients List of references to the roles that should receive this post personally
   * @param date The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param location Location of this item
   */
  public Post(java.lang.CharSequence guid, java.lang.CharSequence name, java.lang.CharSequence owner, eu.driver.model.sim.entity.post.MediumTypes mediumType, java.lang.CharSequence mediumName, java.lang.CharSequence header, java.lang.CharSequence intro, java.lang.CharSequence body, java.util.List<java.lang.CharSequence> files, java.lang.Boolean visibleForParticipant, java.lang.CharSequence senderName, java.lang.CharSequence senderRole, java.util.List<java.lang.CharSequence> recipients, java.lang.Long date, eu.driver.model.sim.geo.Location location) {
    this.guid = guid;
    this.name = name;
    this.owner = owner;
    this.mediumType = mediumType;
    this.mediumName = mediumName;
    this.header = header;
    this.intro = intro;
    this.body = body;
    this.files = files;
    this.visibleForParticipant = visibleForParticipant;
    this.senderName = senderName;
    this.senderRole = senderRole;
    this.recipients = recipients;
    this.date = date;
    this.location = location;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return name;
    case 2: return owner;
    case 3: return mediumType;
    case 4: return mediumName;
    case 5: return header;
    case 6: return intro;
    case 7: return body;
    case 8: return files;
    case 9: return visibleForParticipant;
    case 10: return senderName;
    case 11: return senderRole;
    case 12: return recipients;
    case 13: return date;
    case 14: return location;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: owner = (java.lang.CharSequence)value$; break;
    case 3: mediumType = (eu.driver.model.sim.entity.post.MediumTypes)value$; break;
    case 4: mediumName = (java.lang.CharSequence)value$; break;
    case 5: header = (java.lang.CharSequence)value$; break;
    case 6: intro = (java.lang.CharSequence)value$; break;
    case 7: body = (java.lang.CharSequence)value$; break;
    case 8: files = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: visibleForParticipant = (java.lang.Boolean)value$; break;
    case 10: senderName = (java.lang.CharSequence)value$; break;
    case 11: senderRole = (java.lang.CharSequence)value$; break;
    case 12: recipients = (java.util.List<java.lang.CharSequence>)value$; break;
    case 13: date = (java.lang.Long)value$; break;
    case 14: location = (eu.driver.model.sim.geo.Location)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return Globally unique identifier for this post
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * Globally unique identifier for this post
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of this post
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of this post
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return Identifier of the simulator currently responsible for this post
   */
  public java.lang.CharSequence getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * Identifier of the simulator currently responsible for this post
   * @param value the value to set.
   */
  public void setOwner(java.lang.CharSequence value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'mediumType' field.
   * @return Type of crisis media medium this post was placed on/in
   */
  public eu.driver.model.sim.entity.post.MediumTypes getMediumType() {
    return mediumType;
  }

  /**
   * Sets the value of the 'mediumType' field.
   * Type of crisis media medium this post was placed on/in
   * @param value the value to set.
   */
  public void setMediumType(eu.driver.model.sim.entity.post.MediumTypes value) {
    this.mediumType = value;
  }

  /**
   * Gets the value of the 'mediumName' field.
   * @return Name of the medium this post was placed on/in
   */
  public java.lang.CharSequence getMediumName() {
    return mediumName;
  }

  /**
   * Sets the value of the 'mediumName' field.
   * Name of the medium this post was placed on/in
   * @param value the value to set.
   */
  public void setMediumName(java.lang.CharSequence value) {
    this.mediumName = value;
  }

  /**
   * Gets the value of the 'header' field.
   * @return Title of this post
   */
  public java.lang.CharSequence getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * Title of this post
   * @param value the value to set.
   */
  public void setHeader(java.lang.CharSequence value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'intro' field.
   * @return Introduction of this post
   */
  public java.lang.CharSequence getIntro() {
    return intro;
  }

  /**
   * Sets the value of the 'intro' field.
   * Introduction of this post
   * @param value the value to set.
   */
  public void setIntro(java.lang.CharSequence value) {
    this.intro = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The body text of this post
   */
  public java.lang.CharSequence getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * The body text of this post
   * @param value the value to set.
   */
  public void setBody(java.lang.CharSequence value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'files' field.
   * @return Links to files attached to this post
   */
  public java.util.List<java.lang.CharSequence> getFiles() {
    return files;
  }

  /**
   * Sets the value of the 'files' field.
   * Links to files attached to this post
   * @param value the value to set.
   */
  public void setFiles(java.util.List<java.lang.CharSequence> value) {
    this.files = value;
  }

  /**
   * Gets the value of the 'visibleForParticipant' field.
   * @return Indication whether or not this post is visible for any participant
   */
  public java.lang.Boolean getVisibleForParticipant() {
    return visibleForParticipant;
  }

  /**
   * Sets the value of the 'visibleForParticipant' field.
   * Indication whether or not this post is visible for any participant
   * @param value the value to set.
   */
  public void setVisibleForParticipant(java.lang.Boolean value) {
    this.visibleForParticipant = value;
  }

  /**
   * Gets the value of the 'senderName' field.
   * @return Name of the sender sending this post
   */
  public java.lang.CharSequence getSenderName() {
    return senderName;
  }

  /**
   * Sets the value of the 'senderName' field.
   * Name of the sender sending this post
   * @param value the value to set.
   */
  public void setSenderName(java.lang.CharSequence value) {
    this.senderName = value;
  }

  /**
   * Gets the value of the 'senderRole' field.
   * @return Reference to the role sending this post
   */
  public java.lang.CharSequence getSenderRole() {
    return senderRole;
  }

  /**
   * Sets the value of the 'senderRole' field.
   * Reference to the role sending this post
   * @param value the value to set.
   */
  public void setSenderRole(java.lang.CharSequence value) {
    this.senderRole = value;
  }

  /**
   * Gets the value of the 'recipients' field.
   * @return List of references to the roles that should receive this post personally
   */
  public java.util.List<java.lang.CharSequence> getRecipients() {
    return recipients;
  }

  /**
   * Sets the value of the 'recipients' field.
   * List of references to the roles that should receive this post personally
   * @param value the value to set.
   */
  public void setRecipients(java.util.List<java.lang.CharSequence> value) {
    this.recipients = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return Location of this item
   */
  public eu.driver.model.sim.geo.Location getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * Location of this item
   * @param value the value to set.
   */
  public void setLocation(eu.driver.model.sim.geo.Location value) {
    this.location = value;
  }

  /**
   * Creates a new Post RecordBuilder.
   * @return A new Post RecordBuilder
   */
  public static eu.driver.model.sim.entity.Post.Builder newBuilder() {
    return new eu.driver.model.sim.entity.Post.Builder();
  }

  /**
   * Creates a new Post RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Post RecordBuilder
   */
  public static eu.driver.model.sim.entity.Post.Builder newBuilder(eu.driver.model.sim.entity.Post.Builder other) {
    return new eu.driver.model.sim.entity.Post.Builder(other);
  }

  /**
   * Creates a new Post RecordBuilder by copying an existing Post instance.
   * @param other The existing instance to copy.
   * @return A new Post RecordBuilder
   */
  public static eu.driver.model.sim.entity.Post.Builder newBuilder(eu.driver.model.sim.entity.Post other) {
    return new eu.driver.model.sim.entity.Post.Builder(other);
  }

  /**
   * RecordBuilder for Post instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Post>
    implements org.apache.avro.data.RecordBuilder<Post> {

    /** Globally unique identifier for this post */
    private java.lang.CharSequence guid;
    /** Name of this post */
    private java.lang.CharSequence name;
    /** Identifier of the simulator currently responsible for this post */
    private java.lang.CharSequence owner;
    /** Type of crisis media medium this post was placed on/in */
    private eu.driver.model.sim.entity.post.MediumTypes mediumType;
    /** Name of the medium this post was placed on/in */
    private java.lang.CharSequence mediumName;
    /** Title of this post */
    private java.lang.CharSequence header;
    /** Introduction of this post */
    private java.lang.CharSequence intro;
    /** The body text of this post */
    private java.lang.CharSequence body;
    /** Links to files attached to this post */
    private java.util.List<java.lang.CharSequence> files;
    /** Indication whether or not this post is visible for any participant */
    private boolean visibleForParticipant;
    /** Name of the sender sending this post */
    private java.lang.CharSequence senderName;
    /** Reference to the role sending this post */
    private java.lang.CharSequence senderRole;
    /** List of references to the roles that should receive this post personally */
    private java.util.List<java.lang.CharSequence> recipients;
    /** The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long date;
    /** Location of this item */
    private eu.driver.model.sim.geo.Location location;
    private eu.driver.model.sim.geo.Location.Builder locationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.sim.entity.Post.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mediumType)) {
        this.mediumType = data().deepCopy(fields()[3].schema(), other.mediumType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mediumName)) {
        this.mediumName = data().deepCopy(fields()[4].schema(), other.mediumName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.header)) {
        this.header = data().deepCopy(fields()[5].schema(), other.header);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.intro)) {
        this.intro = data().deepCopy(fields()[6].schema(), other.intro);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.body)) {
        this.body = data().deepCopy(fields()[7].schema(), other.body);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.files)) {
        this.files = data().deepCopy(fields()[8].schema(), other.files);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.visibleForParticipant)) {
        this.visibleForParticipant = data().deepCopy(fields()[9].schema(), other.visibleForParticipant);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.senderName)) {
        this.senderName = data().deepCopy(fields()[10].schema(), other.senderName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.senderRole)) {
        this.senderRole = data().deepCopy(fields()[11].schema(), other.senderRole);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.recipients)) {
        this.recipients = data().deepCopy(fields()[12].schema(), other.recipients);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.date)) {
        this.date = data().deepCopy(fields()[13].schema(), other.date);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.location)) {
        this.location = data().deepCopy(fields()[14].schema(), other.location);
        fieldSetFlags()[14] = true;
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = eu.driver.model.sim.geo.Location.newBuilder(other.getLocationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Post instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.sim.entity.Post other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mediumType)) {
        this.mediumType = data().deepCopy(fields()[3].schema(), other.mediumType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mediumName)) {
        this.mediumName = data().deepCopy(fields()[4].schema(), other.mediumName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.header)) {
        this.header = data().deepCopy(fields()[5].schema(), other.header);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.intro)) {
        this.intro = data().deepCopy(fields()[6].schema(), other.intro);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.body)) {
        this.body = data().deepCopy(fields()[7].schema(), other.body);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.files)) {
        this.files = data().deepCopy(fields()[8].schema(), other.files);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.visibleForParticipant)) {
        this.visibleForParticipant = data().deepCopy(fields()[9].schema(), other.visibleForParticipant);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.senderName)) {
        this.senderName = data().deepCopy(fields()[10].schema(), other.senderName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.senderRole)) {
        this.senderRole = data().deepCopy(fields()[11].schema(), other.senderRole);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.recipients)) {
        this.recipients = data().deepCopy(fields()[12].schema(), other.recipients);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.date)) {
        this.date = data().deepCopy(fields()[13].schema(), other.date);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.location)) {
        this.location = data().deepCopy(fields()[14].schema(), other.location);
        fieldSetFlags()[14] = true;
      }
      this.locationBuilder = null;
    }

    /**
      * Gets the value of the 'guid' field.
      * Globally unique identifier for this post
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * Globally unique identifier for this post
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * Globally unique identifier for this post
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * Globally unique identifier for this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of this post
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of this post
      * @param value The value of 'name'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of this post
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this post
      * @return The value.
      */
    public java.lang.CharSequence getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this post
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setOwner(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.owner = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * Identifier of the simulator currently responsible for this post
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'owner' field.
      * Identifier of the simulator currently responsible for this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediumType' field.
      * Type of crisis media medium this post was placed on/in
      * @return The value.
      */
    public eu.driver.model.sim.entity.post.MediumTypes getMediumType() {
      return mediumType;
    }

    /**
      * Sets the value of the 'mediumType' field.
      * Type of crisis media medium this post was placed on/in
      * @param value The value of 'mediumType'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setMediumType(eu.driver.model.sim.entity.post.MediumTypes value) {
      validate(fields()[3], value);
      this.mediumType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mediumType' field has been set.
      * Type of crisis media medium this post was placed on/in
      * @return True if the 'mediumType' field has been set, false otherwise.
      */
    public boolean hasMediumType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mediumType' field.
      * Type of crisis media medium this post was placed on/in
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearMediumType() {
      mediumType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediumName' field.
      * Name of the medium this post was placed on/in
      * @return The value.
      */
    public java.lang.CharSequence getMediumName() {
      return mediumName;
    }

    /**
      * Sets the value of the 'mediumName' field.
      * Name of the medium this post was placed on/in
      * @param value The value of 'mediumName'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setMediumName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.mediumName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mediumName' field has been set.
      * Name of the medium this post was placed on/in
      * @return True if the 'mediumName' field has been set, false otherwise.
      */
    public boolean hasMediumName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mediumName' field.
      * Name of the medium this post was placed on/in
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearMediumName() {
      mediumName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'header' field.
      * Title of this post
      * @return The value.
      */
    public java.lang.CharSequence getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * Title of this post
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setHeader(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.header = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * Title of this post
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'header' field.
      * Title of this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearHeader() {
      header = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'intro' field.
      * Introduction of this post
      * @return The value.
      */
    public java.lang.CharSequence getIntro() {
      return intro;
    }

    /**
      * Sets the value of the 'intro' field.
      * Introduction of this post
      * @param value The value of 'intro'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setIntro(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.intro = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'intro' field has been set.
      * Introduction of this post
      * @return True if the 'intro' field has been set, false otherwise.
      */
    public boolean hasIntro() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'intro' field.
      * Introduction of this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearIntro() {
      intro = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * The body text of this post
      * @return The value.
      */
    public java.lang.CharSequence getBody() {
      return body;
    }

    /**
      * Sets the value of the 'body' field.
      * The body text of this post
      * @param value The value of 'body'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setBody(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.body = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * The body text of this post
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'body' field.
      * The body text of this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearBody() {
      body = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'files' field.
      * Links to files attached to this post
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getFiles() {
      return files;
    }

    /**
      * Sets the value of the 'files' field.
      * Links to files attached to this post
      * @param value The value of 'files'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setFiles(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.files = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'files' field has been set.
      * Links to files attached to this post
      * @return True if the 'files' field has been set, false otherwise.
      */
    public boolean hasFiles() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'files' field.
      * Links to files attached to this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearFiles() {
      files = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'visibleForParticipant' field.
      * Indication whether or not this post is visible for any participant
      * @return The value.
      */
    public java.lang.Boolean getVisibleForParticipant() {
      return visibleForParticipant;
    }

    /**
      * Sets the value of the 'visibleForParticipant' field.
      * Indication whether or not this post is visible for any participant
      * @param value The value of 'visibleForParticipant'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setVisibleForParticipant(boolean value) {
      validate(fields()[9], value);
      this.visibleForParticipant = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'visibleForParticipant' field has been set.
      * Indication whether or not this post is visible for any participant
      * @return True if the 'visibleForParticipant' field has been set, false otherwise.
      */
    public boolean hasVisibleForParticipant() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'visibleForParticipant' field.
      * Indication whether or not this post is visible for any participant
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearVisibleForParticipant() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderName' field.
      * Name of the sender sending this post
      * @return The value.
      */
    public java.lang.CharSequence getSenderName() {
      return senderName;
    }

    /**
      * Sets the value of the 'senderName' field.
      * Name of the sender sending this post
      * @param value The value of 'senderName'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setSenderName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.senderName = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'senderName' field has been set.
      * Name of the sender sending this post
      * @return True if the 'senderName' field has been set, false otherwise.
      */
    public boolean hasSenderName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'senderName' field.
      * Name of the sender sending this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearSenderName() {
      senderName = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderRole' field.
      * Reference to the role sending this post
      * @return The value.
      */
    public java.lang.CharSequence getSenderRole() {
      return senderRole;
    }

    /**
      * Sets the value of the 'senderRole' field.
      * Reference to the role sending this post
      * @param value The value of 'senderRole'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setSenderRole(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.senderRole = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'senderRole' field has been set.
      * Reference to the role sending this post
      * @return True if the 'senderRole' field has been set, false otherwise.
      */
    public boolean hasSenderRole() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'senderRole' field.
      * Reference to the role sending this post
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearSenderRole() {
      senderRole = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipients' field.
      * List of references to the roles that should receive this post personally
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getRecipients() {
      return recipients;
    }

    /**
      * Sets the value of the 'recipients' field.
      * List of references to the roles that should receive this post personally
      * @param value The value of 'recipients'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setRecipients(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.recipients = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'recipients' field has been set.
      * List of references to the roles that should receive this post personally
      * @return True if the 'recipients' field has been set, false otherwise.
      */
    public boolean hasRecipients() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'recipients' field.
      * List of references to the roles that should receive this post personally
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearRecipients() {
      recipients = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setDate(long value) {
      validate(fields()[13], value);
      this.date = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'date' field.
      * The fictive creation date and time of this post as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearDate() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * Location of this item
      * @return The value.
      */
    public eu.driver.model.sim.geo.Location getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * Location of this item
      * @param value The value of 'location'.
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder setLocation(eu.driver.model.sim.geo.Location value) {
      validate(fields()[14], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * Location of this item
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * Location of this item
     * @return This builder.
     */
    public eu.driver.model.sim.geo.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(eu.driver.model.sim.geo.Location.newBuilder(location));
        } else {
          setLocationBuilder(eu.driver.model.sim.geo.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * Location of this item
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.sim.entity.Post.Builder setLocationBuilder(eu.driver.model.sim.geo.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * Location of this item
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * Location of this item
      * @return This builder.
      */
    public eu.driver.model.sim.entity.Post.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Post build() {
      try {
        Post record = new Post();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.owner = fieldSetFlags()[2] ? this.owner : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mediumType = fieldSetFlags()[3] ? this.mediumType : (eu.driver.model.sim.entity.post.MediumTypes) defaultValue(fields()[3]);
        record.mediumName = fieldSetFlags()[4] ? this.mediumName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.header = fieldSetFlags()[5] ? this.header : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.intro = fieldSetFlags()[6] ? this.intro : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.body = fieldSetFlags()[7] ? this.body : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.files = fieldSetFlags()[8] ? this.files : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.visibleForParticipant = fieldSetFlags()[9] ? this.visibleForParticipant : (java.lang.Boolean) defaultValue(fields()[9]);
        record.senderName = fieldSetFlags()[10] ? this.senderName : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.senderRole = fieldSetFlags()[11] ? this.senderRole : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.recipients = fieldSetFlags()[12] ? this.recipients : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[12]);
        record.date = fieldSetFlags()[13] ? this.date : (java.lang.Long) defaultValue(fields()[13]);
        if (locationBuilder != null) {
          record.location = this.locationBuilder.build();
        } else {
          record.location = fieldSetFlags()[14] ? this.location : (eu.driver.model.sim.geo.Location) defaultValue(fields()[14]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Post>
    WRITER$ = (org.apache.avro.io.DatumWriter<Post>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Post>
    READER$ = (org.apache.avro.io.DatumReader<Post>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
