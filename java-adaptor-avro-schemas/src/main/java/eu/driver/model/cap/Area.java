/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.cap;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Area extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4683296681095008365L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Area\",\"namespace\":\"eu.driver.model.cap\",\"fields\":[{\"name\":\"areaDesc\",\"type\":\"string\"},{\"name\":\"polygon\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"circle\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"geocode\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ValueNamePair\",\"fields\":[{\"name\":\"valueName\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]},{\"type\":\"array\",\"items\":\"ValueNamePair\"}],\"default\":null},{\"name\":\"altitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"ceiling\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Area> ENCODER =
      new BinaryMessageEncoder<Area>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Area> DECODER =
      new BinaryMessageDecoder<Area>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Area> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Area> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Area>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Area to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Area from a ByteBuffer. */
  public static Area fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence areaDesc;
  @Deprecated public java.lang.Object polygon;
  @Deprecated public java.lang.Object circle;
  @Deprecated public java.lang.Object geocode;
  @Deprecated public java.lang.Double altitude;
  @Deprecated public java.lang.Double ceiling;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Area() {}

  /**
   * All-args constructor.
   * @param areaDesc The new value for areaDesc
   * @param polygon The new value for polygon
   * @param circle The new value for circle
   * @param geocode The new value for geocode
   * @param altitude The new value for altitude
   * @param ceiling The new value for ceiling
   */
  public Area(java.lang.CharSequence areaDesc, java.lang.Object polygon, java.lang.Object circle, java.lang.Object geocode, java.lang.Double altitude, java.lang.Double ceiling) {
    this.areaDesc = areaDesc;
    this.polygon = polygon;
    this.circle = circle;
    this.geocode = geocode;
    this.altitude = altitude;
    this.ceiling = ceiling;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return areaDesc;
    case 1: return polygon;
    case 2: return circle;
    case 3: return geocode;
    case 4: return altitude;
    case 5: return ceiling;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: areaDesc = (java.lang.CharSequence)value$; break;
    case 1: polygon = (java.lang.Object)value$; break;
    case 2: circle = (java.lang.Object)value$; break;
    case 3: geocode = (java.lang.Object)value$; break;
    case 4: altitude = (java.lang.Double)value$; break;
    case 5: ceiling = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'areaDesc' field.
   * @return The value of the 'areaDesc' field.
   */
  public java.lang.CharSequence getAreaDesc() {
    return areaDesc;
  }

  /**
   * Sets the value of the 'areaDesc' field.
   * @param value the value to set.
   */
  public void setAreaDesc(java.lang.CharSequence value) {
    this.areaDesc = value;
  }

  /**
   * Gets the value of the 'polygon' field.
   * @return The value of the 'polygon' field.
   */
  public java.lang.Object getPolygon() {
    return polygon;
  }

  /**
   * Sets the value of the 'polygon' field.
   * @param value the value to set.
   */
  public void setPolygon(java.lang.Object value) {
    this.polygon = value;
  }

  /**
   * Gets the value of the 'circle' field.
   * @return The value of the 'circle' field.
   */
  public java.lang.Object getCircle() {
    return circle;
  }

  /**
   * Sets the value of the 'circle' field.
   * @param value the value to set.
   */
  public void setCircle(java.lang.Object value) {
    this.circle = value;
  }

  /**
   * Gets the value of the 'geocode' field.
   * @return The value of the 'geocode' field.
   */
  public java.lang.Object getGeocode() {
    return geocode;
  }

  /**
   * Sets the value of the 'geocode' field.
   * @param value the value to set.
   */
  public void setGeocode(java.lang.Object value) {
    this.geocode = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public java.lang.Double getAltitude() {
    return altitude;
  }

  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(java.lang.Double value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'ceiling' field.
   * @return The value of the 'ceiling' field.
   */
  public java.lang.Double getCeiling() {
    return ceiling;
  }

  /**
   * Sets the value of the 'ceiling' field.
   * @param value the value to set.
   */
  public void setCeiling(java.lang.Double value) {
    this.ceiling = value;
  }

  /**
   * Creates a new Area RecordBuilder.
   * @return A new Area RecordBuilder
   */
  public static eu.driver.model.cap.Area.Builder newBuilder() {
    return new eu.driver.model.cap.Area.Builder();
  }

  /**
   * Creates a new Area RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Area RecordBuilder
   */
  public static eu.driver.model.cap.Area.Builder newBuilder(eu.driver.model.cap.Area.Builder other) {
    return new eu.driver.model.cap.Area.Builder(other);
  }

  /**
   * Creates a new Area RecordBuilder by copying an existing Area instance.
   * @param other The existing instance to copy.
   * @return A new Area RecordBuilder
   */
  public static eu.driver.model.cap.Area.Builder newBuilder(eu.driver.model.cap.Area other) {
    return new eu.driver.model.cap.Area.Builder(other);
  }

  /**
   * RecordBuilder for Area instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Area>
    implements org.apache.avro.data.RecordBuilder<Area> {

    private java.lang.CharSequence areaDesc;
    private java.lang.Object polygon;
    private java.lang.Object circle;
    private java.lang.Object geocode;
    private java.lang.Double altitude;
    private java.lang.Double ceiling;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.cap.Area.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.areaDesc)) {
        this.areaDesc = data().deepCopy(fields()[0].schema(), other.areaDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.polygon)) {
        this.polygon = data().deepCopy(fields()[1].schema(), other.polygon);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.circle)) {
        this.circle = data().deepCopy(fields()[2].schema(), other.circle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.geocode)) {
        this.geocode = data().deepCopy(fields()[3].schema(), other.geocode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ceiling)) {
        this.ceiling = data().deepCopy(fields()[5].schema(), other.ceiling);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Area instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.cap.Area other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.areaDesc)) {
        this.areaDesc = data().deepCopy(fields()[0].schema(), other.areaDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.polygon)) {
        this.polygon = data().deepCopy(fields()[1].schema(), other.polygon);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.circle)) {
        this.circle = data().deepCopy(fields()[2].schema(), other.circle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.geocode)) {
        this.geocode = data().deepCopy(fields()[3].schema(), other.geocode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ceiling)) {
        this.ceiling = data().deepCopy(fields()[5].schema(), other.ceiling);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'areaDesc' field.
      * @return The value.
      */
    public java.lang.CharSequence getAreaDesc() {
      return areaDesc;
    }

    /**
      * Sets the value of the 'areaDesc' field.
      * @param value The value of 'areaDesc'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setAreaDesc(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.areaDesc = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'areaDesc' field has been set.
      * @return True if the 'areaDesc' field has been set, false otherwise.
      */
    public boolean hasAreaDesc() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'areaDesc' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearAreaDesc() {
      areaDesc = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'polygon' field.
      * @return The value.
      */
    public java.lang.Object getPolygon() {
      return polygon;
    }

    /**
      * Sets the value of the 'polygon' field.
      * @param value The value of 'polygon'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setPolygon(java.lang.Object value) {
      validate(fields()[1], value);
      this.polygon = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'polygon' field has been set.
      * @return True if the 'polygon' field has been set, false otherwise.
      */
    public boolean hasPolygon() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'polygon' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearPolygon() {
      polygon = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'circle' field.
      * @return The value.
      */
    public java.lang.Object getCircle() {
      return circle;
    }

    /**
      * Sets the value of the 'circle' field.
      * @param value The value of 'circle'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setCircle(java.lang.Object value) {
      validate(fields()[2], value);
      this.circle = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'circle' field has been set.
      * @return True if the 'circle' field has been set, false otherwise.
      */
    public boolean hasCircle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'circle' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearCircle() {
      circle = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'geocode' field.
      * @return The value.
      */
    public java.lang.Object getGeocode() {
      return geocode;
    }

    /**
      * Sets the value of the 'geocode' field.
      * @param value The value of 'geocode'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setGeocode(java.lang.Object value) {
      validate(fields()[3], value);
      this.geocode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'geocode' field has been set.
      * @return True if the 'geocode' field has been set, false otherwise.
      */
    public boolean hasGeocode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'geocode' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearGeocode() {
      geocode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public java.lang.Double getAltitude() {
      return altitude;
    }

    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setAltitude(java.lang.Double value) {
      validate(fields()[4], value);
      this.altitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearAltitude() {
      altitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ceiling' field.
      * @return The value.
      */
    public java.lang.Double getCeiling() {
      return ceiling;
    }

    /**
      * Sets the value of the 'ceiling' field.
      * @param value The value of 'ceiling'.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder setCeiling(java.lang.Double value) {
      validate(fields()[5], value);
      this.ceiling = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ceiling' field has been set.
      * @return True if the 'ceiling' field has been set, false otherwise.
      */
    public boolean hasCeiling() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ceiling' field.
      * @return This builder.
      */
    public eu.driver.model.cap.Area.Builder clearCeiling() {
      ceiling = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Area build() {
      try {
        Area record = new Area();
        record.areaDesc = fieldSetFlags()[0] ? this.areaDesc : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.polygon = fieldSetFlags()[1] ? this.polygon : (java.lang.Object) defaultValue(fields()[1]);
        record.circle = fieldSetFlags()[2] ? this.circle : (java.lang.Object) defaultValue(fields()[2]);
        record.geocode = fieldSetFlags()[3] ? this.geocode : (java.lang.Object) defaultValue(fields()[3]);
        record.altitude = fieldSetFlags()[4] ? this.altitude : (java.lang.Double) defaultValue(fields()[4]);
        record.ceiling = fieldSetFlags()[5] ? this.ceiling : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Area>
    WRITER$ = (org.apache.avro.io.DatumWriter<Area>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Area>
    READER$ = (org.apache.avro.io.DatumReader<Area>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
