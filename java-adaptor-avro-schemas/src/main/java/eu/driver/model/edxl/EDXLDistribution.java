/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.edxl;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The required fields of an EDXL 2.0 Distribution Element */
@org.apache.avro.specific.AvroGenerated
public class EDXLDistribution extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8871223353821242543L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EDXLDistribution\",\"namespace\":\"eu.driver.model.edxl\",\"doc\":\"The required fields of an EDXL 2.0 Distribution Element\",\"fields\":[{\"name\":\"distributionID\",\"type\":\"string\",\"doc\":\"The unique identifier of this distribution message.\"},{\"name\":\"senderID\",\"type\":\"string\",\"doc\":\"The unique identifier of the sender.\"},{\"name\":\"dateTimeSent\",\"type\":\"long\",\"doc\":\"The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"dateTimeExpires\",\"type\":\"long\",\"doc\":\"The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"distributionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"DistributionStatus\",\"symbols\":[\"Actual\",\"Exercise\",\"System\",\"Test\",\"Unknown\",\"NoAppropriateDefault\"]},\"doc\":\"The action-ability of the message.\"},{\"name\":\"distributionKind\",\"type\":{\"type\":\"enum\",\"name\":\"DistributionKind\",\"symbols\":[\"Report\",\"Update\",\"Cancel\",\"Request\",\"Response\",\"Dispatch\",\"Ack\",\"Error\",\"SensorConfiguration\",\"SensorControl\",\"SensorStatus\",\"SensorDetection\",\"Unknown\",\"NoAppropriateDefault\"]},\"doc\":\"The function of the message.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EDXLDistribution> ENCODER =
      new BinaryMessageEncoder<EDXLDistribution>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EDXLDistribution> DECODER =
      new BinaryMessageDecoder<EDXLDistribution>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EDXLDistribution> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EDXLDistribution> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EDXLDistribution>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EDXLDistribution to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EDXLDistribution from a ByteBuffer. */
  public static EDXLDistribution fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of this distribution message. */
  @Deprecated public java.lang.CharSequence distributionID;
  /** The unique identifier of the sender. */
  @Deprecated public java.lang.CharSequence senderID;
  /** The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long dateTimeSent;
  /** The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public long dateTimeExpires;
  /** The action-ability of the message. */
  @Deprecated public eu.driver.model.edxl.DistributionStatus distributionStatus;
  /** The function of the message. */
  @Deprecated public eu.driver.model.edxl.DistributionKind distributionKind;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EDXLDistribution() {}

  /**
   * All-args constructor.
   * @param distributionID The unique identifier of this distribution message.
   * @param senderID The unique identifier of the sender.
   * @param dateTimeSent The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param dateTimeExpires The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param distributionStatus The action-ability of the message.
   * @param distributionKind The function of the message.
   */
  public EDXLDistribution(java.lang.CharSequence distributionID, java.lang.CharSequence senderID, java.lang.Long dateTimeSent, java.lang.Long dateTimeExpires, eu.driver.model.edxl.DistributionStatus distributionStatus, eu.driver.model.edxl.DistributionKind distributionKind) {
    this.distributionID = distributionID;
    this.senderID = senderID;
    this.dateTimeSent = dateTimeSent;
    this.dateTimeExpires = dateTimeExpires;
    this.distributionStatus = distributionStatus;
    this.distributionKind = distributionKind;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return distributionID;
    case 1: return senderID;
    case 2: return dateTimeSent;
    case 3: return dateTimeExpires;
    case 4: return distributionStatus;
    case 5: return distributionKind;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: distributionID = (java.lang.CharSequence)value$; break;
    case 1: senderID = (java.lang.CharSequence)value$; break;
    case 2: dateTimeSent = (java.lang.Long)value$; break;
    case 3: dateTimeExpires = (java.lang.Long)value$; break;
    case 4: distributionStatus = (eu.driver.model.edxl.DistributionStatus)value$; break;
    case 5: distributionKind = (eu.driver.model.edxl.DistributionKind)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'distributionID' field.
   * @return The unique identifier of this distribution message.
   */
  public java.lang.CharSequence getDistributionID() {
    return distributionID;
  }

  /**
   * Sets the value of the 'distributionID' field.
   * The unique identifier of this distribution message.
   * @param value the value to set.
   */
  public void setDistributionID(java.lang.CharSequence value) {
    this.distributionID = value;
  }

  /**
   * Gets the value of the 'senderID' field.
   * @return The unique identifier of the sender.
   */
  public java.lang.CharSequence getSenderID() {
    return senderID;
  }

  /**
   * Sets the value of the 'senderID' field.
   * The unique identifier of the sender.
   * @param value the value to set.
   */
  public void setSenderID(java.lang.CharSequence value) {
    this.senderID = value;
  }

  /**
   * Gets the value of the 'dateTimeSent' field.
   * @return The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getDateTimeSent() {
    return dateTimeSent;
  }

  /**
   * Sets the value of the 'dateTimeSent' field.
   * The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setDateTimeSent(java.lang.Long value) {
    this.dateTimeSent = value;
  }

  /**
   * Gets the value of the 'dateTimeExpires' field.
   * @return The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public java.lang.Long getDateTimeExpires() {
    return dateTimeExpires;
  }

  /**
   * Sets the value of the 'dateTimeExpires' field.
   * The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setDateTimeExpires(java.lang.Long value) {
    this.dateTimeExpires = value;
  }

  /**
   * Gets the value of the 'distributionStatus' field.
   * @return The action-ability of the message.
   */
  public eu.driver.model.edxl.DistributionStatus getDistributionStatus() {
    return distributionStatus;
  }

  /**
   * Sets the value of the 'distributionStatus' field.
   * The action-ability of the message.
   * @param value the value to set.
   */
  public void setDistributionStatus(eu.driver.model.edxl.DistributionStatus value) {
    this.distributionStatus = value;
  }

  /**
   * Gets the value of the 'distributionKind' field.
   * @return The function of the message.
   */
  public eu.driver.model.edxl.DistributionKind getDistributionKind() {
    return distributionKind;
  }

  /**
   * Sets the value of the 'distributionKind' field.
   * The function of the message.
   * @param value the value to set.
   */
  public void setDistributionKind(eu.driver.model.edxl.DistributionKind value) {
    this.distributionKind = value;
  }

  /**
   * Creates a new EDXLDistribution RecordBuilder.
   * @return A new EDXLDistribution RecordBuilder
   */
  public static eu.driver.model.edxl.EDXLDistribution.Builder newBuilder() {
    return new eu.driver.model.edxl.EDXLDistribution.Builder();
  }

  /**
   * Creates a new EDXLDistribution RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EDXLDistribution RecordBuilder
   */
  public static eu.driver.model.edxl.EDXLDistribution.Builder newBuilder(eu.driver.model.edxl.EDXLDistribution.Builder other) {
    return new eu.driver.model.edxl.EDXLDistribution.Builder(other);
  }

  /**
   * Creates a new EDXLDistribution RecordBuilder by copying an existing EDXLDistribution instance.
   * @param other The existing instance to copy.
   * @return A new EDXLDistribution RecordBuilder
   */
  public static eu.driver.model.edxl.EDXLDistribution.Builder newBuilder(eu.driver.model.edxl.EDXLDistribution other) {
    return new eu.driver.model.edxl.EDXLDistribution.Builder(other);
  }

  /**
   * RecordBuilder for EDXLDistribution instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EDXLDistribution>
    implements org.apache.avro.data.RecordBuilder<EDXLDistribution> {

    /** The unique identifier of this distribution message. */
    private java.lang.CharSequence distributionID;
    /** The unique identifier of the sender. */
    private java.lang.CharSequence senderID;
    /** The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long dateTimeSent;
    /** The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private long dateTimeExpires;
    /** The action-ability of the message. */
    private eu.driver.model.edxl.DistributionStatus distributionStatus;
    /** The function of the message. */
    private eu.driver.model.edxl.DistributionKind distributionKind;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.edxl.EDXLDistribution.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.distributionID)) {
        this.distributionID = data().deepCopy(fields()[0].schema(), other.distributionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.senderID)) {
        this.senderID = data().deepCopy(fields()[1].schema(), other.senderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dateTimeSent)) {
        this.dateTimeSent = data().deepCopy(fields()[2].schema(), other.dateTimeSent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateTimeExpires)) {
        this.dateTimeExpires = data().deepCopy(fields()[3].schema(), other.dateTimeExpires);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.distributionStatus)) {
        this.distributionStatus = data().deepCopy(fields()[4].schema(), other.distributionStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distributionKind)) {
        this.distributionKind = data().deepCopy(fields()[5].schema(), other.distributionKind);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EDXLDistribution instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.edxl.EDXLDistribution other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.distributionID)) {
        this.distributionID = data().deepCopy(fields()[0].schema(), other.distributionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.senderID)) {
        this.senderID = data().deepCopy(fields()[1].schema(), other.senderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dateTimeSent)) {
        this.dateTimeSent = data().deepCopy(fields()[2].schema(), other.dateTimeSent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateTimeExpires)) {
        this.dateTimeExpires = data().deepCopy(fields()[3].schema(), other.dateTimeExpires);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.distributionStatus)) {
        this.distributionStatus = data().deepCopy(fields()[4].schema(), other.distributionStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distributionKind)) {
        this.distributionKind = data().deepCopy(fields()[5].schema(), other.distributionKind);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'distributionID' field.
      * The unique identifier of this distribution message.
      * @return The value.
      */
    public java.lang.CharSequence getDistributionID() {
      return distributionID;
    }

    /**
      * Sets the value of the 'distributionID' field.
      * The unique identifier of this distribution message.
      * @param value The value of 'distributionID'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setDistributionID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.distributionID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'distributionID' field has been set.
      * The unique identifier of this distribution message.
      * @return True if the 'distributionID' field has been set, false otherwise.
      */
    public boolean hasDistributionID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'distributionID' field.
      * The unique identifier of this distribution message.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearDistributionID() {
      distributionID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderID' field.
      * The unique identifier of the sender.
      * @return The value.
      */
    public java.lang.CharSequence getSenderID() {
      return senderID;
    }

    /**
      * Sets the value of the 'senderID' field.
      * The unique identifier of the sender.
      * @param value The value of 'senderID'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setSenderID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.senderID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'senderID' field has been set.
      * The unique identifier of the sender.
      * @return True if the 'senderID' field has been set, false otherwise.
      */
    public boolean hasSenderID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'senderID' field.
      * The unique identifier of the sender.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearSenderID() {
      senderID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeSent' field.
      * The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getDateTimeSent() {
      return dateTimeSent;
    }

    /**
      * Sets the value of the 'dateTimeSent' field.
      * The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'dateTimeSent'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setDateTimeSent(long value) {
      validate(fields()[2], value);
      this.dateTimeSent = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeSent' field has been set.
      * The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'dateTimeSent' field has been set, false otherwise.
      */
    public boolean hasDateTimeSent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dateTimeSent' field.
      * The date and time the distribution message was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearDateTimeSent() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeExpires' field.
      * The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public java.lang.Long getDateTimeExpires() {
      return dateTimeExpires;
    }

    /**
      * Sets the value of the 'dateTimeExpires' field.
      * The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'dateTimeExpires'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setDateTimeExpires(long value) {
      validate(fields()[3], value);
      this.dateTimeExpires = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeExpires' field has been set.
      * The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'dateTimeExpires' field has been set, false otherwise.
      */
    public boolean hasDateTimeExpires() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dateTimeExpires' field.
      * The date and time the distribution message should expire as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearDateTimeExpires() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'distributionStatus' field.
      * The action-ability of the message.
      * @return The value.
      */
    public eu.driver.model.edxl.DistributionStatus getDistributionStatus() {
      return distributionStatus;
    }

    /**
      * Sets the value of the 'distributionStatus' field.
      * The action-ability of the message.
      * @param value The value of 'distributionStatus'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setDistributionStatus(eu.driver.model.edxl.DistributionStatus value) {
      validate(fields()[4], value);
      this.distributionStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'distributionStatus' field has been set.
      * The action-ability of the message.
      * @return True if the 'distributionStatus' field has been set, false otherwise.
      */
    public boolean hasDistributionStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'distributionStatus' field.
      * The action-ability of the message.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearDistributionStatus() {
      distributionStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'distributionKind' field.
      * The function of the message.
      * @return The value.
      */
    public eu.driver.model.edxl.DistributionKind getDistributionKind() {
      return distributionKind;
    }

    /**
      * Sets the value of the 'distributionKind' field.
      * The function of the message.
      * @param value The value of 'distributionKind'.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder setDistributionKind(eu.driver.model.edxl.DistributionKind value) {
      validate(fields()[5], value);
      this.distributionKind = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'distributionKind' field has been set.
      * The function of the message.
      * @return True if the 'distributionKind' field has been set, false otherwise.
      */
    public boolean hasDistributionKind() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'distributionKind' field.
      * The function of the message.
      * @return This builder.
      */
    public eu.driver.model.edxl.EDXLDistribution.Builder clearDistributionKind() {
      distributionKind = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EDXLDistribution build() {
      try {
        EDXLDistribution record = new EDXLDistribution();
        record.distributionID = fieldSetFlags()[0] ? this.distributionID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.senderID = fieldSetFlags()[1] ? this.senderID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dateTimeSent = fieldSetFlags()[2] ? this.dateTimeSent : (java.lang.Long) defaultValue(fields()[2]);
        record.dateTimeExpires = fieldSetFlags()[3] ? this.dateTimeExpires : (java.lang.Long) defaultValue(fields()[3]);
        record.distributionStatus = fieldSetFlags()[4] ? this.distributionStatus : (eu.driver.model.edxl.DistributionStatus) defaultValue(fields()[4]);
        record.distributionKind = fieldSetFlags()[5] ? this.distributionKind : (eu.driver.model.edxl.DistributionKind) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EDXLDistribution>
    WRITER$ = (org.apache.avro.io.DatumWriter<EDXLDistribution>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EDXLDistribution>
    READER$ = (org.apache.avro.io.DatumReader<EDXLDistribution>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
