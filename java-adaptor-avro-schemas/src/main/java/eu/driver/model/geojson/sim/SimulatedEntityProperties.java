/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.geojson.sim;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Specfic properties for an Simulated entity */
@org.apache.avro.specific.AvroGenerated
public class SimulatedEntityProperties extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3795168612840574704L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimulatedEntityProperties\",\"namespace\":\"eu.driver.model.geojson.sim\",\"doc\":\"Specfic properties for an Simulated entity\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"globally unique identifier for this entity\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"name of this entity\"},{\"name\":\"speed\",\"type\":[\"null\",\"double\"],\"doc\":\"speed of the entity in m/s\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TypeEnum\",\"symbols\":[\"OBJECT\",\"PERSON\",\"CAR\",\"VAN\",\"TRUCK\",\"BOAT\",\"PLANE\",\"HELICOPTER\",\"MOTORCYCLE\",\"DRONE\",\"UNIT\",\"STATION\",\"UNITGROUP\",\"UNKNOWN\"]}},{\"name\":\"label\",\"type\":\"string\",\"doc\":\"Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.\"},{\"name\":\"subEntities\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SimulatedEntityProperties> ENCODER =
      new BinaryMessageEncoder<SimulatedEntityProperties>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SimulatedEntityProperties> DECODER =
      new BinaryMessageDecoder<SimulatedEntityProperties>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SimulatedEntityProperties> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SimulatedEntityProperties> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SimulatedEntityProperties>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SimulatedEntityProperties to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SimulatedEntityProperties from a ByteBuffer. */
  public static SimulatedEntityProperties fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** globally unique identifier for this entity */
  @Deprecated public java.lang.CharSequence guid;
  /** name of this entity */
  @Deprecated public java.lang.CharSequence name;
  /** speed of the entity in m/s */
  @Deprecated public java.lang.Double speed;
  @Deprecated public eu.driver.model.geojson.sim.TypeEnum type;
  /** Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military. */
  @Deprecated public java.lang.CharSequence label;
  /** Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids. */
  @Deprecated public java.util.List<java.lang.CharSequence> subEntities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimulatedEntityProperties() {}

  /**
   * All-args constructor.
   * @param guid globally unique identifier for this entity
   * @param name name of this entity
   * @param speed speed of the entity in m/s
   * @param type The new value for type
   * @param label Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
   * @param subEntities Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
   */
  public SimulatedEntityProperties(java.lang.CharSequence guid, java.lang.CharSequence name, java.lang.Double speed, eu.driver.model.geojson.sim.TypeEnum type, java.lang.CharSequence label, java.util.List<java.lang.CharSequence> subEntities) {
    this.guid = guid;
    this.name = name;
    this.speed = speed;
    this.type = type;
    this.label = label;
    this.subEntities = subEntities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return name;
    case 2: return speed;
    case 3: return type;
    case 4: return label;
    case 5: return subEntities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: speed = (java.lang.Double)value$; break;
    case 3: type = (eu.driver.model.geojson.sim.TypeEnum)value$; break;
    case 4: label = (java.lang.CharSequence)value$; break;
    case 5: subEntities = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return globally unique identifier for this entity
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * globally unique identifier for this entity
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return name of this entity
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of this entity
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return speed of the entity in m/s
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * speed of the entity in m/s
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public eu.driver.model.geojson.sim.TypeEnum getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(eu.driver.model.geojson.sim.TypeEnum value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'subEntities' field.
   * @return Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
   */
  public java.util.List<java.lang.CharSequence> getSubEntities() {
    return subEntities;
  }

  /**
   * Sets the value of the 'subEntities' field.
   * Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
   * @param value the value to set.
   */
  public void setSubEntities(java.util.List<java.lang.CharSequence> value) {
    this.subEntities = value;
  }

  /**
   * Creates a new SimulatedEntityProperties RecordBuilder.
   * @return A new SimulatedEntityProperties RecordBuilder
   */
  public static eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder newBuilder() {
    return new eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder();
  }

  /**
   * Creates a new SimulatedEntityProperties RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimulatedEntityProperties RecordBuilder
   */
  public static eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder newBuilder(eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder other) {
    return new eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder(other);
  }

  /**
   * Creates a new SimulatedEntityProperties RecordBuilder by copying an existing SimulatedEntityProperties instance.
   * @param other The existing instance to copy.
   * @return A new SimulatedEntityProperties RecordBuilder
   */
  public static eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder newBuilder(eu.driver.model.geojson.sim.SimulatedEntityProperties other) {
    return new eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder(other);
  }

  /**
   * RecordBuilder for SimulatedEntityProperties instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimulatedEntityProperties>
    implements org.apache.avro.data.RecordBuilder<SimulatedEntityProperties> {

    /** globally unique identifier for this entity */
    private java.lang.CharSequence guid;
    /** name of this entity */
    private java.lang.CharSequence name;
    /** speed of the entity in m/s */
    private java.lang.Double speed;
    private eu.driver.model.geojson.sim.TypeEnum type;
    /** Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military. */
    private java.lang.CharSequence label;
    /** Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids. */
    private java.util.List<java.lang.CharSequence> subEntities;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subEntities)) {
        this.subEntities = data().deepCopy(fields()[5].schema(), other.subEntities);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimulatedEntityProperties instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.geojson.sim.SimulatedEntityProperties other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subEntities)) {
        this.subEntities = data().deepCopy(fields()[5].schema(), other.subEntities);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * globally unique identifier for this entity
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * globally unique identifier for this entity
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * globally unique identifier for this entity
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * globally unique identifier for this entity
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * name of this entity
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * name of this entity
      * @param value The value of 'name'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * name of this entity
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * name of this entity
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * speed of the entity in m/s
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * speed of the entity in m/s
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setSpeed(java.lang.Double value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * speed of the entity in m/s
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * speed of the entity in m/s
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public eu.driver.model.geojson.sim.TypeEnum getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setType(eu.driver.model.geojson.sim.TypeEnum value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.label = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'label' field.
      * Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearLabel() {
      label = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subEntities' field.
      * Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSubEntities() {
      return subEntities;
    }

    /**
      * Sets the value of the 'subEntities' field.
      * Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
      * @param value The value of 'subEntities'.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder setSubEntities(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.subEntities = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subEntities' field has been set.
      * Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
      * @return True if the 'subEntities' field has been set, false otherwise.
      */
    public boolean hasSubEntities() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subEntities' field.
      * Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
      * @return This builder.
      */
    public eu.driver.model.geojson.sim.SimulatedEntityProperties.Builder clearSubEntities() {
      subEntities = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SimulatedEntityProperties build() {
      try {
        SimulatedEntityProperties record = new SimulatedEntityProperties();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (eu.driver.model.geojson.sim.TypeEnum) defaultValue(fields()[3]);
        record.label = fieldSetFlags()[4] ? this.label : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.subEntities = fieldSetFlags()[5] ? this.subEntities : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SimulatedEntityProperties>
    WRITER$ = (org.apache.avro.io.DatumWriter<SimulatedEntityProperties>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SimulatedEntityProperties>
    READER$ = (org.apache.avro.io.DatumReader<SimulatedEntityProperties>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
