/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.geojson;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Specfic properties for an XVR emergency vehicle */
@org.apache.avro.specific.AvroGenerated
public class XVRItemProperties extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5071076891449078230L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XVRItemProperties\",\"namespace\":\"eu.driver.model.geojson\",\"doc\":\"Specfic properties for an XVR emergency vehicle\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"yaw\",\"type\":\"double\"},{\"name\":\"pitch\",\"type\":\"double\"},{\"name\":\"roll\",\"type\":\"double\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subLabel\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<XVRItemProperties> ENCODER =
      new BinaryMessageEncoder<XVRItemProperties>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<XVRItemProperties> DECODER =
      new BinaryMessageDecoder<XVRItemProperties>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<XVRItemProperties> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<XVRItemProperties> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<XVRItemProperties>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this XVRItemProperties to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a XVRItemProperties from a ByteBuffer. */
  public static XVRItemProperties fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence guid;
  @Deprecated public double speed;
  @Deprecated public double yaw;
  @Deprecated public double pitch;
  @Deprecated public double roll;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.CharSequence subType;
  @Deprecated public java.lang.CharSequence label;
  @Deprecated public java.lang.CharSequence subLabel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public XVRItemProperties() {}

  /**
   * All-args constructor.
   * @param guid The new value for guid
   * @param speed The new value for speed
   * @param yaw The new value for yaw
   * @param pitch The new value for pitch
   * @param roll The new value for roll
   * @param type The new value for type
   * @param subType The new value for subType
   * @param label The new value for label
   * @param subLabel The new value for subLabel
   */
  public XVRItemProperties(java.lang.CharSequence guid, java.lang.Double speed, java.lang.Double yaw, java.lang.Double pitch, java.lang.Double roll, java.lang.CharSequence type, java.lang.CharSequence subType, java.lang.CharSequence label, java.lang.CharSequence subLabel) {
    this.guid = guid;
    this.speed = speed;
    this.yaw = yaw;
    this.pitch = pitch;
    this.roll = roll;
    this.type = type;
    this.subType = subType;
    this.label = label;
    this.subLabel = subLabel;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return speed;
    case 2: return yaw;
    case 3: return pitch;
    case 4: return roll;
    case 5: return type;
    case 6: return subType;
    case 7: return label;
    case 8: return subLabel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: speed = (java.lang.Double)value$; break;
    case 2: yaw = (java.lang.Double)value$; break;
    case 3: pitch = (java.lang.Double)value$; break;
    case 4: roll = (java.lang.Double)value$; break;
    case 5: type = (java.lang.CharSequence)value$; break;
    case 6: subType = (java.lang.CharSequence)value$; break;
    case 7: label = (java.lang.CharSequence)value$; break;
    case 8: subLabel = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return The value of the 'guid' field.
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }

  /**
   * Sets the value of the 'guid' field.
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'yaw' field.
   * @return The value of the 'yaw' field.
   */
  public java.lang.Double getYaw() {
    return yaw;
  }

  /**
   * Sets the value of the 'yaw' field.
   * @param value the value to set.
   */
  public void setYaw(java.lang.Double value) {
    this.yaw = value;
  }

  /**
   * Gets the value of the 'pitch' field.
   * @return The value of the 'pitch' field.
   */
  public java.lang.Double getPitch() {
    return pitch;
  }

  /**
   * Sets the value of the 'pitch' field.
   * @param value the value to set.
   */
  public void setPitch(java.lang.Double value) {
    this.pitch = value;
  }

  /**
   * Gets the value of the 'roll' field.
   * @return The value of the 'roll' field.
   */
  public java.lang.Double getRoll() {
    return roll;
  }

  /**
   * Sets the value of the 'roll' field.
   * @param value the value to set.
   */
  public void setRoll(java.lang.Double value) {
    this.roll = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'subType' field.
   * @return The value of the 'subType' field.
   */
  public java.lang.CharSequence getSubType() {
    return subType;
  }

  /**
   * Sets the value of the 'subType' field.
   * @param value the value to set.
   */
  public void setSubType(java.lang.CharSequence value) {
    this.subType = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'subLabel' field.
   * @return The value of the 'subLabel' field.
   */
  public java.lang.CharSequence getSubLabel() {
    return subLabel;
  }

  /**
   * Sets the value of the 'subLabel' field.
   * @param value the value to set.
   */
  public void setSubLabel(java.lang.CharSequence value) {
    this.subLabel = value;
  }

  /**
   * Creates a new XVRItemProperties RecordBuilder.
   * @return A new XVRItemProperties RecordBuilder
   */
  public static eu.driver.model.geojson.XVRItemProperties.Builder newBuilder() {
    return new eu.driver.model.geojson.XVRItemProperties.Builder();
  }

  /**
   * Creates a new XVRItemProperties RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new XVRItemProperties RecordBuilder
   */
  public static eu.driver.model.geojson.XVRItemProperties.Builder newBuilder(eu.driver.model.geojson.XVRItemProperties.Builder other) {
    return new eu.driver.model.geojson.XVRItemProperties.Builder(other);
  }

  /**
   * Creates a new XVRItemProperties RecordBuilder by copying an existing XVRItemProperties instance.
   * @param other The existing instance to copy.
   * @return A new XVRItemProperties RecordBuilder
   */
  public static eu.driver.model.geojson.XVRItemProperties.Builder newBuilder(eu.driver.model.geojson.XVRItemProperties other) {
    return new eu.driver.model.geojson.XVRItemProperties.Builder(other);
  }

  /**
   * RecordBuilder for XVRItemProperties instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<XVRItemProperties>
    implements org.apache.avro.data.RecordBuilder<XVRItemProperties> {

    private java.lang.CharSequence guid;
    private double speed;
    private double yaw;
    private double pitch;
    private double roll;
    private java.lang.CharSequence type;
    private java.lang.CharSequence subType;
    private java.lang.CharSequence label;
    private java.lang.CharSequence subLabel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.geojson.XVRItemProperties.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.speed)) {
        this.speed = data().deepCopy(fields()[1].schema(), other.speed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.yaw)) {
        this.yaw = data().deepCopy(fields()[2].schema(), other.yaw);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pitch)) {
        this.pitch = data().deepCopy(fields()[3].schema(), other.pitch);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.roll)) {
        this.roll = data().deepCopy(fields()[4].schema(), other.roll);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.subType)) {
        this.subType = data().deepCopy(fields()[6].schema(), other.subType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.label)) {
        this.label = data().deepCopy(fields()[7].schema(), other.label);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.subLabel)) {
        this.subLabel = data().deepCopy(fields()[8].schema(), other.subLabel);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing XVRItemProperties instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.geojson.XVRItemProperties other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.speed)) {
        this.speed = data().deepCopy(fields()[1].schema(), other.speed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.yaw)) {
        this.yaw = data().deepCopy(fields()[2].schema(), other.yaw);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pitch)) {
        this.pitch = data().deepCopy(fields()[3].schema(), other.pitch);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.roll)) {
        this.roll = data().deepCopy(fields()[4].schema(), other.roll);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.subType)) {
        this.subType = data().deepCopy(fields()[6].schema(), other.subType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.label)) {
        this.label = data().deepCopy(fields()[7].schema(), other.label);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.subLabel)) {
        this.subLabel = data().deepCopy(fields()[8].schema(), other.subLabel);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }

    /**
      * Sets the value of the 'guid' field.
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setSpeed(double value) {
      validate(fields()[1], value);
      this.speed = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearSpeed() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'yaw' field.
      * @return The value.
      */
    public java.lang.Double getYaw() {
      return yaw;
    }

    /**
      * Sets the value of the 'yaw' field.
      * @param value The value of 'yaw'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setYaw(double value) {
      validate(fields()[2], value);
      this.yaw = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'yaw' field has been set.
      * @return True if the 'yaw' field has been set, false otherwise.
      */
    public boolean hasYaw() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'yaw' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearYaw() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pitch' field.
      * @return The value.
      */
    public java.lang.Double getPitch() {
      return pitch;
    }

    /**
      * Sets the value of the 'pitch' field.
      * @param value The value of 'pitch'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setPitch(double value) {
      validate(fields()[3], value);
      this.pitch = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pitch' field has been set.
      * @return True if the 'pitch' field has been set, false otherwise.
      */
    public boolean hasPitch() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pitch' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearPitch() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'roll' field.
      * @return The value.
      */
    public java.lang.Double getRoll() {
      return roll;
    }

    /**
      * Sets the value of the 'roll' field.
      * @param value The value of 'roll'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setRoll(double value) {
      validate(fields()[4], value);
      this.roll = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'roll' field has been set.
      * @return True if the 'roll' field has been set, false otherwise.
      */
    public boolean hasRoll() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'roll' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearRoll() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'subType' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubType() {
      return subType;
    }

    /**
      * Sets the value of the 'subType' field.
      * @param value The value of 'subType'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setSubType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.subType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'subType' field has been set.
      * @return True if the 'subType' field has been set, false otherwise.
      */
    public boolean hasSubType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'subType' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearSubType() {
      subType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.label = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearLabel() {
      label = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'subLabel' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubLabel() {
      return subLabel;
    }

    /**
      * Sets the value of the 'subLabel' field.
      * @param value The value of 'subLabel'.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder setSubLabel(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.subLabel = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'subLabel' field has been set.
      * @return True if the 'subLabel' field has been set, false otherwise.
      */
    public boolean hasSubLabel() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'subLabel' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.XVRItemProperties.Builder clearSubLabel() {
      subLabel = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public XVRItemProperties build() {
      try {
        XVRItemProperties record = new XVRItemProperties();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.speed = fieldSetFlags()[1] ? this.speed : (java.lang.Double) defaultValue(fields()[1]);
        record.yaw = fieldSetFlags()[2] ? this.yaw : (java.lang.Double) defaultValue(fields()[2]);
        record.pitch = fieldSetFlags()[3] ? this.pitch : (java.lang.Double) defaultValue(fields()[3]);
        record.roll = fieldSetFlags()[4] ? this.roll : (java.lang.Double) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.subType = fieldSetFlags()[6] ? this.subType : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.label = fieldSetFlags()[7] ? this.label : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.subLabel = fieldSetFlags()[8] ? this.subLabel : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<XVRItemProperties>
    WRITER$ = (org.apache.avro.io.DatumWriter<XVRItemProperties>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<XVRItemProperties>
    READER$ = (org.apache.avro.io.DatumReader<XVRItemProperties>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
