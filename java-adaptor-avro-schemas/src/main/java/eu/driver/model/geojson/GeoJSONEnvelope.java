/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.geojson;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** An envelope containing a GeoJSON FeatureCollection object, with a unique id and a title. */
@org.apache.avro.specific.AvroGenerated
public class GeoJSONEnvelope extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4178541219162269941L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeoJSONEnvelope\",\"namespace\":\"eu.driver.model.geojson\",\"doc\":\"An envelope containing a GeoJSON FeatureCollection object, with a unique id and a title.\",\"fields\":[{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"boolean\",\"string\",\"int\",\"long\",\"float\",\"double\"]}],\"doc\":\"Metadata for the FeatureCollection in the geojson field.\",\"namespace\":\"eu.driver.model.geojson\"},{\"name\":\"geojson\",\"type\":{\"type\":\"record\",\"name\":\"FeatureCollection\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FeatureCollectionType\",\"symbols\":[\"FeatureCollection\"]},\"default\":\"FeatureCollection\"},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Feature\",\"doc\":\"A GeoJSON Feature object\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FeatureType\",\"symbols\":[\"Feature\"]},\"default\":\"Feature\"},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"geometry\",\"type\":[{\"type\":\"record\",\"name\":\"Point\",\"doc\":\"Describes a point geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PointType\",\"symbols\":[\"Point\"]},\"default\":\"Point\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]},{\"type\":\"record\",\"name\":\"LineString\",\"doc\":\"Describes a LineString geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"LineStringType\",\"symbols\":[\"LineString\"]},\"default\":\"LineString\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}]},{\"type\":\"record\",\"name\":\"MultiLineString\",\"doc\":\"Describes a MultiLineString geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiLineStringType\",\"symbols\":[\"MultiLineString\"]},\"default\":\"MultiLineString\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]},{\"type\":\"record\",\"name\":\"Polygon\",\"doc\":\"Describes a Polygon geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PolygonType\",\"symbols\":[\"Polygon\"]},\"default\":\"Polygon\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]},{\"type\":\"record\",\"name\":\"MultiPolygon\",\"doc\":\"Describes a MultiPolygon geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiPolygonType\",\"symbols\":[\"MultiPolygon\"]},\"default\":\"MultiPolygon\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}}]}]},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"boolean\",\"string\",\"int\",\"long\",\"float\",\"double\",{\"type\":\"array\",\"items\":[\"null\",\"boolean\",\"string\",\"int\",\"long\",\"float\",\"double\"]},{\"type\":\"map\",\"values\":[\"null\",\"boolean\",\"string\",\"int\",\"long\",\"float\",\"double\"]}]},\"doc\":\"Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.\",\"namespace\":\"eu.driver.model.geojson\"}]}}]}]},\"namespace\":\"eu.driver.model.geojson\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GeoJSONEnvelope> ENCODER =
      new BinaryMessageEncoder<GeoJSONEnvelope>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GeoJSONEnvelope> DECODER =
      new BinaryMessageDecoder<GeoJSONEnvelope>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<GeoJSONEnvelope> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<GeoJSONEnvelope> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GeoJSONEnvelope>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this GeoJSONEnvelope to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a GeoJSONEnvelope from a ByteBuffer. */
  public static GeoJSONEnvelope fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Metadata for the FeatureCollection in the geojson field. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> properties;
  @Deprecated public eu.driver.model.geojson.FeatureCollection geojson;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GeoJSONEnvelope() {}

  /**
   * All-args constructor.
   * @param properties Metadata for the FeatureCollection in the geojson field.
   * @param geojson The new value for geojson
   */
  public GeoJSONEnvelope(java.util.Map<java.lang.CharSequence,java.lang.Object> properties, eu.driver.model.geojson.FeatureCollection geojson) {
    this.properties = properties;
    this.geojson = geojson;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return properties;
    case 1: return geojson;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: properties = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    case 1: geojson = (eu.driver.model.geojson.FeatureCollection)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Metadata for the FeatureCollection in the geojson field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Metadata for the FeatureCollection in the geojson field.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'geojson' field.
   * @return The value of the 'geojson' field.
   */
  public eu.driver.model.geojson.FeatureCollection getGeojson() {
    return geojson;
  }

  /**
   * Sets the value of the 'geojson' field.
   * @param value the value to set.
   */
  public void setGeojson(eu.driver.model.geojson.FeatureCollection value) {
    this.geojson = value;
  }

  /**
   * Creates a new GeoJSONEnvelope RecordBuilder.
   * @return A new GeoJSONEnvelope RecordBuilder
   */
  public static eu.driver.model.geojson.GeoJSONEnvelope.Builder newBuilder() {
    return new eu.driver.model.geojson.GeoJSONEnvelope.Builder();
  }

  /**
   * Creates a new GeoJSONEnvelope RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeoJSONEnvelope RecordBuilder
   */
  public static eu.driver.model.geojson.GeoJSONEnvelope.Builder newBuilder(eu.driver.model.geojson.GeoJSONEnvelope.Builder other) {
    return new eu.driver.model.geojson.GeoJSONEnvelope.Builder(other);
  }

  /**
   * Creates a new GeoJSONEnvelope RecordBuilder by copying an existing GeoJSONEnvelope instance.
   * @param other The existing instance to copy.
   * @return A new GeoJSONEnvelope RecordBuilder
   */
  public static eu.driver.model.geojson.GeoJSONEnvelope.Builder newBuilder(eu.driver.model.geojson.GeoJSONEnvelope other) {
    return new eu.driver.model.geojson.GeoJSONEnvelope.Builder(other);
  }

  /**
   * RecordBuilder for GeoJSONEnvelope instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeoJSONEnvelope>
    implements org.apache.avro.data.RecordBuilder<GeoJSONEnvelope> {

    /** Metadata for the FeatureCollection in the geojson field. */
    private java.util.Map<java.lang.CharSequence,java.lang.Object> properties;
    private eu.driver.model.geojson.FeatureCollection geojson;
    private eu.driver.model.geojson.FeatureCollection.Builder geojsonBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.geojson.GeoJSONEnvelope.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.properties)) {
        this.properties = data().deepCopy(fields()[0].schema(), other.properties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geojson)) {
        this.geojson = data().deepCopy(fields()[1].schema(), other.geojson);
        fieldSetFlags()[1] = true;
      }
      if (other.hasGeojsonBuilder()) {
        this.geojsonBuilder = eu.driver.model.geojson.FeatureCollection.newBuilder(other.getGeojsonBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing GeoJSONEnvelope instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.geojson.GeoJSONEnvelope other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.properties)) {
        this.properties = data().deepCopy(fields()[0].schema(), other.properties);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geojson)) {
        this.geojson = data().deepCopy(fields()[1].schema(), other.geojson);
        fieldSetFlags()[1] = true;
      }
      this.geojsonBuilder = null;
    }

    /**
      * Gets the value of the 'properties' field.
      * Metadata for the FeatureCollection in the geojson field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Metadata for the FeatureCollection in the geojson field.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public eu.driver.model.geojson.GeoJSONEnvelope.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[0], value);
      this.properties = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Metadata for the FeatureCollection in the geojson field.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'properties' field.
      * Metadata for the FeatureCollection in the geojson field.
      * @return This builder.
      */
    public eu.driver.model.geojson.GeoJSONEnvelope.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geojson' field.
      * @return The value.
      */
    public eu.driver.model.geojson.FeatureCollection getGeojson() {
      return geojson;
    }

    /**
      * Sets the value of the 'geojson' field.
      * @param value The value of 'geojson'.
      * @return This builder.
      */
    public eu.driver.model.geojson.GeoJSONEnvelope.Builder setGeojson(eu.driver.model.geojson.FeatureCollection value) {
      validate(fields()[1], value);
      this.geojsonBuilder = null;
      this.geojson = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geojson' field has been set.
      * @return True if the 'geojson' field has been set, false otherwise.
      */
    public boolean hasGeojson() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'geojson' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.driver.model.geojson.FeatureCollection.Builder getGeojsonBuilder() {
      if (geojsonBuilder == null) {
        if (hasGeojson()) {
          setGeojsonBuilder(eu.driver.model.geojson.FeatureCollection.newBuilder(geojson));
        } else {
          setGeojsonBuilder(eu.driver.model.geojson.FeatureCollection.newBuilder());
        }
      }
      return geojsonBuilder;
    }

    /**
     * Sets the Builder instance for the 'geojson' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.geojson.GeoJSONEnvelope.Builder setGeojsonBuilder(eu.driver.model.geojson.FeatureCollection.Builder value) {
      clearGeojson();
      geojsonBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'geojson' field has an active Builder instance
     * @return True if the 'geojson' field has an active Builder instance
     */
    public boolean hasGeojsonBuilder() {
      return geojsonBuilder != null;
    }

    /**
      * Clears the value of the 'geojson' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.GeoJSONEnvelope.Builder clearGeojson() {
      geojson = null;
      geojsonBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GeoJSONEnvelope build() {
      try {
        GeoJSONEnvelope record = new GeoJSONEnvelope();
        record.properties = fieldSetFlags()[0] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[0]);
        if (geojsonBuilder != null) {
          record.geojson = this.geojsonBuilder.build();
        } else {
          record.geojson = fieldSetFlags()[1] ? this.geojson : (eu.driver.model.geojson.FeatureCollection) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GeoJSONEnvelope>
    WRITER$ = (org.apache.avro.io.DatumWriter<GeoJSONEnvelope>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GeoJSONEnvelope>
    READER$ = (org.apache.avro.io.DatumReader<GeoJSONEnvelope>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
