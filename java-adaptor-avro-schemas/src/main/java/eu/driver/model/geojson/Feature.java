/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.geojson;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A GeoJSON Feature object */
@org.apache.avro.specific.AvroGenerated
public class Feature extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1971403266378932334L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Feature\",\"namespace\":\"eu.driver.model.geojson\",\"doc\":\"A GeoJSON Feature object\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FeatureType\",\"symbols\":[\"Feature\"]},\"default\":\"Feature\"},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}],\"default\":null},{\"name\":\"geometry\",\"type\":[{\"type\":\"record\",\"name\":\"Point\",\"doc\":\"Describes a point geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PointType\",\"symbols\":[\"Point\"]},\"default\":\"Point\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]},{\"type\":\"record\",\"name\":\"LineString\",\"doc\":\"Describes a LineString geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"LineStringType\",\"symbols\":[\"LineString\"]},\"default\":\"LineString\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}]},{\"type\":\"record\",\"name\":\"MultiLineString\",\"doc\":\"Describes a MultiLineString geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiLineStringType\",\"symbols\":[\"MultiLineString\"]},\"default\":\"MultiLineString\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]},{\"type\":\"record\",\"name\":\"Polygon\",\"doc\":\"Describes a Polygon geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PolygonType\",\"symbols\":[\"Polygon\"]},\"default\":\"Polygon\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]},{\"type\":\"record\",\"name\":\"MultiPolygon\",\"doc\":\"Describes a MultiPolygon geometry\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiPolygonType\",\"symbols\":[\"MultiPolygon\"]},\"default\":\"MultiPolygon\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}}]}]},{\"name\":\"properties\",\"type\":{\"type\":\"record\",\"name\":\"XVRItemProperties\",\"doc\":\"Specfic properties for an XVR emergency vehicle\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"yaw\",\"type\":\"double\"},{\"name\":\"pitch\",\"type\":\"double\"},{\"name\":\"roll\",\"type\":\"double\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subLabel\",\"type\":[\"null\",\"string\"],\"default\":null}]},\"doc\":\"Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Feature> ENCODER =
      new BinaryMessageEncoder<Feature>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Feature> DECODER =
      new BinaryMessageDecoder<Feature>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Feature> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Feature> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Feature>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Feature to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Feature from a ByteBuffer. */
  public static Feature fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public eu.driver.model.geojson.FeatureType type;
  @Deprecated public java.util.List<java.lang.Double> bbox;
  @Deprecated public java.lang.Object geometry;
  /** Any type, without infinite nesting, should be replaced during actual usage with a record with named properties. */
  @Deprecated public eu.driver.model.geojson.XVRItemProperties properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Feature() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param bbox The new value for bbox
   * @param geometry The new value for geometry
   * @param properties Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
   */
  public Feature(eu.driver.model.geojson.FeatureType type, java.util.List<java.lang.Double> bbox, java.lang.Object geometry, eu.driver.model.geojson.XVRItemProperties properties) {
    this.type = type;
    this.bbox = bbox;
    this.geometry = geometry;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return bbox;
    case 2: return geometry;
    case 3: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (eu.driver.model.geojson.FeatureType)value$; break;
    case 1: bbox = (java.util.List<java.lang.Double>)value$; break;
    case 2: geometry = (java.lang.Object)value$; break;
    case 3: properties = (eu.driver.model.geojson.XVRItemProperties)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public eu.driver.model.geojson.FeatureType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(eu.driver.model.geojson.FeatureType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'bbox' field.
   * @return The value of the 'bbox' field.
   */
  public java.util.List<java.lang.Double> getBbox() {
    return bbox;
  }

  /**
   * Sets the value of the 'bbox' field.
   * @param value the value to set.
   */
  public void setBbox(java.util.List<java.lang.Double> value) {
    this.bbox = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.lang.Object getGeometry() {
    return geometry;
  }

  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.lang.Object value) {
    this.geometry = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
   */
  public eu.driver.model.geojson.XVRItemProperties getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
   * @param value the value to set.
   */
  public void setProperties(eu.driver.model.geojson.XVRItemProperties value) {
    this.properties = value;
  }

  /**
   * Creates a new Feature RecordBuilder.
   * @return A new Feature RecordBuilder
   */
  public static eu.driver.model.geojson.Feature.Builder newBuilder() {
    return new eu.driver.model.geojson.Feature.Builder();
  }

  /**
   * Creates a new Feature RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Feature RecordBuilder
   */
  public static eu.driver.model.geojson.Feature.Builder newBuilder(eu.driver.model.geojson.Feature.Builder other) {
    return new eu.driver.model.geojson.Feature.Builder(other);
  }

  /**
   * Creates a new Feature RecordBuilder by copying an existing Feature instance.
   * @param other The existing instance to copy.
   * @return A new Feature RecordBuilder
   */
  public static eu.driver.model.geojson.Feature.Builder newBuilder(eu.driver.model.geojson.Feature other) {
    return new eu.driver.model.geojson.Feature.Builder(other);
  }

  /**
   * RecordBuilder for Feature instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Feature>
    implements org.apache.avro.data.RecordBuilder<Feature> {

    private eu.driver.model.geojson.FeatureType type;
    private java.util.List<java.lang.Double> bbox;
    private java.lang.Object geometry;
    /** Any type, without infinite nesting, should be replaced during actual usage with a record with named properties. */
    private eu.driver.model.geojson.XVRItemProperties properties;
    private eu.driver.model.geojson.XVRItemProperties.Builder propertiesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.geojson.Feature.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bbox)) {
        this.bbox = data().deepCopy(fields()[1].schema(), other.bbox);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.geometry)) {
        this.geometry = data().deepCopy(fields()[2].schema(), other.geometry);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPropertiesBuilder()) {
        this.propertiesBuilder = eu.driver.model.geojson.XVRItemProperties.newBuilder(other.getPropertiesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Feature instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.geojson.Feature other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bbox)) {
        this.bbox = data().deepCopy(fields()[1].schema(), other.bbox);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.geometry)) {
        this.geometry = data().deepCopy(fields()[2].schema(), other.geometry);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
      this.propertiesBuilder = null;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public eu.driver.model.geojson.FeatureType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder setType(eu.driver.model.geojson.FeatureType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbox' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getBbox() {
      return bbox;
    }

    /**
      * Sets the value of the 'bbox' field.
      * @param value The value of 'bbox'.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder setBbox(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.bbox = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bbox' field has been set.
      * @return True if the 'bbox' field has been set, false otherwise.
      */
    public boolean hasBbox() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bbox' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder clearBbox() {
      bbox = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.lang.Object getGeometry() {
      return geometry;
    }

    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder setGeometry(java.lang.Object value) {
      validate(fields()[2], value);
      this.geometry = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
      * @return The value.
      */
    public eu.driver.model.geojson.XVRItemProperties getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder setProperties(eu.driver.model.geojson.XVRItemProperties value) {
      validate(fields()[3], value);
      this.propertiesBuilder = null;
      this.properties = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'properties' field and creates one if it doesn't exist yet.
     * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
     * @return This builder.
     */
    public eu.driver.model.geojson.XVRItemProperties.Builder getPropertiesBuilder() {
      if (propertiesBuilder == null) {
        if (hasProperties()) {
          setPropertiesBuilder(eu.driver.model.geojson.XVRItemProperties.newBuilder(properties));
        } else {
          setPropertiesBuilder(eu.driver.model.geojson.XVRItemProperties.newBuilder());
        }
      }
      return propertiesBuilder;
    }

    /**
     * Sets the Builder instance for the 'properties' field
     * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.driver.model.geojson.Feature.Builder setPropertiesBuilder(eu.driver.model.geojson.XVRItemProperties.Builder value) {
      clearProperties();
      propertiesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'properties' field has an active Builder instance
     * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
     * @return True if the 'properties' field has an active Builder instance
     */
    public boolean hasPropertiesBuilder() {
      return propertiesBuilder != null;
    }

    /**
      * Clears the value of the 'properties' field.
      * Any type, without infinite nesting, should be replaced during actual usage with a record with named properties.
      * @return This builder.
      */
    public eu.driver.model.geojson.Feature.Builder clearProperties() {
      properties = null;
      propertiesBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Feature build() {
      try {
        Feature record = new Feature();
        record.type = fieldSetFlags()[0] ? this.type : (eu.driver.model.geojson.FeatureType) defaultValue(fields()[0]);
        record.bbox = fieldSetFlags()[1] ? this.bbox : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.geometry = fieldSetFlags()[2] ? this.geometry : (java.lang.Object) defaultValue(fields()[2]);
        if (propertiesBuilder != null) {
          record.properties = this.propertiesBuilder.build();
        } else {
          record.properties = fieldSetFlags()[3] ? this.properties : (eu.driver.model.geojson.XVRItemProperties) defaultValue(fields()[3]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Feature>
    WRITER$ = (org.apache.avro.io.DatumWriter<Feature>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Feature>
    READER$ = (org.apache.avro.io.DatumReader<Feature>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
