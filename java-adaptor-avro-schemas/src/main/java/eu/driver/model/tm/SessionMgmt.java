/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.tm;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is the message for init. the trial session. */
@org.apache.avro.specific.AvroGenerated
public class SessionMgmt extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5229138041414451609L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SessionMgmt\",\"namespace\":\"eu.driver.model.tm\",\"doc\":\"This is the message for init. the trial session.\",\"fields\":[{\"name\":\"trialId\",\"type\":\"string\",\"doc\":\"The unique ID of the Trial\"},{\"name\":\"trialName\",\"type\":\"string\",\"doc\":\"The name of the Trial\"},{\"name\":\"scenarioId\",\"type\":\"string\",\"doc\":\"The unique ID of the Scenario\"},{\"name\":\"scenarioName\",\"type\":\"string\",\"doc\":\"The name of the Scenario\"},{\"name\":\"sessionId\",\"type\":\"string\",\"doc\":\"The unique ID of the Session\"},{\"name\":\"sessionName\",\"type\":\"string\",\"doc\":\"The name of the Session\"},{\"name\":\"sessionState\",\"type\":{\"type\":\"enum\",\"name\":\"SessionState\",\"symbols\":[\"START\",\"STOP\"]},\"doc\":\"The state of the Session.\"},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional comment to the session state.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SessionMgmt> ENCODER =
      new BinaryMessageEncoder<SessionMgmt>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SessionMgmt> DECODER =
      new BinaryMessageDecoder<SessionMgmt>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SessionMgmt> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SessionMgmt> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SessionMgmt>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SessionMgmt to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SessionMgmt from a ByteBuffer. */
  public static SessionMgmt fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique ID of the Trial */
  @Deprecated public java.lang.CharSequence trialId;
  /** The name of the Trial */
  @Deprecated public java.lang.CharSequence trialName;
  /** The unique ID of the Scenario */
  @Deprecated public java.lang.CharSequence scenarioId;
  /** The name of the Scenario */
  @Deprecated public java.lang.CharSequence scenarioName;
  /** The unique ID of the Session */
  @Deprecated public java.lang.CharSequence sessionId;
  /** The name of the Session */
  @Deprecated public java.lang.CharSequence sessionName;
  /** The state of the Session. */
  @Deprecated public eu.driver.model.tm.SessionState sessionState;
  /** An optional comment to the session state. */
  @Deprecated public java.lang.CharSequence comment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SessionMgmt() {}

  /**
   * All-args constructor.
   * @param trialId The unique ID of the Trial
   * @param trialName The name of the Trial
   * @param scenarioId The unique ID of the Scenario
   * @param scenarioName The name of the Scenario
   * @param sessionId The unique ID of the Session
   * @param sessionName The name of the Session
   * @param sessionState The state of the Session.
   * @param comment An optional comment to the session state.
   */
  public SessionMgmt(java.lang.CharSequence trialId, java.lang.CharSequence trialName, java.lang.CharSequence scenarioId, java.lang.CharSequence scenarioName, java.lang.CharSequence sessionId, java.lang.CharSequence sessionName, eu.driver.model.tm.SessionState sessionState, java.lang.CharSequence comment) {
    this.trialId = trialId;
    this.trialName = trialName;
    this.scenarioId = scenarioId;
    this.scenarioName = scenarioName;
    this.sessionId = sessionId;
    this.sessionName = sessionName;
    this.sessionState = sessionState;
    this.comment = comment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trialId;
    case 1: return trialName;
    case 2: return scenarioId;
    case 3: return scenarioName;
    case 4: return sessionId;
    case 5: return sessionName;
    case 6: return sessionState;
    case 7: return comment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trialId = (java.lang.CharSequence)value$; break;
    case 1: trialName = (java.lang.CharSequence)value$; break;
    case 2: scenarioId = (java.lang.CharSequence)value$; break;
    case 3: scenarioName = (java.lang.CharSequence)value$; break;
    case 4: sessionId = (java.lang.CharSequence)value$; break;
    case 5: sessionName = (java.lang.CharSequence)value$; break;
    case 6: sessionState = (eu.driver.model.tm.SessionState)value$; break;
    case 7: comment = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trialId' field.
   * @return The unique ID of the Trial
   */
  public java.lang.CharSequence getTrialId() {
    return trialId;
  }

  /**
   * Sets the value of the 'trialId' field.
   * The unique ID of the Trial
   * @param value the value to set.
   */
  public void setTrialId(java.lang.CharSequence value) {
    this.trialId = value;
  }

  /**
   * Gets the value of the 'trialName' field.
   * @return The name of the Trial
   */
  public java.lang.CharSequence getTrialName() {
    return trialName;
  }

  /**
   * Sets the value of the 'trialName' field.
   * The name of the Trial
   * @param value the value to set.
   */
  public void setTrialName(java.lang.CharSequence value) {
    this.trialName = value;
  }

  /**
   * Gets the value of the 'scenarioId' field.
   * @return The unique ID of the Scenario
   */
  public java.lang.CharSequence getScenarioId() {
    return scenarioId;
  }

  /**
   * Sets the value of the 'scenarioId' field.
   * The unique ID of the Scenario
   * @param value the value to set.
   */
  public void setScenarioId(java.lang.CharSequence value) {
    this.scenarioId = value;
  }

  /**
   * Gets the value of the 'scenarioName' field.
   * @return The name of the Scenario
   */
  public java.lang.CharSequence getScenarioName() {
    return scenarioName;
  }

  /**
   * Sets the value of the 'scenarioName' field.
   * The name of the Scenario
   * @param value the value to set.
   */
  public void setScenarioName(java.lang.CharSequence value) {
    this.scenarioName = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return The unique ID of the Session
   */
  public java.lang.CharSequence getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * The unique ID of the Session
   * @param value the value to set.
   */
  public void setSessionId(java.lang.CharSequence value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'sessionName' field.
   * @return The name of the Session
   */
  public java.lang.CharSequence getSessionName() {
    return sessionName;
  }

  /**
   * Sets the value of the 'sessionName' field.
   * The name of the Session
   * @param value the value to set.
   */
  public void setSessionName(java.lang.CharSequence value) {
    this.sessionName = value;
  }

  /**
   * Gets the value of the 'sessionState' field.
   * @return The state of the Session.
   */
  public eu.driver.model.tm.SessionState getSessionState() {
    return sessionState;
  }

  /**
   * Sets the value of the 'sessionState' field.
   * The state of the Session.
   * @param value the value to set.
   */
  public void setSessionState(eu.driver.model.tm.SessionState value) {
    this.sessionState = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return An optional comment to the session state.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * An optional comment to the session state.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Creates a new SessionMgmt RecordBuilder.
   * @return A new SessionMgmt RecordBuilder
   */
  public static eu.driver.model.tm.SessionMgmt.Builder newBuilder() {
    return new eu.driver.model.tm.SessionMgmt.Builder();
  }

  /**
   * Creates a new SessionMgmt RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SessionMgmt RecordBuilder
   */
  public static eu.driver.model.tm.SessionMgmt.Builder newBuilder(eu.driver.model.tm.SessionMgmt.Builder other) {
    return new eu.driver.model.tm.SessionMgmt.Builder(other);
  }

  /**
   * Creates a new SessionMgmt RecordBuilder by copying an existing SessionMgmt instance.
   * @param other The existing instance to copy.
   * @return A new SessionMgmt RecordBuilder
   */
  public static eu.driver.model.tm.SessionMgmt.Builder newBuilder(eu.driver.model.tm.SessionMgmt other) {
    return new eu.driver.model.tm.SessionMgmt.Builder(other);
  }

  /**
   * RecordBuilder for SessionMgmt instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SessionMgmt>
    implements org.apache.avro.data.RecordBuilder<SessionMgmt> {

    /** The unique ID of the Trial */
    private java.lang.CharSequence trialId;
    /** The name of the Trial */
    private java.lang.CharSequence trialName;
    /** The unique ID of the Scenario */
    private java.lang.CharSequence scenarioId;
    /** The name of the Scenario */
    private java.lang.CharSequence scenarioName;
    /** The unique ID of the Session */
    private java.lang.CharSequence sessionId;
    /** The name of the Session */
    private java.lang.CharSequence sessionName;
    /** The state of the Session. */
    private eu.driver.model.tm.SessionState sessionState;
    /** An optional comment to the session state. */
    private java.lang.CharSequence comment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.tm.SessionMgmt.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.trialName)) {
        this.trialName = data().deepCopy(fields()[1].schema(), other.trialName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scenarioId)) {
        this.scenarioId = data().deepCopy(fields()[2].schema(), other.scenarioId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scenarioName)) {
        this.scenarioName = data().deepCopy(fields()[3].schema(), other.scenarioName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[4].schema(), other.sessionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionName)) {
        this.sessionName = data().deepCopy(fields()[5].schema(), other.sessionName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sessionState)) {
        this.sessionState = data().deepCopy(fields()[6].schema(), other.sessionState);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.comment)) {
        this.comment = data().deepCopy(fields()[7].schema(), other.comment);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SessionMgmt instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.tm.SessionMgmt other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.trialId)) {
        this.trialId = data().deepCopy(fields()[0].schema(), other.trialId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.trialName)) {
        this.trialName = data().deepCopy(fields()[1].schema(), other.trialName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scenarioId)) {
        this.scenarioId = data().deepCopy(fields()[2].schema(), other.scenarioId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scenarioName)) {
        this.scenarioName = data().deepCopy(fields()[3].schema(), other.scenarioName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[4].schema(), other.sessionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionName)) {
        this.sessionName = data().deepCopy(fields()[5].schema(), other.sessionName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sessionState)) {
        this.sessionState = data().deepCopy(fields()[6].schema(), other.sessionState);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.comment)) {
        this.comment = data().deepCopy(fields()[7].schema(), other.comment);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'trialId' field.
      * The unique ID of the Trial
      * @return The value.
      */
    public java.lang.CharSequence getTrialId() {
      return trialId;
    }

    /**
      * Sets the value of the 'trialId' field.
      * The unique ID of the Trial
      * @param value The value of 'trialId'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setTrialId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.trialId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trialId' field has been set.
      * The unique ID of the Trial
      * @return True if the 'trialId' field has been set, false otherwise.
      */
    public boolean hasTrialId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trialId' field.
      * The unique ID of the Trial
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearTrialId() {
      trialId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'trialName' field.
      * The name of the Trial
      * @return The value.
      */
    public java.lang.CharSequence getTrialName() {
      return trialName;
    }

    /**
      * Sets the value of the 'trialName' field.
      * The name of the Trial
      * @param value The value of 'trialName'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setTrialName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.trialName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'trialName' field has been set.
      * The name of the Trial
      * @return True if the 'trialName' field has been set, false otherwise.
      */
    public boolean hasTrialName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'trialName' field.
      * The name of the Trial
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearTrialName() {
      trialName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'scenarioId' field.
      * The unique ID of the Scenario
      * @return The value.
      */
    public java.lang.CharSequence getScenarioId() {
      return scenarioId;
    }

    /**
      * Sets the value of the 'scenarioId' field.
      * The unique ID of the Scenario
      * @param value The value of 'scenarioId'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setScenarioId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.scenarioId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'scenarioId' field has been set.
      * The unique ID of the Scenario
      * @return True if the 'scenarioId' field has been set, false otherwise.
      */
    public boolean hasScenarioId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'scenarioId' field.
      * The unique ID of the Scenario
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearScenarioId() {
      scenarioId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'scenarioName' field.
      * The name of the Scenario
      * @return The value.
      */
    public java.lang.CharSequence getScenarioName() {
      return scenarioName;
    }

    /**
      * Sets the value of the 'scenarioName' field.
      * The name of the Scenario
      * @param value The value of 'scenarioName'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setScenarioName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.scenarioName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'scenarioName' field has been set.
      * The name of the Scenario
      * @return True if the 'scenarioName' field has been set, false otherwise.
      */
    public boolean hasScenarioName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'scenarioName' field.
      * The name of the Scenario
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearScenarioName() {
      scenarioName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * The unique ID of the Session
      * @return The value.
      */
    public java.lang.CharSequence getSessionId() {
      return sessionId;
    }

    /**
      * Sets the value of the 'sessionId' field.
      * The unique ID of the Session
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setSessionId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.sessionId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * The unique ID of the Session
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * The unique ID of the Session
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionName' field.
      * The name of the Session
      * @return The value.
      */
    public java.lang.CharSequence getSessionName() {
      return sessionName;
    }

    /**
      * Sets the value of the 'sessionName' field.
      * The name of the Session
      * @param value The value of 'sessionName'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setSessionName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.sessionName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionName' field has been set.
      * The name of the Session
      * @return True if the 'sessionName' field has been set, false otherwise.
      */
    public boolean hasSessionName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sessionName' field.
      * The name of the Session
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearSessionName() {
      sessionName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionState' field.
      * The state of the Session.
      * @return The value.
      */
    public eu.driver.model.tm.SessionState getSessionState() {
      return sessionState;
    }

    /**
      * Sets the value of the 'sessionState' field.
      * The state of the Session.
      * @param value The value of 'sessionState'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setSessionState(eu.driver.model.tm.SessionState value) {
      validate(fields()[6], value);
      this.sessionState = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionState' field has been set.
      * The state of the Session.
      * @return True if the 'sessionState' field has been set, false otherwise.
      */
    public boolean hasSessionState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sessionState' field.
      * The state of the Session.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearSessionState() {
      sessionState = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * An optional comment to the session state.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }

    /**
      * Sets the value of the 'comment' field.
      * An optional comment to the session state.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.comment = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * An optional comment to the session state.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'comment' field.
      * An optional comment to the session state.
      * @return This builder.
      */
    public eu.driver.model.tm.SessionMgmt.Builder clearComment() {
      comment = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SessionMgmt build() {
      try {
        SessionMgmt record = new SessionMgmt();
        record.trialId = fieldSetFlags()[0] ? this.trialId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.trialName = fieldSetFlags()[1] ? this.trialName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.scenarioId = fieldSetFlags()[2] ? this.scenarioId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.scenarioName = fieldSetFlags()[3] ? this.scenarioName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.sessionId = fieldSetFlags()[4] ? this.sessionId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.sessionName = fieldSetFlags()[5] ? this.sessionName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.sessionState = fieldSetFlags()[6] ? this.sessionState : (eu.driver.model.tm.SessionState) defaultValue(fields()[6]);
        record.comment = fieldSetFlags()[7] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SessionMgmt>
    WRITER$ = (org.apache.avro.io.DatumWriter<SessionMgmt>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SessionMgmt>
    READER$ = (org.apache.avro.io.DatumReader<SessionMgmt>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
