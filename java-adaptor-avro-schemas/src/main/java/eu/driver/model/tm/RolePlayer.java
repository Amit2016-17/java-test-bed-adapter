/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.driver.model.tm;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is the message for phase information. */
@org.apache.avro.specific.AvroGenerated
public class RolePlayer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 724858788820662933L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RolePlayer\",\"namespace\":\"eu.driver.model.tm\",\"doc\":\"This is the message for phase information.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique ID of the message\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"CALL\",\"ACTION\",\"MESSAGE\",\"MAIL\",\"TWEET\"]},\"doc\":\"The type of role play.\"},{\"name\":\"title\",\"type\":\"string\",\"doc\":\"The title of the role play message.\"},{\"name\":\"headline\",\"type\":\"string\",\"doc\":\"The headline of the role play message.\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"The description of the role play message.\"},{\"name\":\"rolePlayerName\",\"type\":\"string\",\"doc\":\"The name of the person that has to handle the message.\"},{\"name\":\"participantNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"The names of the person that have to receive the message.\",\"default\":null},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"RolePlayState\",\"symbols\":[\"SCHEDULED\",\"ON_HOLD\",\"IN_PROGRESS\",\"EXECUTED\",\"CANCELLED\",\"TIMEOUT\"]},\"doc\":\"The current role play state.\"},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional comment to the session state.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RolePlayer> ENCODER =
      new BinaryMessageEncoder<RolePlayer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RolePlayer> DECODER =
      new BinaryMessageDecoder<RolePlayer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RolePlayer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RolePlayer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RolePlayer>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RolePlayer to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RolePlayer from a ByteBuffer. */
  public static RolePlayer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique ID of the message */
  @Deprecated public java.lang.CharSequence id;
  /** The type of role play. */
  @Deprecated public eu.driver.model.tm.Type type;
  /** The title of the role play message. */
  @Deprecated public java.lang.CharSequence title;
  /** The headline of the role play message. */
  @Deprecated public java.lang.CharSequence headline;
  /** The description of the role play message. */
  @Deprecated public java.lang.CharSequence description;
  /** The name of the person that has to handle the message. */
  @Deprecated public java.lang.CharSequence rolePlayerName;
  /** The names of the person that have to receive the message. */
  @Deprecated public java.util.List<java.lang.CharSequence> participantNames;
  /** The current role play state. */
  @Deprecated public eu.driver.model.tm.RolePlayState state;
  /** An optional comment to the session state. */
  @Deprecated public java.lang.CharSequence comment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RolePlayer() {}

  /**
   * All-args constructor.
   * @param id The unique ID of the message
   * @param type The type of role play.
   * @param title The title of the role play message.
   * @param headline The headline of the role play message.
   * @param description The description of the role play message.
   * @param rolePlayerName The name of the person that has to handle the message.
   * @param participantNames The names of the person that have to receive the message.
   * @param state The current role play state.
   * @param comment An optional comment to the session state.
   */
  public RolePlayer(java.lang.CharSequence id, eu.driver.model.tm.Type type, java.lang.CharSequence title, java.lang.CharSequence headline, java.lang.CharSequence description, java.lang.CharSequence rolePlayerName, java.util.List<java.lang.CharSequence> participantNames, eu.driver.model.tm.RolePlayState state, java.lang.CharSequence comment) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.headline = headline;
    this.description = description;
    this.rolePlayerName = rolePlayerName;
    this.participantNames = participantNames;
    this.state = state;
    this.comment = comment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return type;
    case 2: return title;
    case 3: return headline;
    case 4: return description;
    case 5: return rolePlayerName;
    case 6: return participantNames;
    case 7: return state;
    case 8: return comment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: type = (eu.driver.model.tm.Type)value$; break;
    case 2: title = (java.lang.CharSequence)value$; break;
    case 3: headline = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: rolePlayerName = (java.lang.CharSequence)value$; break;
    case 6: participantNames = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: state = (eu.driver.model.tm.RolePlayState)value$; break;
    case 8: comment = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique ID of the message
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The unique ID of the message
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of role play.
   */
  public eu.driver.model.tm.Type getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of role play.
   * @param value the value to set.
   */
  public void setType(eu.driver.model.tm.Type value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The title of the role play message.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * The title of the role play message.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'headline' field.
   * @return The headline of the role play message.
   */
  public java.lang.CharSequence getHeadline() {
    return headline;
  }

  /**
   * Sets the value of the 'headline' field.
   * The headline of the role play message.
   * @param value the value to set.
   */
  public void setHeadline(java.lang.CharSequence value) {
    this.headline = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The description of the role play message.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * The description of the role play message.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'rolePlayerName' field.
   * @return The name of the person that has to handle the message.
   */
  public java.lang.CharSequence getRolePlayerName() {
    return rolePlayerName;
  }

  /**
   * Sets the value of the 'rolePlayerName' field.
   * The name of the person that has to handle the message.
   * @param value the value to set.
   */
  public void setRolePlayerName(java.lang.CharSequence value) {
    this.rolePlayerName = value;
  }

  /**
   * Gets the value of the 'participantNames' field.
   * @return The names of the person that have to receive the message.
   */
  public java.util.List<java.lang.CharSequence> getParticipantNames() {
    return participantNames;
  }

  /**
   * Sets the value of the 'participantNames' field.
   * The names of the person that have to receive the message.
   * @param value the value to set.
   */
  public void setParticipantNames(java.util.List<java.lang.CharSequence> value) {
    this.participantNames = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The current role play state.
   */
  public eu.driver.model.tm.RolePlayState getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * The current role play state.
   * @param value the value to set.
   */
  public void setState(eu.driver.model.tm.RolePlayState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return An optional comment to the session state.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * An optional comment to the session state.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Creates a new RolePlayer RecordBuilder.
   * @return A new RolePlayer RecordBuilder
   */
  public static eu.driver.model.tm.RolePlayer.Builder newBuilder() {
    return new eu.driver.model.tm.RolePlayer.Builder();
  }

  /**
   * Creates a new RolePlayer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RolePlayer RecordBuilder
   */
  public static eu.driver.model.tm.RolePlayer.Builder newBuilder(eu.driver.model.tm.RolePlayer.Builder other) {
    return new eu.driver.model.tm.RolePlayer.Builder(other);
  }

  /**
   * Creates a new RolePlayer RecordBuilder by copying an existing RolePlayer instance.
   * @param other The existing instance to copy.
   * @return A new RolePlayer RecordBuilder
   */
  public static eu.driver.model.tm.RolePlayer.Builder newBuilder(eu.driver.model.tm.RolePlayer other) {
    return new eu.driver.model.tm.RolePlayer.Builder(other);
  }

  /**
   * RecordBuilder for RolePlayer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RolePlayer>
    implements org.apache.avro.data.RecordBuilder<RolePlayer> {

    /** The unique ID of the message */
    private java.lang.CharSequence id;
    /** The type of role play. */
    private eu.driver.model.tm.Type type;
    /** The title of the role play message. */
    private java.lang.CharSequence title;
    /** The headline of the role play message. */
    private java.lang.CharSequence headline;
    /** The description of the role play message. */
    private java.lang.CharSequence description;
    /** The name of the person that has to handle the message. */
    private java.lang.CharSequence rolePlayerName;
    /** The names of the person that have to receive the message. */
    private java.util.List<java.lang.CharSequence> participantNames;
    /** The current role play state. */
    private eu.driver.model.tm.RolePlayState state;
    /** An optional comment to the session state. */
    private java.lang.CharSequence comment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.driver.model.tm.RolePlayer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.headline)) {
        this.headline = data().deepCopy(fields()[3].schema(), other.headline);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rolePlayerName)) {
        this.rolePlayerName = data().deepCopy(fields()[5].schema(), other.rolePlayerName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.participantNames)) {
        this.participantNames = data().deepCopy(fields()[6].schema(), other.participantNames);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.state)) {
        this.state = data().deepCopy(fields()[7].schema(), other.state);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.comment)) {
        this.comment = data().deepCopy(fields()[8].schema(), other.comment);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RolePlayer instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.driver.model.tm.RolePlayer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.headline)) {
        this.headline = data().deepCopy(fields()[3].schema(), other.headline);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rolePlayerName)) {
        this.rolePlayerName = data().deepCopy(fields()[5].schema(), other.rolePlayerName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.participantNames)) {
        this.participantNames = data().deepCopy(fields()[6].schema(), other.participantNames);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.state)) {
        this.state = data().deepCopy(fields()[7].schema(), other.state);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.comment)) {
        this.comment = data().deepCopy(fields()[8].schema(), other.comment);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * The unique ID of the message
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * The unique ID of the message
      * @param value The value of 'id'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique ID of the message
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique ID of the message
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of role play.
      * @return The value.
      */
    public eu.driver.model.tm.Type getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of role play.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setType(eu.driver.model.tm.Type value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of role play.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of role play.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * The title of the role play message.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * The title of the role play message.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.title = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * The title of the role play message.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'title' field.
      * The title of the role play message.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearTitle() {
      title = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'headline' field.
      * The headline of the role play message.
      * @return The value.
      */
    public java.lang.CharSequence getHeadline() {
      return headline;
    }

    /**
      * Sets the value of the 'headline' field.
      * The headline of the role play message.
      * @param value The value of 'headline'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setHeadline(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.headline = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'headline' field has been set.
      * The headline of the role play message.
      * @return True if the 'headline' field has been set, false otherwise.
      */
    public boolean hasHeadline() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'headline' field.
      * The headline of the role play message.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearHeadline() {
      headline = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * The description of the role play message.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * The description of the role play message.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * The description of the role play message.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * The description of the role play message.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rolePlayerName' field.
      * The name of the person that has to handle the message.
      * @return The value.
      */
    public java.lang.CharSequence getRolePlayerName() {
      return rolePlayerName;
    }

    /**
      * Sets the value of the 'rolePlayerName' field.
      * The name of the person that has to handle the message.
      * @param value The value of 'rolePlayerName'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setRolePlayerName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.rolePlayerName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rolePlayerName' field has been set.
      * The name of the person that has to handle the message.
      * @return True if the 'rolePlayerName' field has been set, false otherwise.
      */
    public boolean hasRolePlayerName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rolePlayerName' field.
      * The name of the person that has to handle the message.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearRolePlayerName() {
      rolePlayerName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'participantNames' field.
      * The names of the person that have to receive the message.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getParticipantNames() {
      return participantNames;
    }

    /**
      * Sets the value of the 'participantNames' field.
      * The names of the person that have to receive the message.
      * @param value The value of 'participantNames'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setParticipantNames(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.participantNames = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'participantNames' field has been set.
      * The names of the person that have to receive the message.
      * @return True if the 'participantNames' field has been set, false otherwise.
      */
    public boolean hasParticipantNames() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'participantNames' field.
      * The names of the person that have to receive the message.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearParticipantNames() {
      participantNames = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * The current role play state.
      * @return The value.
      */
    public eu.driver.model.tm.RolePlayState getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * The current role play state.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setState(eu.driver.model.tm.RolePlayState value) {
      validate(fields()[7], value);
      this.state = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * The current role play state.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'state' field.
      * The current role play state.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearState() {
      state = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * An optional comment to the session state.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }

    /**
      * Sets the value of the 'comment' field.
      * An optional comment to the session state.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.comment = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * An optional comment to the session state.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'comment' field.
      * An optional comment to the session state.
      * @return This builder.
      */
    public eu.driver.model.tm.RolePlayer.Builder clearComment() {
      comment = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RolePlayer build() {
      try {
        RolePlayer record = new RolePlayer();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (eu.driver.model.tm.Type) defaultValue(fields()[1]);
        record.title = fieldSetFlags()[2] ? this.title : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.headline = fieldSetFlags()[3] ? this.headline : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.rolePlayerName = fieldSetFlags()[5] ? this.rolePlayerName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.participantNames = fieldSetFlags()[6] ? this.participantNames : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.state = fieldSetFlags()[7] ? this.state : (eu.driver.model.tm.RolePlayState) defaultValue(fields()[7]);
        record.comment = fieldSetFlags()[8] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RolePlayer>
    WRITER$ = (org.apache.avro.io.DatumWriter<RolePlayer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RolePlayer>
    READER$ = (org.apache.avro.io.DatumReader<RolePlayer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
